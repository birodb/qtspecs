<item>
   <title>Issue #97 created</title>
   <pubDate>2021-11-22T18:53:57Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/97</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-97</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Functions symmetric to `head()` and `tail()` for sequences and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In Xpath 3.1 we already have &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-head"&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;head()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-tail"&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;tail()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, and &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-last"&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;last()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But there is no function that produces the subsequence of all items of a sequence except the last one. There exists such a function in other programming languages. For example, in Haskell this is the &lt;a href="https://hackage.haskell.org/package/base-4.16.0.0/docs/src/GHC.List.html#init"&gt;&lt;strong&gt;&lt;em&gt;init&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; function.&lt;/p&gt;
&lt;p&gt;And the &lt;code&gt;last()&lt;/code&gt; function isn't the symmetric opposite of &lt;code&gt;head()&lt;/code&gt; -- it doesn't give us the last item in a sequence, just its position. So we need another function: &lt;code&gt;fn:heel()&lt;/code&gt; for this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;fn:init($sequence as item()*) as item()*

fn:heel($sequence as item()*) as item()?
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;init($seq)&lt;/code&gt; is a convenient shorthand for &lt;code&gt;subsequence($seq, 1, count($seq) -1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;heel($seq)&lt;/code&gt; is a convenient shorthand for &lt;code&gt;slice($seq, -1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:init(('a', 'b', 'c'))&lt;/code&gt; returns &lt;code&gt;'a', 'b'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:init(('a', 'b'))&lt;/code&gt; returns &lt;code&gt;'a'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:init('a')&lt;/code&gt; returns &lt;code&gt;()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:init(())&lt;/code&gt; returns &lt;code&gt;()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:heel('a', 'b', 'c')&lt;/code&gt; returns &lt;code&gt;'c'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;('a', 'b', 'c') =&amp;gt; init() =&amp;gt; heel()&lt;/code&gt; returns &lt;code&gt;'b'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It makes sense to have &lt;code&gt;fn:init()&lt;/code&gt; and &lt;code&gt;fn:heel()&lt;/code&gt; defined on arrays, too&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;array:init($array as array(*)) as array(*)

array:heel($array as array(*)) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:init([1, 2, 3, 4, 5])&lt;/code&gt;  returns &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:init([1])&lt;/code&gt;  returns &lt;code&gt;[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:heel([1, 2, 3, (4, 5)])&lt;/code&gt;  returns &lt;code&gt;(4, 5)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:heel([()])&lt;/code&gt;  returns &lt;code&gt;()&lt;/code&gt; (the empty sequence)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:init([])&lt;/code&gt;  produces &lt;strong&gt;error&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:heel([])&lt;/code&gt;  produces &lt;strong&gt;error&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[1, 2, 3, (4, 5)] =&amp;gt;array:heel() =&amp;gt; heel()&lt;/code&gt;  returns &lt;code&gt;5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I would challenge anyone to re-write the last example in understandable way using &lt;code&gt;fn:slice()&lt;/code&gt; ðŸ’¯&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
