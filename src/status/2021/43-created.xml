<item>
   <title>Issue #43 created</title>
   <pubDate>2021-01-06T15:37:58Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/43</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-43</guid>
   <description>&lt;div&gt;&lt;p&gt;Support standard and user-defined composite values using item type definitions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The composite values defined in &lt;em&gt;4.14.4 Composite Atomic Values&lt;/em&gt; are currently specified as a table. This means that it is not possible for users to define their own properties for custom types. It is also harder for editors/IDEs, or other tools to implement as there is an element of hard-coding the logic.&lt;/p&gt;
&lt;p&gt;These could be implemented as a properties/values record associated with the defined type. The values of the record could then be arity-1 functions that are called with the supplied value when accessed via maps. For example, in XQuery:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare %composite-values("composite-values") type xs:date external; (: built-in :)
declare type date-composite-values := record(
    year: fn:year-from-date#1,
    (: ... :)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and XSLT:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:item-type name="xs:date" composite-values="date-composite-values"/&amp;gt;
&amp;lt;xsl:item-type name="date-composite-values" as="record(
    year: fn:year-from-date#1,
    (: ... :)
)"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;code&gt;xs:date("1999-10-15")?year&lt;/code&gt; would be evaluated as &lt;code&gt;date-composite-values?year(xs:date("1999-10-15"))&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
