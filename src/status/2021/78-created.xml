<item>
   <title>Issue #78 created</title>
   <pubDate>2021-05-30T00:33:20Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/78</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-78</guid>
   <description>&lt;div&gt;&lt;p&gt;Specify strict order of evaluation for a subexpression &lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As discussed in a related issue #71, given an XPath expression such as (1):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for $d in  ( 10, 2, 3 , current-date())
  return
     $d[. castable as xs:date][xs:date(.) le current-date()]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;anyone who expects this expression to be evaluated without errors and to produce as result a sequence of one item, will be disappointed to get an error (as per BaseX 9.5.2):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Error&lt;/strong&gt;:
&lt;em&gt;Stopped at C:/W3C-XPath/DupsSolutions/file, 3/39:
[XPTY0004] Cannot convert xs:integer to &lt;code&gt;xs:date&lt;/code&gt;: 10&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;At present the recommended solution to the problem is to write an expression of this kind instead (2):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for $d in  ( 10, 2, 3, current-date() )
  return
     if($d[. castable as xs:date] eq $d)
       then $d[xs:date(.) le current-date()]
       else()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evaluating this produces the expected result (a sequence of one item, which is the &lt;code&gt;current-date()&lt;/code&gt; ).&lt;/p&gt;
&lt;p&gt;There are many challenges with such a recommendation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The expression above is unreadable.&lt;/li&gt;
&lt;li&gt;It is very difficult and error-prone to convert manually (1) to (2)&lt;/li&gt;
&lt;li&gt;It would be nearly impossible to transform a more complex expression and it would be tremendously difficult to read, understand and maintain such code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Proposed solution&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Introduce the &lt;strong&gt;&lt;em&gt;strict-order evaluation&lt;/em&gt;&lt;/strong&gt; operator &lt;strong&gt;~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Then achieving a strict-order evaluation for the subexpression (of (1) above): &lt;code&gt;[xs:date(.) le current-date()]&lt;/code&gt; would be  simply (3):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for $d in  ( 10, 2, 3 , current-date())
  return
     $d[. castable as xs:date]~[xs:date(.) le current-date()]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this particular case the XPath processor will rewrite the above expression into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for $d in  ( 10, 2, 3, current-date() )
  return
     $d[. castable as xs:date] =&amp;gt; 
                                  (function($x) {
                                                 $x[xs:date($x) le current-date()]
                                                 }
                                  ) ()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
