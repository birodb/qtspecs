<item>
   <title>Issue #70 created</title>
   <pubDate>2021-04-12T16:47:00Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/70</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-70</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Built-in function changes to support default values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue tracks the changes needed to the built-in functions to allow them to combine the declarations into a single definition with default parameter values.&lt;/p&gt;
&lt;p&gt;The general approach to this is to make required arguments optional if they are for a function signature that is not the lowest argument count signature, and move any associated logic into the function.&lt;/p&gt;
&lt;h2&gt;array:subarray&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;array:subarray&lt;/code&gt;/&lt;code&gt;$length&lt;/code&gt; from &lt;code&gt;xs:integer&lt;/code&gt; to &lt;code&gt;xs:integer?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Rules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Except in error cases, the result of the function is the value of the expression op:A2S($array) =&amp;gt; fn:subsequence($start, $length) =&amp;gt; op:S2A().&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Error Conditions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A dynamic error is raised [err:FOAY0001] if $start is less than one or greater than array:size($array) + 1.&lt;/p&gt;
&lt;p&gt;A dynamic error is raised [err:FOAY0002] if $length is not an empty sequence and is less than zero.&lt;/p&gt;
&lt;p&gt;A dynamic error is raised [err:FOAY0001] if $length is not an empty sequence and $start + $length is greater than array:size($array) + 1.&lt;/p&gt;
&lt;h2&gt;fn:concat&lt;/h2&gt;
&lt;p&gt;This should be modified to use a sequence-variadic signature, either as a 1 parameter function (taking an &lt;code&gt;xs:anyAtomicType*&lt;/code&gt; value, allowing 0 and 1 arguments), or a 3 parameter function with the last parameter having the type &lt;code&gt;xs:anyAtomicType*&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;fn:differences&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;$options&lt;/code&gt; parameter should be moved to the end of the parameter list in order to make the function a map-variadic function when default values are applied. This then makes it possible to specify the collation argument using a keyword argument in addition to specifying options as keyword arguments.&lt;/p&gt;
&lt;h2&gt;fn:resolve-uri&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:resolve-uri&lt;/code&gt;/&lt;code&gt;$base&lt;/code&gt; from &lt;code&gt;node()&lt;/code&gt; to &lt;code&gt;node()?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;- If the $base argument is not supplied,
+ If the $base argument is the empty sequence,
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;fn:subsequence&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:subsequence&lt;/code&gt;/&lt;code&gt;$length&lt;/code&gt; from &lt;code&gt;xs:double&lt;/code&gt; to &lt;code&gt;xs:double?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When $length is the empty sequence, this function returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$input[fn:round($start) le position()]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When $length is not the empty sequence, this function returns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$input[fn:round($start) le position() 
         and position() lt fn:round($start) + fn:round($length)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;fn:substring&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:subsequence&lt;/code&gt;/&lt;code&gt;$length&lt;/code&gt; from &lt;code&gt;xs:double&lt;/code&gt; to &lt;code&gt;xs:double?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More specifically, when $length is not the empty sequence the function returns the characters in $value whose position $p satisfies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:round($start) &amp;lt;= $p and $p &amp;lt; fn:round($start) + fn:round($length)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When $length is the empty sequence the function assumes that $length is infinite and thus returns the ·characters· in $value whose position $p satisfies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:round($start) &amp;lt;= $p
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;fn:tokenize&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:tokenize&lt;/code&gt;/&lt;code&gt;$pattern&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If $pattern is the empty sequence, the $value argument is set to &lt;code&gt;fn:normalize-space($value)&lt;/code&gt; and $pattern is set to &lt;code&gt;' '&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;fn:unparsed-text / fn:unparsed-text-available&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:unparsed-text&lt;/code&gt;/&lt;code&gt;$encoding&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:unparsed-text-available&lt;/code&gt;/&lt;code&gt;$encoding&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;fn:unparsed-text-lines&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:unparsed-text-lines&lt;/code&gt;/&lt;code&gt;$encoding&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The result of the function is the same as the result of the expression &lt;code&gt;fn:tokenize(fn:unparsed-text($href, $encoding), '\r\n|\r|\n')[not(position()=last() and .='')]&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Collations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change &lt;code&gt;fn:collation-key&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:compare&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:contains&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:contains-token&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:deep-equal&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:differences&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:distinct-values&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:ends-with&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:index-of&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:max&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:min&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:starts-with&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:substring-after&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:substring-before&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:uniform&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;fn:unique&lt;/code&gt;/&lt;code&gt;$collation&lt;/code&gt; from &lt;code&gt;xs:string&lt;/code&gt; to &lt;code&gt;xs:string?&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Passing the empty sequence to the $collation argument is equivalent to supplying the default collation to that argument.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
