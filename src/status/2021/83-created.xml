<item>
   <title>Issue #83 created</title>
   <pubDate>2021-07-29T15:08:06Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/83</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-83</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath]Proposal: Notation for using an operator as a function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In this thread of (XML slack)#general:
https://app.slack.com/client/T011VK9115Z/C011NLXE4DU/thread/C011NLXE4DU-1627497085.455200?cdn_fallback=2
there is this expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;for-each-pair($aa, $bb, function($x, $y) {$x ne $y}) 
           =&amp;gt; index-of(true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the long and unreadable: &lt;code&gt;function($x, $y) {$x ne $y}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Writing, understanding and maintaining XPath code, would be enhanced if we had a better way of expressing the use of an operator as a function.
In Haskell one simply writes:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-haskell"&gt;(/)  4, 2
half   = (/2)
(-) 4, 2
negate = (0-)
ne = (/=)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could accept a similar convention, so the original expression above is written simply as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;for-each-pair($aa, $bb, (ne)) 
           =&amp;gt; index-of(true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or we could use something less overloaded than parenthesis, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;`ne`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then the original expression looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;for-each-pair($aa, $bb, `ne`) 
           =&amp;gt; index-of(true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Regardless which lexical representation is chosen, being able to represent an operator as a function leads to significant code simplification, and improves its readability.&lt;/p&gt;
&lt;p&gt;Please, share your thoughts/questions on this proposal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
