<item>
   <title>Issue #67 created</title>
   <pubDate>2021-04-09T09:59:18Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/67</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-67</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow optional parameters and keyword arguments on map and sequence variadic functions.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;These proposed draft changes seek to address the following issues with, and limitations of, the current draft specification:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;%variadic("sequence")&lt;/code&gt; function where the sequence type uses the &lt;code&gt;+&lt;/code&gt; occurrence indicator should not have an implicit default value. That would mean passing &lt;code&gt;()&lt;/code&gt; to the sequence, which would generate a coercion error.&lt;/li&gt;
&lt;li&gt;Map-variadic and sequence-variadic functions cannot have user-specified default parameter values with the current draft wording. In this case the map/sequence last parameter need to be given a default in the function declaration. This allows those to be defaulted to something other than an empty map/sequence, as well as specifying the defaults for other parameters (e.g. in the case where a map is the last of several parameters).&lt;/li&gt;
&lt;li&gt;It should be possible to allow parameters to be specified as keyword arguments for map-variadic functions. For map-variadic functions, a keyword argument will be bound to a parameter if it matches the parameter, or added to the map if not.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Design Note:&lt;/p&gt;
&lt;p&gt;It would be nice to support keyword arguments for sequence-variadic functions. The other design notes detail a possible way to implement this logic. This would resolve issue #26, and make the features (keyword arguments in this case) usable in all cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Proposal&lt;/h2&gt;
&lt;p&gt;There are two orthogonal concepts related to variadic functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;arity bounds&lt;/em&gt; -- the number of required and optional parameters a function has;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;variadic type&lt;/em&gt; -- how the function behaves in relation to its last parameter.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Arity Bounds&lt;/h3&gt;
&lt;p&gt;[Definition: The &lt;em&gt;declared arity&lt;/em&gt; of a function is the number of parameters defined in the function declaration.] The declared arity includes both required and optional parameters.&lt;/p&gt;
&lt;p&gt;[Definition: An &lt;em&gt;optional parameter&lt;/em&gt; is a parameter with a default value.] The default value may either be specified in the function declaration, or determined by the logic described below.&lt;/p&gt;
&lt;p&gt;[Definition: A &lt;em&gt;declared optional parameter&lt;/em&gt; is an optional parameter specified in the function declaration.] TODO: Define a syntax for specifying declared optional parameters. [Note: see issue #64 for a proposal on doing this.]&lt;/p&gt;
&lt;p&gt;The property &lt;code&gt;A&lt;/code&gt; is the &lt;em&gt;declared arity&lt;/em&gt; of a function.&lt;/p&gt;
&lt;p&gt;The property &lt;code&gt;D&lt;/code&gt; is the number of optional parameters. This is determined as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If there are any declared optional parameters, &lt;code&gt;D&lt;/code&gt; is the number of declared optional parameters.&lt;/li&gt;
&lt;li&gt;If the last parameter is a &lt;code&gt;MapTest&lt;/code&gt; or &lt;code&gt;RecordTest&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; is 1.&lt;/li&gt;
&lt;li&gt;If the last parameter is a sequence type with a minimum item occurrence of 0 (e.g. using the &lt;code&gt;*&lt;/code&gt; occurrence indicator), &lt;code&gt;D&lt;/code&gt; is 1.&lt;/li&gt;
&lt;li&gt;If none of the above apply, &lt;code&gt;D&lt;/code&gt; is 0.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The property &lt;code&gt;R&lt;/code&gt; is the number of required parameters, and is determined by evaluating &lt;code&gt;A-D&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Variadic Type&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;variadic type&lt;/em&gt; is given by the &lt;code&gt;%variadic(enum("no", "map", "sequence"))&lt;/code&gt; annotation. It is determined as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the last parameter is a &lt;code&gt;MapTest&lt;/code&gt; or &lt;code&gt;RecordTest&lt;/code&gt;, &lt;code&gt;%variadic("map")&lt;/code&gt; is specified.&lt;/li&gt;
&lt;li&gt;If the last parameter is a sequence type with an unbounded maximum item occurrence (e.g. using the &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; occurrence indicator), &lt;code&gt;%variadic("sequence")&lt;/code&gt; is specified.&lt;/li&gt;
&lt;li&gt;If none of the above apply, &lt;code&gt;%variadic("no")&lt;/code&gt; is specified.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[Definition: The &lt;em&gt;variadic parameter&lt;/em&gt; of a function refers to the last parameter of a map-variadic or sequence-variadic function.]&lt;/p&gt;
&lt;p&gt;The values of the MinA/MaxA, MinP/MaxP, and MinK/MaxK properties are given by the following table, where &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt; are defined in the &lt;em&gt;arity bounds&lt;/em&gt; section.&lt;/p&gt;
&lt;p&gt;| &lt;code&gt;%variadic&lt;/code&gt;    | MinA | MaxA      | MinP | MaxP      | MinK | MaxK      |
|----------------|------|-----------|------|-----------|------|-----------|
| &lt;code&gt;no&lt;/code&gt;           | R    | A         | 0    | A         | 0    | A         |
| &lt;code&gt;map&lt;/code&gt;          | R    | unbounded | 0    | A         | 0    | unbounded |
| &lt;code&gt;sequence&lt;/code&gt;     | R    | unbounded | R    | unbounded | 0    | 0         |&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;%variadic("no")&lt;/code&gt; and &lt;code&gt;%variadic("map")&lt;/code&gt; functions, positional and keyword arguments can be mixed, or the arguments can be specified as either all positional arguments, or all keyword arguments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;If a keyword argument has the name of the variadic parameter for a map-variadic function, it is used to specify the value of that map, and not a key in a constructed map. In this case, the other keyword arguments must specify parameter names as the value of the variadic parameter has already been specified, and would result in a conflicting value if any of the keyword arguments were specifying keys in the variadic parameter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For &lt;code&gt;%variadic("sequence")&lt;/code&gt; functions, only positional parameters are allowed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Design Note:&lt;/p&gt;
&lt;p&gt;Keyword arguments &lt;em&gt;could&lt;/em&gt; be supported for sequence-variadic functions if the presence of a keyword argument makes it function like &lt;code&gt;%variadic("no")&lt;/code&gt;. That is, it is not unbounded in this case. This would work, as keyword arguments occur after positional arguments, and the variadic parameter would need to be specified as a keyword argument.&lt;/p&gt;
&lt;p&gt;The tricky part of this is that MinA/MaxA would no longer be statically determinable, in that they would depend on whether the function call used keyword arguments.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sequence&lt;/code&gt; row would be modified as follows:&lt;/p&gt;
&lt;p&gt;| &lt;code&gt;%variadic&lt;/code&gt;    | MinA | MaxA      | MinP | MaxP      | MinK | MaxK      |
|----------------|------|-----------|------|-----------|------|-----------|
| &lt;code&gt;sequence&lt;/code&gt;     | R    | variable [1] | 0    | unbounded | 0    | A         |&lt;/p&gt;
&lt;p&gt;[1] If the function call has at least one keyword argument, &lt;code&gt;MaxA&lt;/code&gt; is &lt;code&gt;A&lt;/code&gt;. Otherwise, &lt;code&gt;MaxA&lt;/code&gt; is &lt;code&gt;unbounded&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Evaluating Static Function Calls&lt;/h3&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;
&lt;p&gt;Positional argument values are mapped to parameters in the function declaration as follows:
Let the number of declared parameters be N.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A positional argument with position M, (M &amp;lt; N) corresponds to the parameter in position M.&lt;/li&gt;
&lt;li&gt;For sequence-variadic functions, the values of arguments in positions greater than or equal to N are concatenated into a sequence, and the resulting sequence is supplied as the value of parameter N. If there are no such arguments (that is, if N-1 arguments are supplied), then the value supplied for parameter N is an empty sequence.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keyword argument values are mapped to parameters in the function declaration as follows:
Let the keyword corresponding to a keyword argument be K.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If there is a parameter with name K, the keyword argument corresponds to the named parameter K.&lt;/li&gt;
&lt;li&gt;For map-variadic functions, the keyword argument is assembled into a map. For each keyword argument, the map has an entry whose name is the keyword (as an instance of &lt;code&gt;xs:string&lt;/code&gt;) and whose corresponding value is the argument value.&lt;/li&gt;
&lt;li&gt;For non-variadic functions, an XPST#### error is raised if there is no parameter with name K.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Design Note:&lt;/p&gt;
&lt;p&gt;If supporting keyword arguments for sequence-variadic functions, 4/iii would handle them. That is, an error is raised if the keyword name does not match a parameter name.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start="5"&gt;
&lt;li&gt;
&lt;p&gt;If no argument corresponds to a parameter in the function declaration:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the parameter has a default value, then that value is used.
TODO: define how the default value is evaluated, i.e. what context is used.&lt;/li&gt;
&lt;li&gt;For sequence-variadic functions, the value supplied for parameter N is an empty sequence.&lt;/li&gt;
&lt;li&gt;For map-variadic functions, the value supplied for parameter N is the map constructed in step 4. If no keyword arguments were used to construct the map, and empty map is used.&lt;/li&gt;
&lt;li&gt;If none of the above apply, an XPST#### error is raised.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If more than one argument corresponds to a parameter in the function declaration, an XPST#### error is raised.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
