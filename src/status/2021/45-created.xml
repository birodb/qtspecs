<item>
   <title>Issue #45 created</title>
   <pubDate>2021-01-12T12:56:55Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/45</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-45</guid>
   <description>&lt;div&gt;&lt;p&gt;Second parameter of fn:sum must be neutral element for +&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently fn:sum specifies the intent of the second parameter in a note:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The second argument allows an appropriate value to be defined to represent the sum of an empty sequence. For example, when summing a sequence of durations it would be appropriate to return a zero-length duration of the appropriate type. This argument is necessary because a system that does dynamic typing cannot distinguish "an empty sequence of integers", for example, from "an empty sequence of durations".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When implementing fn:sum on sequences of billions of items (numerics, or durations, etc), another aspect arises: this second parameter must also be, for this to work and for optimizations to be possible, a neutral element for +.&lt;/p&gt;
&lt;p&gt;Indeed, a distributed system like Spark will produce intermediate sums for (possibly empty) subsets, and will naturally use &lt;code&gt;$zero&lt;/code&gt; for the sum of an empty subset. Intermediate totals are aggregated in a treewise fashion. For the result to be correct, it must be the case that &lt;code&gt;$zero + $x eq $x&lt;/code&gt; for any item in the sequence provided as the first parameter. It is fully aligned with the idea of the note above, but I would suggest to make this requirement a bit stricter.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
