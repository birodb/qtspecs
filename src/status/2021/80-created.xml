<item>
   <title>Issue #80 created</title>
   <pubDate>2021-06-14T11:25:12Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/80</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-80</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] fn:while (before: fn:until)&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Motivation&lt;/h3&gt;
&lt;p&gt;Similar to &lt;code&gt;fold-left&lt;/code&gt;, the function allows for an alternative writing of code that would otherwise be solved recursively, and that would possibly cause stack overflows without tail call optimizations.&lt;/p&gt;
&lt;p&gt;In contrast to sequence-processing functions (fold functions, &lt;code&gt;for-each&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, others), the initial input of &lt;code&gt;fn:while&lt;/code&gt; can be arbitrary and will not determine the number of maximum iterations.&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Applies the predicate function &lt;code&gt;$test&lt;/code&gt; to &lt;code&gt;$input&lt;/code&gt;. If the result is &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;$action&lt;/code&gt; is invoked with the start value – or, subsequently, with the result of this function – until the predicate function returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; The &lt;code&gt;$input&lt;/code&gt; argument (before: &lt;code&gt;$zero&lt;/code&gt;) is now defined as first parameter.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:while(
  $input  as item()*,
  $test   as function(item()*) as xs:boolean,
  $action as function(item()*) as item()*
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Examples / Use Cases&lt;/h3&gt;
&lt;p&gt;Calculate the square root of a number by iteratively improving an initial guess:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $input := 3936256
return fn:while(
  $input,
  function($result) { abs($result * $result - $input) &amp;gt;= 0.0000000001 },
  function($guess) { ($guess + $input div $guess) div 2 }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find the first number that does not occur in a sequence:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $values := (1 to 999, 1001 to 2000)
return while(1, -&amp;gt; { . = $values }, -&amp;gt; { . + 1 })
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Equivalent Expression&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function local:while(
  $input  as item()*,
  $test   as function(item()*) as xs:boolean,
  $action as function(item()*) as item()*
) {
  if($test($input)) then (
    local:while($action($input), $test, $action)
  ) else (
    $input
  )
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
