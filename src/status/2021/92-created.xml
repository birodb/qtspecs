<item>
   <title>Issue #92 created</title>
   <pubDate>2021-10-24T13:58:58Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/92</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-92</guid>
   <description>&lt;div&gt;&lt;p&gt;Simplify rule for attribute values on Extension Instructions used to invoke named templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Regarding the rule in the current proposal for &lt;a href="https://qt4cg.org/branch/master/xslt-40/Overview.html#invoking-named-templates"&gt;Invoking Named Templates with Extension Instructions&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The way in which attribute values are handled depends on the type declaration of the template parameter...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have some problems with this dependency on parameter type (to control whether value is an AVT or XPath expression):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In many cases, a &lt;code&gt;xs:string&lt;/code&gt; or &lt;code&gt;xs:boolean&lt;/code&gt; type passed as a param will be a variable reference so a coder needs to enter &lt;code&gt;name="{$myName}"&lt;/code&gt; instead of &lt;code&gt;name="$myName"&lt;/code&gt; in their XSLT editor.&lt;/li&gt;
&lt;li&gt;If passing a literal &lt;code&gt;xs:string&lt;/code&gt; type, the syntax: &lt;code&gt;name="first"&lt;/code&gt; would be easy for a human reader to misinterpret as a &lt;code&gt;NameTest&lt;/code&gt; instead of a &lt;code&gt;StringLiteral&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The dependency on param type means more effort (and thus poorer performance) for a tokenizer or syntax-highlighter as it may need to get type information from included/imported XSLT stylesheet modules or from extension elements declared later in the same XSLT module.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The third point above is most important from my viewpoint as maintainer of an XSLT editor, but I believe the first two points are also valid.&lt;/p&gt;
&lt;p&gt;For these reasons, I propose that: all attribute-values on extension instructions used to invoke named templates are treated as XPath expressions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
