<item>
   <title>Issue #53 created</title>
   <pubDate>2021-01-23T10:43:02Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/53</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-53</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Allow function keyword inline functions without parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current draft InlineFunctionExpr adds &lt;code&gt;-&amp;gt;&lt;/code&gt; as a shorthand. This shorthand allows optional parameter lists (e.g. &lt;code&gt;-&amp;gt; { true() }&lt;/code&gt;), but the &lt;code&gt;function&lt;/code&gt; keyword version of this requires a parameter list. For consistency, the &lt;code&gt;function&lt;/code&gt; keyword version should also have an optional parameter list.&lt;/p&gt;
&lt;p&gt;This means that the syntax for InlineFunctionExpr can be simplified to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;InlineFunctionExpr ::= ("function" | "-&amp;gt;")  FunctionSignature?  FunctionBody
&lt;/code&gt;&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;Update: From recent discussions, the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator as both a thin arrow expression and an inline function definition is confusing. As such, a replacement for &lt;code&gt;-&amp;gt;&lt;/code&gt; in the inline function context should be identified.&lt;/p&gt;
&lt;p&gt;In the context of the variant without a parameter definition (e.g. when used with arrow operators), the question is how should it work. I suggest:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it should be a 0 and 1 arity function with the parameter argument defaulting to &lt;code&gt;()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;if the parameter is a single value, it should bind to the &lt;code&gt;.&lt;/code&gt; (context item) and &lt;code&gt;~&lt;/code&gt; (context value -- https://github.com/qt4cg/qtspecs/issues/129);&lt;/li&gt;
&lt;li&gt;if the parameter is an empty sequence, or multi-valued sequence, it should bind to the &lt;code&gt;~&lt;/code&gt; (context value -- https://github.com/qt4cg/qtspecs/issues/129) only.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This way, it will be usable in multiple contexts.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
