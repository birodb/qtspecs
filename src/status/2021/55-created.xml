<item>
   <title>Issue #55 created</title>
   <pubDate>2021-02-04T19:45:01Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/55</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-55</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Provide an XML version of the stack trace.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;While the string version of &lt;code&gt;fn:stack-trace()&lt;/code&gt; is useful for debugging and including in log messages, being able to process that (from an XML representation) is also useful.&lt;/p&gt;
&lt;h3&gt;Use Cases&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;providing extended functionality, like implementing a &lt;code&gt;current-function-name()&lt;/code&gt; helper function -- e.g. &lt;code&gt;fn:stack-trace("json")[1]?function-name&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;customizing the format of the stack trace (e.g. standardizing it across different implementations);&lt;/li&gt;
&lt;li&gt;using the information in libraries/IDEs/editors that call the queries -- e.g. by returning the XML and processing it in the library/IDE/editor, such as mapping the data to stack frames in the IDE/editor. &lt;strong&gt;Note:&lt;/strong&gt; This is what I'm doing in my IntelliJ plugin with the MarkLogic stack XML to process query exceptions and the stack when debugging a query.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;fn:stack-trace&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;fn:stack-trace($format as enum("text", "xml", "json") := "text") as item()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like the current specification version of this function (with the same default semantics), but also supports XML and JSON formats. The "text" format returns an instance of &lt;code&gt;xs:string&lt;/code&gt; in an implementation-defined format, the "xml" format returns an instance of &lt;code&gt;element(fn:stack-trace)&lt;/code&gt;, and the "json" format returns an instance of &lt;code&gt;array(fn:stack-frame)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, &lt;code&gt;fn:stack-frame&lt;/code&gt; is defined as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare type fn:stack-frame as record(
    uri: xs:string,
    function-name: xs:QName?,
    line-number: xs:integer?,
    column-number: xs:integer?,
    *
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The XML version has the same information as elements in the &lt;code&gt;fn:&lt;/code&gt; namespace (e.g. &lt;code&gt;fn:uri&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;fn:format-stack-trace&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;fn:format-stack-trace($stack as item(),
                      $format as enum("text", "xml", "json") := "text") as item()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;$stack&lt;/code&gt; is an instance of &lt;code&gt;element(fn:stack-trace)&lt;/code&gt;, it is converted into the desired output format. (If the output format is "xml", no processing is performed.)&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;$stack&lt;/code&gt; is an instance of &lt;code&gt;array(fn:stack-frame)&lt;/code&gt;, it is converted into the desired output format. (If the output format is "json", no processing is performed.)&lt;/p&gt;
&lt;p&gt;Otherwise, an &lt;code&gt;err:XPTY0004&lt;/code&gt; error is raised.&lt;/p&gt;
&lt;h3&gt;fn:parse-stack-trace&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;fn:parse-stack-trace($stack as xs:string,
                     $format as enum("xml", "json")) as item()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function takes a stack trace in the implementation-defined format and parses it to XML or JSON. The "xml" format returns an instance of &lt;code&gt;element(fn:stack-trace)&lt;/code&gt;, and the "json" format returns an instance of &lt;code&gt;array(fn:stack-frame)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;$stack&lt;/code&gt; is not in the correct format, an error (error code TBD) is raised.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This could be useful when processing log messages or similar output.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
