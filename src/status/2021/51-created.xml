<item>
   <title>Issue #51 created</title>
   <pubDate>2021-01-18T11:07:46Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/51</link>
   <guid>https://qt4cg.org/@qt4cg/2021/#created-51</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Generalize lookup operator for function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current lookup operator is a specialized expression for maps and arrays. All kinds of data structures can be realized with functions, and maps and arrays are functions as well, so it would be pretty straightforward to extend the lookup operator to arbitrary function items:&lt;/p&gt;
&lt;h3&gt;Use Cases&lt;/h3&gt;
&lt;h4&gt;Return name elements whose string values contain supplied substrings&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare variable $DOC := &amp;lt;xml&amp;gt;
  &amp;lt;name&amp;gt;Jack Daniels&amp;lt;/name&amp;gt;
  &amp;lt;name&amp;gt;Jim Beam&amp;lt;/name&amp;gt;
  &amp;lt;name&amp;gt;Johnny Walker&amp;lt;/name&amp;gt;
&amp;lt;/xml&amp;gt;;

let $names := function($key) {
  $DOC//name[contains(string(), $key)]
}
return $names?('Jack', 'Jim', 'Johnny')

(: result :)
&amp;lt;name&amp;gt;Jack Daniels&amp;lt;/name&amp;gt;,
&amp;lt;name&amp;gt;Jim Beam&amp;lt;/name&amp;gt;,
&amp;lt;name&amp;gt;Johnny Walker&amp;lt;/name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Return squares of supplied integers&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $square := math:pow(?, 2)
return $square?(1 to 5)

(: result :)
1, 4, 9, 16, 25
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Remarks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;XPTY0004&lt;/code&gt; must be raised if the wildcard &lt;code&gt;*&lt;/code&gt; is specified as key, and if the input is neither a map nor an array.&lt;/li&gt;
&lt;li&gt;The extension could easily be combined with the extension for sequences (see #50).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
