<item>
   <title>Issue #334 created</title>
   <pubDate>2023-02-01T09:17:02Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/334</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-334</guid>
   <description>&lt;div&gt;&lt;p&gt;Transient properties: a new approach to deep selection and update in maps and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;After exploring many alternatives, I have come to the conclusion that we can't solve the problem of deep navigation and transformation of JSON structures without a data model change.&lt;/p&gt;
&lt;p&gt;Most of the problems boil down to this: JSON trees do not have parent pointers, therefore after navigating down to a leaf node of the tree, we cannot get any information from higher up the tree. The solution to this (the "zipper" model) is to retain transient information about how a particular node in the tree was reached, so that we can retrace our steps and revisit nodes that were passed en route.&lt;/p&gt;
&lt;p&gt;The change I propose is quite minor, but powerful: Any XDM value can be augmented with a set of transient properties represented as a set of key-value pairs. These properties are ignored (and typically dropped) by all operations on a value, except where otherwise specified. For the purpose of exposition, I'll use the syntax &lt;code&gt;$value¶name&lt;/code&gt; to refer to the transient &lt;code&gt;name&lt;/code&gt; property of &lt;code&gt;$value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We'll change the semantics of &lt;code&gt;map:get()&lt;/code&gt; and &lt;code&gt;array:get()&lt;/code&gt;, and the associated lookup operators, so that the resulting values have transient properties indicating how they were selected. For example, given&lt;/p&gt;
&lt;p&gt;&lt;code&gt;let $name := $person?firstName&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;the resulting value (perhaps the string "Michael") will be augmented with transient properties&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;¶parent - the map from which the value was selected (retaining its own transient properties if any)&lt;/li&gt;
&lt;li&gt;¶key - the key used to make the selection, here "firstName"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and derived properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;¶ancestors - the transitive closure of ¶parent&lt;/li&gt;
&lt;li&gt;¶root - the last ¶ancestor&lt;/li&gt;
&lt;li&gt;¶path - a string representation of the path used to select the value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can also define other "downward selection" operations such as &lt;code&gt;map:find&lt;/code&gt;, and &lt;code&gt;array:foot&lt;/code&gt; to retain these transient properties. So for example &lt;code&gt;map:find($json, 'firstname')[.='Michael']¶parent?surname&lt;/code&gt; now finds the surnames of anyone named 'Michael', at any depth of the tree.&lt;/p&gt;
&lt;p&gt;If we turn back to the use cases in my 2016 paper on transforming JSON&lt;/p&gt;
&lt;p&gt;https://www.saxonica.com/papers/xmlprague-2016mhk.pdf&lt;/p&gt;
&lt;p&gt;The first use case (bulk update) relied on matching items expressed in XML as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match="map[array[@key='tags']/string='ice']/number[@key='price']/text()"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which couldn't be done in JSON because of the inability to match based on ancestor context. With the new transient properties we can match this as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match="type(xs:integer)[¶key = 'price'][¶parent?tags?* = 'ice']"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the second use case (hierarchic inversion), we can again get properties of parent or ancestor maps&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$students ! map:put("course", ¶parent?name)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I think we can also use this to define deep update operations. But I'll leave that investigation until later.&lt;/p&gt;
&lt;p&gt;Note: transient properties potentially have many other applications, for example we might use them to solve our problems with &lt;code&gt;document-uri()&lt;/code&gt;. But exploring that would be a distraction here. The nice thing about transient properties is that they give a lot of potential for augmenting existing functionality with full backwards compatibility, because we can define existing operations to return results with additional transient properties that all existing operations will ignore. If we were so minded, for example, we could have different functions/operators return "quiet NaN" and "signalling NaN" by adding a transient property to the NaN value returned.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
