<item>
   <title>Issue #359 created</title>
   <pubDate>2023-02-20T09:53:03Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/359</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-359</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:void: Absorb result of evaluated argument&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Absorb the result of the evaluated argument.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:void(
  $input as item()*
) as empty-sequence()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Motivation&lt;/h3&gt;
&lt;p&gt;Developers tend to get creative if they want to suppress the result of an expression. The reason is that there is no simply solution to do this properly. Some constructs I have seen in practice:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $unused := EXPRESSION
return 'ok'

EXPRESSION[position() = 10000], 'ok'

let $result := 'ok'
return if(exists(EXPRESSION)) then $result else $result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cases like this are frequent in nondeterministic code. Think e.g. of side-effecting functions of the EXPath HTTP-Client and File Modules: The function results are not always relevant for the invoking application, or already known.&lt;/p&gt;
&lt;p&gt;The function is also helpful during development and for testing code. &lt;code&gt;fn:void#1&lt;/code&gt; and &lt;code&gt;fn:identity#1&lt;/code&gt; can both be passed on to functions to either return or ignore the result of their arguments. The function can potentially be used to measure the runtime performance of an expression (but an implementation should not be prevented from discarding the function call if the argument expression is deterministic).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
