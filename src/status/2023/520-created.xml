<item>
   <title>Issue #520 created</title>
   <pubDate>2023-05-23T11:58:37Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/520</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-520</guid>
   <description>&lt;div&gt;&lt;p&gt;Function identity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;To make deep-equal error-free for all arguments (issue #333), and to support the introduction of sets (issue #34), we need to be able to test whether two functions are "the same function". This is a proposed pragmatic solution.&lt;/p&gt;
&lt;p&gt;We change the data model for functions so that functions, like nodes, have an identity that is acquired when the function is created; two functions are identical if and only if they have the same identity.&lt;/p&gt;
&lt;p&gt;In general any expression that returns a new function allocates it an identity that is different from all other existing functions (as with nodes). However:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Repeated evaluation of a function reference such as count#1 returns the same function each time, provided that the target function is context-free.&lt;/li&gt;
&lt;li&gt;Optimizers are allowed to rewrite expressions (for example by loop-lifting, etc) so that expressions that would in principle return distinct functions actually return the same function, provided the optimizer can determine that the two functions are equivalent in all respects other than their identity. For example if the expression &lt;code&gt;contains(?, 'xxx')&lt;/code&gt; appears in a loop, the expression can be lifted out of the loop so there is no requirement that it returns different functions each time (as there is with nodes)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Benefits of this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;identical($x, $x) is always true (function identity survives binding to variables)&lt;/li&gt;
&lt;li&gt;functions obtained by repeated evaluation of the same expression in the same context are likely to return identical results in cases that are simple enough for an optimizer to analyse&lt;/li&gt;
&lt;li&gt;the results are likely to be reasonably intuitive&lt;/li&gt;
&lt;li&gt;optimisers aren't constrained by rules on identity to restrict the rewrites they can attempt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This does mean that expressions that return functions become a little impure - but only in the same way that expressions that create nodes are a little impure. The impurity is well understood and tolerated.&lt;/p&gt;
&lt;p&gt;Maps and arrays do not have identity as a property separate from their content.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
