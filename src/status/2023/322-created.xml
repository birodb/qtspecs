<item>
   <title>Issue #322 created</title>
   <pubDate>2023-01-26T10:10:12Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/322</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-322</guid>
   <description>&lt;div&gt;&lt;p&gt;Map construction in XSLT: xsl:record instruction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Constructing maps in XSLT often involves code rather like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;xsl:map&amp;gt;
               &amp;lt;xsl:map-entry key="'author'" select="string(AUTHOR)"/&amp;gt;
               &amp;lt;xsl:map-entry key="'title'" select="string(TITLE)"/&amp;gt;
               &amp;lt;xsl:map-entry key="'price'" select="xs:decimal(PRICE)"/&amp;gt;
               &amp;lt;xsl:map-entry key="'publisher'" select="string(../@name)"/&amp;gt;
           &amp;lt;/xsl:map&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The alternative using XPath is also rather ugly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:sequence select="map{'author': string(AUTHOR),
                                                 'title':string(TITLE), 
                                                 'price': xs:decimal(PRICE), 
                                                 'publisher':string(../@name)}"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(the fact  that it is creating a map doesn't stand out; the &lt;code&gt;xsl:sequence&lt;/code&gt; is a distraction because there's no sequence involved; and many users dislike long multi-line XPath expressions because of formatting problems in their editing tools)&lt;/p&gt;
&lt;p&gt;I propose a new instruction xsl:record which allows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;xsl:record author="string(AUTHOR)"
                                title="string(TITLE)" 
                                price="xs:decimal(PRICE)" 
                                publisher="string(../@name)"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is rather like literal result elements in that the attributes are user-defined rather than system-defined. Unlike LREs, the values are general expressions rather than AVTs, because the values are not necessarily strings. The instruction can only be used where the keys (field names) take the form of NCNames.&lt;/p&gt;
&lt;p&gt;If variable entries are required, or entries whose keys are not NCNames, they can appear as child instructions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;xsl:record author="string(AUTHOR)"
                                title="string(TITLE)" 
                                price="xs:decimal(PRICE)" 
                                publisher="string(../@name)"&amp;gt;
              &amp;lt;xsl:if test="@private"&amp;gt;
                  &amp;lt;xsl:map-entry name="'private entry'" select="true()"/&amp;gt;
              &amp;lt;/xsl:if&amp;gt;
          &amp;lt;/xsl:record&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Follow the tradition of LREs, duplicates are resolved as "last one wins".&lt;/p&gt;
&lt;p&gt;If "standard attributes" such as &lt;code&gt;[xsl:]version&lt;/code&gt; are required, they must be in the XSLT namespace, as with LREs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
