<item>
   <title>Issue #514 created</title>
   <pubDate>2023-05-20T08:44:03Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/514</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-514</guid>
   <description>&lt;div&gt;&lt;p&gt;Lambda expression: Annotations&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;Edit 2023-05-21:&lt;/strong&gt; Feedback was incorporated.&lt;/p&gt;
&lt;p&gt;In the current grammar rules, there are subtle differences in the &lt;code&gt;InlineFunctionExpr&lt;/code&gt; and &lt;code&gt;LambdaExpr&lt;/code&gt; rules that we should dissolve.&lt;/p&gt;
&lt;p&gt;Annotations are not supported in lambda expressions, which I believe is an unnecessary restriction:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: currently legal :)
let $delete-texts := %updating function($nodes) { delete nodes $nodes//text() }
return $delete-texts(//city)

(: currently illegal :)
let $delete-texts := %updating ($nodes) -&amp;gt; { delete nodes $nodes//text() }
return $delete-texts(//city)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should suffice to extend one rule in the grammar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(: old :)
LambdaExpr  ::=  LambdaParams "-&amp;gt;" EnclosedExpr
(: new :)
LambdaExpr  ::=  Annotation* LambdaParams "-&amp;gt;" EnclosedExpr
&lt;/code&gt;&lt;/pre&gt;
&lt;hr/&gt;
&lt;p&gt;We could also type declarations (as @michaelhkay has indicated below, though, this might not be as simple to realize as I hoped):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: currently legal :)
let $find-john := function($node as node()) as xs:boolean { contains($node, 'john') }
return $find-john($node)

(: currently illegal :)
let $find-john := ($node as node()) as xs:boolean -&amp;gt; { contains($node, 'john') }
return $find-john($node)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The type declarations cannot be allowed if parentheses are omitted (unless we make them mandatory):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: without parens :)
$i -&amp;gt; { ... }

(: parens :)
($i as xs:int) as xs:int -&amp;gt; { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are the current grammar rules:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FunctionItemExpr    ::=  NamedFunctionRef | InlineFunctionExpr | LambdaExpr
InlineFunctionExpr  ::=  Annotation* "function" FunctionSignature FunctionBody
FunctionSignature   ::=  "(" ParamList? ")" TypeDeclaration?
ParamList           ::=  Param ("," Param)*
Param               ::=  "$" EQName TypeDeclaration?
FunctionBody        ::=  EnclosedExpr
LambdaExpr          ::=  LambdaParams "-&amp;gt;" EnclosedExpr
LambdaParams        ::=  LambdaParam | "(" | (LambdaParam ("," LambdaParam)*)? | ")"
LambdaParam         ::=  "$" VarName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the &lt;code&gt;InlineFunctionExpr&lt;/code&gt; and &lt;code&gt;LambdaExpr&lt;/code&gt; both generate anonymous functions, we shouldn’t make a difference, and this is what I would recommend:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FunctionItemExpr    ::=  NamedFunctionRef | InlineFunctionExpr
InlineFunctionExpr  ::=  Annotation* (InlineFunction | LambdaFunction) FunctionBody
InlineFunction      ::=  "function" FunctionSignature
LambdaFunction      ::=  (Param | FunctionSignature)) "-&amp;gt;"
FunctionSignature   ::=  "(" ParamList? ")" TypeDeclaration?
ParamList           ::=  TypedParam ("," TypedParam)*
TypedParam          ::=  Param TypeDeclaration?
Param               ::=  "$" VarName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Disclaimer: I could have raised this earlier, but I didn’t want to prolong the ongoing discussion on the open pull requests.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
