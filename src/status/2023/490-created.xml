<item>
   <title>Issue #490 created</title>
   <pubDate>2023-05-10T22:03:16Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/490</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-490</guid>
   <description>&lt;div&gt;&lt;p&gt;Control over schema validation in parse-xml(), doc(), etc.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm struggling with a problem with the stylesheet that generates QT4 tests from the examples in the function catalog, and I think it's an example of a more general problem in schema-aware processing.&lt;/p&gt;
&lt;p&gt;The spec gives this example (for json-to-xml):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The expression json-to-xml('{"x": "\\", "y": "\u0025"}', map{'escape': true()}) returns 
(with whitespace added for legibility):

&amp;lt;map xmlns="http://www.w3.org/2005/xpath-functions"&amp;gt;
  &amp;lt;string escaped="true" key="x"&amp;gt;\\&amp;lt;/string&amp;gt;
  &amp;lt;string key="y"&amp;gt;%&amp;lt;/string&amp;gt;
&amp;lt;/map&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But the test we actually generate expects the result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;map xmlns="http://www.w3.org/2005/xpath-functions"&amp;gt;
    &amp;lt;string escaped="true" key="x" escaped-key="false"&amp;gt;\\&amp;lt;/string&amp;gt;
    &amp;lt;string key="y" escaped="false" escaped-key="false"&amp;gt;%&amp;lt;/string&amp;gt;
&amp;lt;/map&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the test is failing because the result produced by Saxon correctly excludes the &lt;code&gt;escaped-key="false"&lt;/code&gt; attributes which the test is expecting. How did the attributes get there?&lt;/p&gt;
&lt;p&gt;The answer is that the stylesheet is doing &lt;code&gt;parse-xml()&lt;/code&gt; followed by some transformation to normalise whitespace, followed by &lt;code&gt;serialize()&lt;/code&gt;. The &lt;code&gt;parse-xml()&lt;/code&gt; call is invoking schema validation, which adds default attributes.&lt;/p&gt;
&lt;p&gt;We probably don't want schema validation here; if we do want it, we probably don't want default attribute values to be expanded. But parse-xml() doesn't give us the choice. It says it's implementation-defined and it gives no options for the user to control it. Saxon provides configuration-level options but they aren't fine-grained enough to use here.&lt;/p&gt;
&lt;p&gt;Without being able to control this, the only option seems to be for the stylesheet to transform the result to take out the defaulted attributes that the schema processor has added.&lt;/p&gt;
&lt;p&gt;We need options on functions like &lt;code&gt;doc()&lt;/code&gt; and &lt;code&gt;parse-xml()&lt;/code&gt; to control whether and how schema validation is performed.&lt;/p&gt;
&lt;p&gt;One of the options we need whenever we do validation is probably "validate+strip" - validate the input, report errors if it's invalid, but return the untyped data that was supplied to the validator, not the type-annotated data with expanded defaults.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
