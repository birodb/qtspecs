<item>
   <title>Issue #367 created</title>
   <pubDate>2023-02-21T00:06:18Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/367</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-367</guid>
   <description>&lt;div&gt;&lt;p&gt;Focus for RHS of thin arrow expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We define &lt;code&gt;A -&amp;gt; F(B, C)&lt;/code&gt; as being equivalent to &lt;code&gt;A ! F(., B, C)&lt;/code&gt; which means that B and C are evaluated with a focus based on the current item in A, not with the outer focus. This is different from the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator. For example if the $E is an element E, with several children called F, then&lt;/p&gt;
&lt;p&gt;&lt;code&gt;namespace-uri(.) -&amp;gt; fn:QName(name())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;has a different effect from&lt;/p&gt;
&lt;p&gt;&lt;code&gt;namespace-uri(.) =&amp;gt; fn:QName(name())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;whereas it might reasonably be expected that in the case where the LHS produces a single value, the two operators are equivalent. We can't change the meaning of &lt;code&gt;=&amp;gt;&lt;/code&gt; because it's defined in 3.1. So should we change the meaning of &lt;code&gt;-&amp;gt;&lt;/code&gt; to fall into line?&lt;/p&gt;
&lt;p&gt;We could do this easily enough by defining &lt;code&gt;A -&amp;gt; F(B, C)&lt;/code&gt; as equivalent to &lt;code&gt;for $a in A return F($a, B, C)&lt;/code&gt;.  I think that as well as being more consistent with &lt;code&gt;=&amp;gt;&lt;/code&gt;, the result is probably more intuitive. (We could also define it as equivalent to &lt;code&gt;let $f := F(?, B, C) return A ! $f(.)&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;For the expression &lt;code&gt;A -&amp;gt; {B}&lt;/code&gt;, and for the proposed &lt;code&gt;A =&amp;gt; {B}&lt;/code&gt;, I don't think we have any choice other than evaluating B with an inner focus based on A. But at least we can do it consistently for both operators.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
