<item>
   <title>Issue #19 created</title>
   <pubDate>2020-12-14T18:04:22Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/19</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-19</guid>
   <description>&lt;div&gt;&lt;p&gt;[xslt] annotation-prefixes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;By analogy with Schema  annotations, i'd like to see an annotation-prefixes attribute on xsl:stylesheet/transform containing a space-separated list of NCName namespace prefixes that are associated with annotations; the XSLT processor would discard these elements (including children) during compilation. Here's a rough go at some text.&lt;/p&gt;
&lt;p&gt;The purpose is to be able to include annotations at any level where elements are allowed - for example, inside an xl:variable  or template or function body. Annotations might include XTest unit tests, Schmatron rules, human-readable documentation, CSS styles, or more, and could be used by other operations than the XSLT transformation: for  example, by processing the XSLT source itself with XSLT.&lt;/p&gt;
&lt;p&gt;It should be possible for the same element to be both an extension element and an annotation, but the behaviour is implementation-dependent in this case (for example, an API might allow an extension to access content or convert the annotation elements to something else on compilation).&lt;/p&gt;
&lt;p&gt;XSLT instructions occurring inside annotation elements are ignored along with other content, except for xsl:fallback instructions (and their contents) if the prefix was also declared as an extension prefix and no matching extension was found. Similarly, extension attributes are discarded. The fallback behaviour might be used to support an XSLT-based implementation, for example by reading the XSLT source and processing embedded Schematron tests.&lt;/p&gt;
&lt;p&gt;Attributes of annotation elements are not considered to be attribute value templates and content is not considered to be text value templates - that is, { and } are not special. However, an annotation element or attribute backed by an extension could perform such processing if an implementation supported it.  The behaviour of shadow annotation attributes and xsl:use-when is implementation defined, but expressions contained in them must be processed as elsewhere.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
