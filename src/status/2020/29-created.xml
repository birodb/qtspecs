<item>
   <title>Issue #29 created</title>
   <pubDate>2020-12-18T11:51:17Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/29</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-29</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] map:values, array:values, map:entries&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; Revised and aligned with the recently added and proposed map and array functions (#314, #357):&lt;/p&gt;
&lt;p&gt;The suggested functions are based on the observations that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;users who prefer readable function names tend to reject &lt;code&gt;?*&lt;/code&gt; as handy shortcut;&lt;/li&gt;
&lt;li&gt;functions are often more flexible and better composable than FLWOR enhancements (but of course both could be added).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;map:values&lt;/h2&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Returns all values of a map as a sequence. Complementary to &lt;code&gt;map:keys&lt;/code&gt;, and equivalent to &lt;code&gt;$map?*&lt;/code&gt;, but better composable and easier to read (especially for newcomers), and known from other programming languages.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:values($map as map(*)) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: Query :)
let $map := map { 'a': (), 'b': 2, 'c': [ 3, 4 ] }
return map:values($map)

(: Result :)
2
[ 3, 4 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;array:values&lt;/h2&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Returns all members of an array as a sequence. Equivalent to &lt;code&gt;$array?*&lt;/code&gt;, but better composable and easier to read (especially for newcomers), and known from other programming languages.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;array:values($array as array(*)) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: Query :)
let $array := [ (), 2, [ 3, 4 ] ]
return array:values($array)

(: Result :)
2
[ 3, 4 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;map:entries&lt;/h2&gt;
&lt;p&gt;See #357 on composing and decomposing &lt;em&gt;Key-Value Records&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Returns each entry of a map as a singleton map. Equivalent to &lt;code&gt;map:for-each($map, map:entry#2)&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:entries($map as map(*)) as map(*)*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: Query :)
let $map := map { 'a': (), 'b': 2, 'c': [ 3, 4 ] }
for $entry in map:entries($map)
return element { map:keys($entry) } { string-join(map:values($entry)) }

(: Result :)
&amp;lt;a/&amp;gt;
&amp;lt;b&amp;gt;2&amp;lt;/b&amp;gt;
&amp;lt;c&amp;gt;34&amp;lt;/c&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;array:members&lt;/h2&gt;
&lt;p&gt;See #314.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
