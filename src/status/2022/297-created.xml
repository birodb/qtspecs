<item>
   <title>Issue #297 created</title>
   <pubDate>2022-12-28T23:51:51Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/297</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-297</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookup in deeply nested JSON, an abbreviated syntax for map:find&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XML, you can select all X nodes with an abbreviated syntax //X&lt;/p&gt;
&lt;p&gt;There is no abbreviated syntax for JSON&lt;/p&gt;
&lt;p&gt;I propose to add a ?? syntax. Like / is doubled for //, it doubles the ? lookup operator.&lt;/p&gt;
&lt;p&gt;The syntax is basically the same as for ?:&lt;/p&gt;
&lt;p&gt;[200]  UnaryLookupRecursion  ::=  "??"  KeySpecifier
[143]  LookupRecursion ::=  "??"  KeySpecifier
[144]  KeySpecifier |::=  NCName  |  IntegerLiteral  |  StringLiteral  |  VarRef  |  ParenthesizedExpr  |  "*"&lt;/p&gt;
&lt;p&gt;For the semantic it can call map:find, except for * and varref:&lt;/p&gt;
&lt;p&gt;Unary variant:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;??"string"    becomes map:find(. , "string")
??NCName      becomes map:find( ., "NCName")
??123         becomes map:find(., 123)

??*           Recursively every member/value of every array/map underneath .
              E.g. for `[{"a": {"x": 123}}, 456]`: `{"a": {"x": 123}}, {"x": 123}, 123, 456`

??$varref     calls ?$varref on every nested array/map.
              Like (.,??*)?$varref   (except for type errors)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Postfix variant:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;E??S&lt;/code&gt;   would be &lt;code&gt;E!??S&lt;/code&gt; if it is atomic, or &lt;code&gt;let $s := data(S) return E!??$s&lt;/code&gt; if S is parenthesized&lt;/p&gt;
&lt;p&gt;This probably conflicts with #171&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
