<item>
   <title>Issue #158 created</title>
   <pubDate>2022-09-27T17:22:36Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/158</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-158</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal to support optional parameters on dynamic functions.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal extends #155 to dynamic functions.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Within XPath there isn't a defined mechanism for declaring static functions. It can be such that declaring a function outside of the XPath expression is more cumbersome (such as defining it within XSLT) and makes the resulting expression less portable between XSLT and XQuery.&lt;/p&gt;
&lt;p&gt;There are 2 cases where this applies:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Defining inline functions -- These should work like declaring default values for static functions, with the rules for applying default values working at the dynamic call site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Specifying named function references for functions with additional default arguments, such as &lt;code&gt;fn:tokenize#2("lorem ipsum")&lt;/code&gt; where the &lt;code&gt;fn:tokenize#2&lt;/code&gt; binds the &lt;code&gt;$flags&lt;/code&gt; default value and the dynamic call applies the default value for &lt;code&gt;$pattern&lt;/code&gt;. -- This is possible to define as creating an inline function such that any default parameters are preserved along with the parameter types at the corresponding parameter index.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;p&gt;For FunctionTest (i.e. function types), I'm not sure of a use case where extending optional parameters to that would be useful, as any higher-order function would always call the input function with the correct number of arguments. If this is useful, then that should be moved to a separate proposal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
