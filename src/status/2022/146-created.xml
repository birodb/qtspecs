<item>
   <title>Issue #146 created</title>
   <pubDate>2022-09-18T18:57:37Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/146</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-146</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:apply with last two arguments (array, map) for the positional and keyword args in a func-call&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The existing &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-apply"&gt;&lt;strong&gt;&lt;em&gt;fn:apply() in XPath 3.1&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; "Makes a dynamic call on a function with an argument list supplied in the form of an array."&lt;/p&gt;
&lt;p&gt;However in XPath 4.0 &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-function-calls"&gt;a function may have both (required) positional and variadic arguments, expressed as  keyword arguments if the function is map-variadic&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;. Thus there are cases when it is impossible to provide the arguments of the function just within an array.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For such cases, we need a new overload&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:apply($function as function(*), $array as array(*), $map as map(*)) as item()*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The result&lt;/strong&gt; of the function is obtained by creating and invoking the same dynamic call that would be the result of  a  function-call to &lt;code&gt;$function&lt;/code&gt; with positional arguments taken from the (ordered) members of the supplied array &lt;code&gt;$array&lt;/code&gt; and keyword arguments taken from the (unordered) entries (KVPs - keyword-value pairs) of  &lt;code&gt;$map&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The effect of calling&lt;/strong&gt; &lt;code&gt;fn:apply($f, [$a, $b, $c, ...], map{"k1" : v1, "k2" : v2, ...})&lt;/code&gt; is the same as the effect of the dynamic function call resulting from &lt;code&gt;$function($a, $b, $c, ...., $k1 = v1, $k2 = v2, ...)&lt;/code&gt;. The function conversion rules are applied to the supplied arguments in the usual way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The new overload of &lt;code&gt;fn:apply()&lt;/code&gt; is needed &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-function-calls"&gt;if we have in XPath 4.0 function calls with both positional and keyword arguments&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;. In other words, this proposal supposes (depends on) the existence of this new XPath feature&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some newly proposed features, such as &lt;strong&gt;&lt;em&gt;&lt;a href="https://github.com/qt4cg/qtspecs/issues/106"&gt;Function Decorators&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, depend on the existence of this new overload of &lt;code&gt;fn:apply()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;The expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $data := &amp;lt;a b="3"/&amp;gt;
 return
    fn:apply(fn:serialize#2, [$data], map{"method":"xml", "omit-xml-declaration":true()})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;returns:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;'&amp;lt;a b="3"/&amp;gt;'&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
