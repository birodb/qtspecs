<item>
   <title>Issue #239 created</title>
   <pubDate>2022-11-13T11:50:39Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/239</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-239</guid>
   <description>&lt;div&gt;&lt;p&gt;Terminology concerning function items and their access to static and dynamic context&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See this StackOverflow question: https://stackoverflow.com/questions/74408887&lt;/p&gt;
&lt;p&gt;The language describing how the static and dynamic context are bound in function items delivered by expressions such as &lt;code&gt;xs:QName#1&lt;/code&gt; or &lt;code&gt;xs:QName(?)&lt;/code&gt; is pretty impenetrable, and I don't think it is very accurate. For example, for the latter case, the relevant rule asks "If [the implementation of F] is not an XPath 3.1 expression..." which seems to suggest that the behaviour varies depending on whether the implementation of &lt;code&gt;xs:QName()&lt;/code&gt; is written in XPath or in some other language, which cannot be right.&lt;/p&gt;
&lt;p&gt;For named function references, the spec talks of " if the function is context dependent, then the returned function is associated with the static context of the named function reference and the dynamic context in which it is evaluated. " but what exactly does it mean for the function to be context dependent?&lt;/p&gt;
&lt;p&gt;The behaviour of partial function application is said to depend on whether "F's implementation is already associated with contexts", and if F was the result of a named function reference, then this seems to depend on whether the [static] function that's the target of the reference is context dependent, but how is that determined?&lt;/p&gt;
&lt;p&gt;This issue is raised essentially to take note that there's a lot of flakiness in the specification in this area. It's not obvious what the solution is, but there is surely scope for making things much clearer than they are currently.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
