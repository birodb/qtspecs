<item>
   <title>Issue #154 created</title>
   <pubDate>2022-09-27T08:16:13Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/154</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-154</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespaces for Functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current F+O function library is divided into four namespaces: fn, map, array, and math.&lt;/p&gt;
&lt;p&gt;The use of separate namespaces serves little purpose, because they are all controlled by the same naming authority.&lt;/p&gt;
&lt;p&gt;But it has some significant disadvantages:&lt;/p&gt;
&lt;p&gt;(a) The proliferation of namespace declarations and namespace prefixes in user programs causes visual clutter.&lt;/p&gt;
&lt;p&gt;(b) Putting additional namespaces into the static context causes semantic clutter: such namespaces become available for unwanted purposes, such as casting strings to QNames, which also means that the namespace bindings need to be retained at run time, which bloats compiled code.&lt;/p&gt;
&lt;p&gt;(c) It's not always obvious, either to the specification developers or to users, what namespace a new function belongs in.&lt;/p&gt;
&lt;p&gt;I've attempted various ways of solving this problem, such as having a "namespace search list" used to resolve unprefixed function names, in place of a single default namespace. This idea falls down because we already have duplication across the current namespaces, for example fn:remove and map:remove.&lt;/p&gt;
&lt;p&gt;Polymorphism (deciding which function to call based on the type of the first argument) also seems unpromising as a way forward; our type system is not classically object-oriented.&lt;/p&gt;
&lt;p&gt;I propose instead that all functions in F+O should have an alias/synonym in the fn namespace:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map:remove()&lt;/code&gt; becomes available as &lt;code&gt;m.remove()&lt;/code&gt;, etc&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array:size()&lt;/code&gt; becomes available as &lt;code&gt;a.size()&lt;/code&gt;, etc&lt;/li&gt;
&lt;li&gt;&lt;code&gt;math:tan()&lt;/code&gt; becomes available as &lt;code&gt;tan()&lt;/code&gt; etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also propose removing the rule that user-declared functions have to be in a namespace. Instead, a function declared with no prefix (at least in XSLT, not sure exactly how this works in XQuery) should be in no namespace; and the binding rule for unprefixed names in function calls is to search first for no-namespace names, then for names in the default (usually fn) namespace. Of course this creates a risk of binding to the "wrong" function, but users can defend against this in a number of ways: they can avoid use of the feature, they can use the fn: prefix for disambiguation when necessary, they can adopt a naming convention like calling their own functions my.sum(). We should treat users as adults, able to make their own decisions on such matters.&lt;/p&gt;
&lt;p&gt;We will still encourage third-party developers of function libraries to put their functions in their own namespace, and of course this applies to EXPath modules such as file and binary.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
