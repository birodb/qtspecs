<item>
   <title>Issue #155 created</title>
   <pubDate>2022-09-27T16:36:31Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/155</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-155</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal to support optional parameter values on static functions.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal allows users to define optional parameters for a function. When calling the function statically (e.g. &lt;code&gt;f(1,2,3)&lt;/code&gt;), or creating a named function reference to it (e.g. &lt;code&gt;f#3&lt;/code&gt;), any optional parameters that are not specified take the default values.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Defining functions that can take one or more optional argument (such as in the Functions and Operators specification) adds a lot of boilerplate code. For example, `fn:tokenize could be written as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare function fn:tokenize($value as xs:string?) as xs:string* {
   fn:tokenize($value, "\s+")
};

declare function fn:tokenize($value as xs:string?, $pattern as xs:string) as xs:string* {
   fn:tokenize($value, $pattern, "")
};

declare function fn:tokenize($value as xs:string?, $pattern as xs:string, $flags as xs:string) as xs:string* {
   ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this proposal, the above can be written more simply and concisely as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare function fn:tokenize(
   $value as xs:string?,
   $pattern as xs:string := "\s+",
   $flags as xs:string := ""
) as xs:string* {
   ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of these definitions of &lt;code&gt;fn:tokenize&lt;/code&gt; are equivalent.&lt;/p&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;p&gt;Once this proposal has been accepted, we should go through the XSLT and XQFO specifications and use defaults for all the relevant functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
