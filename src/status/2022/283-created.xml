<item>
   <title>Issue #283 created</title>
   <pubDate>2022-12-05T11:23:06Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/283</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-283</guid>
   <description>&lt;div&gt;&lt;p&gt;Enumeration types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The draft specification includes a proposal to provide enumeration types. The proposal is incomplete, for example it does not include all the rules for conversions and casting. This issue is raised in order to outline where we are, what needs to be done, and to elicit consensus on whether we want to proceed with this.&lt;/p&gt;
&lt;p&gt;What's the motivation? Primarily, making function signatures more expressive.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q0: do we really need this?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The essence of the proposal is an ItemType that matches an enumerated set of xs:string values:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[131] | EnumerationType | ::= | "enum" "("  StringLiteral (","  StringLiteral)* ")"  &lt;/code&gt;
For example, the type enum("red", "green", "blue") matches the string "green".&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q1: why restrict it to strings? I think my main reason was that the syntax gets complicated if we try to do it for data types that have no literal representation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Subtyping is based on the value space. An enumeration type E is a subtype of another enumeration type F if the set of strings in E is a subset of those in F. All enumeration types are subtypes of xs:string.&lt;/p&gt;
&lt;p&gt;Strings are not "labelled" as belonging to an enumeration type, matching is purely based on the value ("datum"). This doesn't provide very strong typing. If "violet" and "pink" are allowed by both the enumeration types &lt;code&gt;colour&lt;/code&gt; and &lt;code&gt;flower&lt;/code&gt;, then it's not intrinsically an error to use a variable of type &lt;code&gt;flower&lt;/code&gt; where a &lt;code&gt;colour&lt;/code&gt; is expected. Equally, a variable of type &lt;code&gt;xs:string&lt;/code&gt; can be used where a &lt;code&gt;colour&lt;/code&gt; is expected.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q2: should enumerations be more strongly typed?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I would expect that an enumeration type can be used as the target of "cast" or "castable", but this is not currently in the spec.&lt;/p&gt;
&lt;p&gt;The coercion rules as currently written say that if the expected type is an enumeration type, then the rules are largely the same as for any other subtype of &lt;code&gt;xs:string&lt;/code&gt;:  casting from &lt;code&gt;xs:untypedAtomic&lt;/code&gt; applies, promotion from &lt;code&gt;xs:anyURI&lt;/code&gt; does not apply, 1.0 compatibility mode rules do not apply.&lt;/p&gt;
&lt;p&gt;Operators and functions on enumeration types are the same as for &lt;code&gt;xs:string&lt;/code&gt;. This means, for example, that there are no special rules for comparison: values are ordered as strings and are compared using the default collation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
