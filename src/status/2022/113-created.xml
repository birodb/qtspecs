<item>
   <title>Issue #113 created</title>
   <pubDate>2022-05-04T07:53:23Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/113</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-113</guid>
   <description>&lt;div&gt;&lt;p&gt;[xslt] Constructing arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've felt for a while that the current proposal for xsl:array is messy. It's both semantically and syntactically messy with it's &lt;code&gt;composite=yes|no&lt;/code&gt; attribute and the &lt;code&gt;xsl:array-member&lt;/code&gt; child. I've been using it doing XML to JSON conversion and you get a lot of stuff like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="closed_auctions"&amp;gt;
      &amp;lt;xsl:array&amp;gt;
         &amp;lt;xsl:for-each select="closed_auction"&amp;gt;
            &amp;lt;xsl:map&amp;gt;
               &amp;lt;xsl:apply-templates select="*"/&amp;gt;
            &amp;lt;/xsl:map&amp;gt;
         &amp;lt;/xsl:for-each&amp;gt;
      &amp;lt;/xsl:array&amp;gt;
   &amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Almost invariably, xsl:array has xsl:for-each or xsl:apply-templates as a child. So how about allowing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="closed_auctions"&amp;gt;
         &amp;lt;xsl:for-each select="closed_auction" form="array"&amp;gt;
            &amp;lt;xsl:map&amp;gt;
               &amp;lt;xsl:apply-templates select="*"/&amp;gt;
            &amp;lt;/xsl:map&amp;gt;
         &amp;lt;/xsl:for-each&amp;gt;
   &amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The semantics here is that xsl:for-each delivers an array in which there is one member for each item in the input sequence. This cleanly eliminates the need for &lt;code&gt;composite=yes|no&lt;/code&gt; and &lt;code&gt;xsl:array-member&lt;/code&gt;: you can create a "composite" array using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:for-each select="1 to 5" form="array"&amp;gt;
   &amp;lt;xsl:sequence select="., .+1"/&amp;gt;
&amp;lt;/xsl:for-each&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which delivers &lt;code&gt;[(1,2), (2,3), (3,4), (4,5), (5,6)]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The attribute &lt;code&gt;form="array"&lt;/code&gt; can also appear on &lt;code&gt;xsl:apply-templates&lt;/code&gt; and &lt;code&gt;xsl:for-each-group&lt;/code&gt;. In the latter case each group produces one member of the resulting array:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:for-each-group select="0 to 9" group-adjacent="0 idiv 5" form="array"&amp;gt;
   &amp;lt;xsl:sequence select="current-group()"/&amp;gt;
&amp;lt;/xsl:for-each-group&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;delivers &lt;code&gt;[(0,1,2,3,4), (5,6,7,8,9)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The attribute &lt;code&gt;form="sequence"&lt;/code&gt; is the default and specifies the current behaviour.&lt;/p&gt;
&lt;p&gt;I've been wondering also about extending this to &lt;code&gt;form="map"&lt;/code&gt;. In most cases when you construct a map from an input sequence, both the key and the value are functions of the input item. So instead of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="regions"&amp;gt;
      &amp;lt;xsl:map&amp;gt;
         &amp;lt;xsl:for-each select="*"&amp;gt;
            &amp;lt;xsl:map-entry key="name()"&amp;gt;
               &amp;lt;xsl:array&amp;gt;
                  &amp;lt;xsl:for-each select="item"&amp;gt;
                     &amp;lt;xsl:array-member&amp;gt;
                        &amp;lt;xsl:apply-templates select="."/&amp;gt;
                     &amp;lt;/xsl:array-member&amp;gt;
                  &amp;lt;/xsl:for-each&amp;gt;
               &amp;lt;/xsl:array&amp;gt;
            &amp;lt;/xsl:map-entry&amp;gt;
         &amp;lt;/xsl:for-each&amp;gt;
      &amp;lt;/xsl:map&amp;gt;
   &amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we could write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="regions"&amp;gt;
         &amp;lt;xsl:for-each select="*" form="map" key="name()"&amp;gt;
                  &amp;lt;xsl:apply-templates select="item" form="array"/&amp;gt;
         &amp;lt;/xsl:for-each&amp;gt;
 &amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which strikes me as an improvement...&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
