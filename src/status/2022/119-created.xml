<item>
   <title>Issue #119 created</title>
   <pubDate>2022-07-16T22:25:38Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/119</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-119</guid>
   <description>&lt;div&gt;&lt;p&gt;Allow a map's key value to be any sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Since being introduced in XSLT 3.0 and later in XPath 3.1 the &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.w3.org/TR/xpath-functions-31/#maps-and-arrays"&gt;map&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; datatype has become a powerful and expressive tool for programming in XPath.&lt;/p&gt;
&lt;p&gt;At present the value of a key of a map can be &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.w3.org/TR/xpath-functions-31/#maps-and-arrays"&gt;"an arbitrary atomic value"&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, thus a sequence of zero or more than one atomic items cannot be used in a map-key specification.&lt;/p&gt;
&lt;p&gt;Besides giving us an almost &lt;code&gt;1 : 1&lt;/code&gt; correspondence to a &lt;code&gt;JSON&lt;/code&gt; object (when used with arrays, which themselves can be thought of as maps) maps are useful for expressing the tabular representation of a function that has one argument of type  &lt;code&gt;xs:anyAtomicType&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is not possible using a map to naturally express the tabular representation of a function having two or more (or 0) arguments. While something like this can be done using nested maps as in the example below, this technique is cumbersome and error-prone even when having two arguments, and almost prohibitively difficult when applied to expressing functions with more than 2 arguments.&lt;/p&gt;
&lt;p&gt;Here is how we could express one possible tabular form of the function &lt;code&gt;M**N&lt;/code&gt; (&lt;code&gt;M&lt;/code&gt; to the power of &lt;code&gt;N&lt;/code&gt;), where the two arguments are of type &lt;code&gt;xs:positiveInteger&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $m1 := map {1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5, 6 : 6, 7 : 7, 8 :  8, 9 : 9, 10 :10},
    $m2 := map {1 : 1, 2 : 4, 3 : 9, 4 : 16, 5 : 25, 6 : 36, 7 : 49, 8 : 64, 9 : 81, 10 :100},
    $m3 := map {1 : 1, 2 : 8, 3 : 27, 4 : 64, 5 : 125, 6 : 216, 7 : 343, 8 : 512, 9 : 729, 10 :1000},
    (:  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . :)  
  
    $M := map{ 1: $m1,  2: $m2,  3: $m3 (: ... :)  }
  return $M(3)(4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here evaluating &lt;code&gt;$M(3)(4)&lt;/code&gt; produces the value &lt;code&gt;4**3&lt;/code&gt; (&lt;code&gt;4&lt;/code&gt; to the power of &lt;code&gt;3&lt;/code&gt;), that is:
&lt;code&gt;64&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;This proposal is to expand the allowed value-space for a key of a map to any sequence.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thus one will be able to write:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $M := map{ (2, 2) : 4, (3, 2) : 9, (: . . . :)
               (2, 3) : 8, (3, 3) : 27 (: . . . :)
}
 return
    $M((2, 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And evaluating this returns the correct result &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Possible implementation&lt;/strong&gt;:
The implementation is very straightforward: just use in &lt;strong&gt;&lt;em&gt;&lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-same-key"&gt;op:same-key&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; as comparison function an improvement of &lt;strong&gt;&lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-deep-equal"&gt;&lt;code&gt;fn:deep-equal()&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;, which has similar behavior, but never throws errors, is context-free, error-free and transitive. Due to lack of fantasy I called this function &lt;strong&gt;&lt;code&gt;deep-equal-safe()&lt;/code&gt;&lt;/strong&gt; and its description is &lt;strong&gt;&lt;a href="https://github.com/dnovatchev/FXSL-XSLT2/blob/master/fn-deep-equal-safe.pdf"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:
No new datatypes and no changes to the XDM are necessary in order to implement this proposal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
