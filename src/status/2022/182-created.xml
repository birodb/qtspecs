<item>
   <title>Issue #182 created</title>
   <pubDate>2022-10-06T11:13:07Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/182</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-182</guid>
   <description>&lt;div&gt;&lt;p&gt;Should we allow vendor-defined optional parameters on built-in functions?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Now that we allow optional parameters on functions, with invocation by keyword, we could permit vendors to extend the function signature with optional parameters in a vendor-defined namespace. It would be required (obviously) that such parameters are optional.&lt;/p&gt;
&lt;p&gt;A caveat is that under the current specification, (a) we can't stop the value of such a parameter being supplied positionally (perhaps unintentionally), and (b) the availability of such a parameter changes the arity range of the function, which potentially brings it into conflict with other like-named functions (for example functions introduced in the future).&lt;/p&gt;
&lt;p&gt;A possible way of resolving this conflict is to propose that parameters whose name is namespaced can ONLY be supplied by keyword, and don't contribute to the arity range of the function. However, for user-defined functions, this rule would not be backwards compatible.&lt;/p&gt;
&lt;p&gt;And a possible way around that is to say that the extensibility policy for a function is a property of its namespace; and to adopt different extensibility policies for built-in function namespaces and user-defined function namespaces.&lt;/p&gt;
&lt;p&gt;Perhaps this is over-elaborate, and we should just make sure that functions that vendors might wish to extend have an options parameter, even if no standardised options are defined.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
