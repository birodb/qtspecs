<item>
   <title>Issue #124 created</title>
   <pubDate>2022-08-10T19:16:07Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/124</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-124</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] [XQuery] Incorrect subtype-itemtype rules for pure and local union types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Looking at https://github.com/qt4cg/qtspecs/issues/122, I've identified a possible gap in the logic for pure union types and &lt;code&gt;LocalUnionTypes&lt;/code&gt;. Specifically, the rules are defined for when &lt;code&gt;A&lt;/code&gt; is one of these union types but not when &lt;code&gt;B&lt;/code&gt; is one of these union types.&lt;/p&gt;
&lt;p&gt;That is, under the current 4.0 draft rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;subtype-itemtype(union(xs:string, xs:integer), xs:string)&lt;/code&gt; is defined and will return false (&lt;code&gt;xs:integer&lt;/code&gt; is not a subtype of &lt;code&gt;xs:string&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subtype-itemtype(xs:string, union(xs:string, xs:integer))&lt;/code&gt; is not defined and will return false even though the union type supports &lt;code&gt;xs:string&lt;/code&gt; as one of its member types.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that in the earlier standard versions, the pure union type case is handled by &lt;code&gt;derives-from(AT, ET)&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ET&lt;/code&gt; is a pure union type of which &lt;code&gt;AT&lt;/code&gt; is a member type&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With &lt;code&gt;derives-from(AT, ET)&lt;/code&gt; only being applied in the case when both are atomic types&lt;/p&gt;
&lt;h2&gt;Draft Wording&lt;/h2&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;em&gt;Conditions for atomic and union types:&lt;/em&gt;
a. &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are &lt;code&gt;AtomicOrUnionType&lt;/code&gt;s, and &lt;code&gt;derives-from(A, B)&lt;/code&gt; returns true.
b. &lt;code&gt;A&lt;/code&gt; is a &lt;code&gt;LocalUnionType&lt;/code&gt; in the form &lt;code&gt;union(T1, T2, ...)&lt;/code&gt; and every type &lt;code&gt;T&lt;/code&gt; in (&lt;code&gt;T1&lt;/code&gt;, &lt;code&gt;T2&lt;/code&gt;, ...) satisfies &lt;code&gt;subtype-itemType(T, B)&lt;/code&gt;.
c. &lt;code&gt;B&lt;/code&gt; is a &lt;code&gt;LocalUnionType&lt;/code&gt; in the form &lt;code&gt;union(T1, T2, ...)&lt;/code&gt; and any type &lt;code&gt;T&lt;/code&gt; in (&lt;code&gt;T1&lt;/code&gt;, &lt;code&gt;T2&lt;/code&gt;, ...) satisfies &lt;code&gt;subtype-itemType(A, T)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Design Note: There is no need for a rule when &lt;code&gt;A&lt;/code&gt; is a pure union type as that is covered by the "There is a type MT such that derives-from( AT, MT ) and derives-from( MT, ET )" rule for &lt;code&gt;derives-from&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
