<item>
   <title>Issue #278 created</title>
   <pubDate>2022-11-29T17:16:53Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/278</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-278</guid>
   <description>&lt;div&gt;&lt;p&gt;array bound checking&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Similar functions on arrays and sequences have different behaviour as regards bound checking. For example, fn:head() returns an empty sequence if the input is empty, while array:head() throws an error.&lt;/p&gt;
&lt;p&gt;Sometimes we want the error, sometimes we don't, but this should be orthogonal to whether we are using sequences or arrays.&lt;/p&gt;
&lt;p&gt;Is there a way we can adapt the sequence functions to throw an error, or adapt the array functions so they don't?&lt;/p&gt;
&lt;p&gt;Various ideas have been put forward, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add extra optional parameters to functions to select the behaviour&lt;/li&gt;
&lt;li&gt;mirror the relevant functions (e.g. into a different namespace) to create an alternative version with different behaviour&lt;/li&gt;
&lt;li&gt;add options to the static context (array-bound-checking=yes|no, sequence-bound-checking=yes|no) to switch the behaviour (with appropriate mechanisms in XQuery and XSLT -- and perhaps XPath -- to set these options)&lt;/li&gt;
&lt;li&gt;do nothing, let users solve the problem for themselves by writing user-defined functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note 1: the difference in behaviour affects operators as well as functions: contrast &lt;code&gt;$seq[0]&lt;/code&gt; (which returns ()) with &lt;code&gt;$array(0)&lt;/code&gt; (throws error). Making &lt;code&gt;$seq[0]&lt;/code&gt; throw an error would mean we have to define it in a different way, since the formulation &lt;code&gt;$seq[position()=$N]&lt;/code&gt; is intrinsically error-free.&lt;/p&gt;
&lt;p&gt;Note 2: if &lt;code&gt;$array(0)&lt;/code&gt; doesn't throw an error, it's not immediately obvious what it should do. Returning an empty sequence isn't ideal because the empty sequence is a valid entry in an array. For maps we have the same problem, which is why we have two functions &lt;code&gt;map:get()&lt;/code&gt; and &lt;code&gt;map:contains()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
