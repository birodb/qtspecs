<item>
   <title>Issue #161 created</title>
   <pubDate>2022-09-27T19:00:27Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/161</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-161</guid>
   <description>&lt;div&gt;&lt;p&gt;Support unbounded variadic functions on sequence parameters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Where a parameter is defined as a 0-or-more sequence (&lt;code&gt;T*&lt;/code&gt;) or a 1-or-more sequence (&lt;code&gt;T+&lt;/code&gt;) and that parameter is indicated as behaving variadically, then positional (non-keyword) arguments from that parameter onward are bound to that sequence.&lt;/p&gt;
&lt;h1&gt;Motivation&lt;/h1&gt;
&lt;p&gt;The XQFO specification supports the &lt;code&gt;fn:concat&lt;/code&gt; function which takes 2 or more arguments. The "or more" part is defined as "..." with a short sentence stating that this is the only function that supports two or more arguments. As such, the behaviour of this function is loosely defined.&lt;/p&gt;
&lt;p&gt;Other implementors and specifications (BaseX, EXQuery RESTXQ, MarkLogic) make use of these variadic sequence types in several functions.&lt;/p&gt;
&lt;p&gt;In all of these cases (and for user-defined variadic sequence parameters) the semantics of the functions should be well defined.&lt;/p&gt;
&lt;h1&gt;Note&lt;/h1&gt;
&lt;p&gt;In the case where the 0-or-more sequence is the last parameter (or the parameter receiving the unbounded argument values), that parameter would be an optional value as if it was defined as &lt;code&gt;$param as T* := ()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One possibility with the interaction with named arguments is to allow that to break up two sequence parameters that behave variadically. For example, given &lt;code&gt;f($a as xs:int*, $b as xs:string, $c as xs:int*)&lt;/code&gt; it may be possible to call it like &lt;code&gt;f(1, 2, 3, b: "4", 5, 6, 7)&lt;/code&gt; which would be equivalent to &lt;code&gt;f((1, 2, 3), "4", (5, 6, 7))&lt;/code&gt; currently.&lt;/p&gt;
&lt;p&gt;This should be defined such that calling the function with the same number of arguments as the function has parameters then none of the parameters behave variadically. This has the intention of not breaking existing code.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
