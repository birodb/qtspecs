<item>
   <title>Issue #191 created</title>
   <pubDate>2022-10-08T16:57:07Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/191</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-191</guid>
   <description>&lt;div&gt;&lt;p&gt;Definition of "dynamic type"&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The term "dynamic type" is defined in ยง2.2.3.2 as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Definition: A dynamic type is associated with each value as it is computed. The dynamic type of a value may be more specific than the [static type] of the expression that computed it (for example, the static type of an expression might be xs:integer*, denoting a sequence of zero or more integers, but at evaluation time its value may have the dynamic type xs:integer, denoting exactly one integer.)]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, for a start, this is a pretty poor definition. It gives some properties of a dynamic type, but it doesn't say what it actually is: for example, what range of values it can take. Is it always a SequenceType that is expressible using the SequenceType grammar? We should be told.&lt;/p&gt;
&lt;p&gt;It's also wrong. When you construct a sequence using the &lt;code&gt;","&lt;/code&gt; operator, or a map using the &lt;code&gt;map:put()&lt;/code&gt; function, there's nothing in the specification of those operations that tells you what the dynamic type of the result is. For example, there's nothing in the specification that says what the dynamic type of the sequence &lt;code&gt;(23, &amp;lt;e/&amp;gt;)&lt;/code&gt; is.&lt;/p&gt;
&lt;p&gt;In ยง4.4.2.1 the error is compounded where it says "the converted argument value retains its most specific &lt;strong&gt;dynamic type&lt;/strong&gt;". At least this recognizes that a value actually conforms to more than one type. But it's wrong in suggesting that one of those types is necessarily the "most specific" (presumably meaning that it's a subtype of all the others). For example, the empty map (&lt;code&gt;map{}&lt;/code&gt;) belongs to every map type, but there is no map type that is a subtype of all other map types (unless we conjecture that the dynamic type may be one that is inexpressible using SequenceType syntax).&lt;/p&gt;
&lt;p&gt;With the introduction of record tests the map &lt;code&gt;map{"a":12, "b":14, 1:19}&lt;/code&gt; conforms both to &lt;code&gt;record(a as xs:integer, b as xs:integer, *)&lt;/code&gt; and to &lt;code&gt;map{xs:anyAtomicType, xs:integer}&lt;/code&gt;, neither of which is more specific than the other, and there is no type expressible using the SequenceType grammar that is a subtype of both of these. So the introduction of record tests increases the importance of getting rid of this error.&lt;/p&gt;
&lt;p&gt;It's not easy to fix issues like this, but it's important we should try, because errors in the description of the fundamentals can easily turn into bugs in the specification of concrete language constructs. We certainly need to fix it if we're going to add features like that proposed in issue #148, or to make changes to the type system to allow variadic dynamic function calls.&lt;/p&gt;
&lt;p&gt;See also https://github.com/w3c/qtspecs/issues/14&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
