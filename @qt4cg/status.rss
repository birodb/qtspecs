<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>@qt4cg</title><link>https://qt4cg.org/@qt4cg/</link><description>QT4 CG status feed.</description><language>en-us</language><pubDate>Mon, 13 Mar 2023 08:45:00 GMT</pubDate><lastBuildDate>Mon, 13 Mar 2023 09:47:56 GMT</lastBuildDate><managingEditor>ndw@nwalsh.com</managingEditor><webMaster>ndw@nwalsh.com</webMaster><item>
   <title>QT4 CG meeting 026 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 13 Mar 2023 08:45:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/03-14</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-03-14</guid>
</item><item>
   <title>Issue #386 closed</title>
   <pubDate>Mon, 13 Mar 2023 09:26:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/386</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-386</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-025-05 (markup typo)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #393 created</title>
   <pubDate>Sun, 12 Mar 2023 22:07:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/393</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-393</guid>
   <description>&lt;div&gt;&lt;p&gt;Clarify explanations of functions/function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR is purely editorial in the sense that it does not attempt to make any changes that would affect an implementation. It's intended to clear up ambiguity and lack of clarity in the description of operations on functions, in particular the way that a function item captures static and dynamic context. It addresses issues #239 and issue #392.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #392 created</title>
   <pubDate>Sun, 12 Mar 2023 18:56:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/392</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-392</guid>
   <description>&lt;div&gt;&lt;p&gt;Partial function application: Placeholders with keywords&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It's clear that the following is allowed:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format-date(current-date(), '[Y]-[M]-[D]', place:=?, language:=?, calendar:="AD")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The resulting function item takes two arguments (place and language) but in what order? Is it the order of parameters in the original function definition, or the order in which they appear in the partial function application?&lt;/p&gt;
&lt;p&gt;I think it should be the latter, but this needs to be made explicit in the spec.&lt;/p&gt;
&lt;p&gt;Note that this doesn't only apply to optional parameters as in the above example, it applies equally, for example to&lt;/p&gt;
&lt;p&gt;&lt;code&gt;starts-with(substring=?, value=?)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;While we're on the subject, we should also ask whether&lt;/p&gt;
&lt;p&gt;&lt;code&gt;concat(value83 := ?)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is legal, and if so, what it means.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #391 created</title>
   <pubDate>Sat, 11 Mar 2023 05:25:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/391</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-391</guid>
   <description>&lt;div&gt;&lt;p&gt;addressed typographical errors; adjusted Unicode character discussion…&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;… for internal local consistency, clarity&lt;/p&gt;
&lt;p&gt;This being my first PR, I opted to include beyond the typos I noted in #289 another small block of hopefully uncontroversial edits as a test balloon.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #390 created</title>
   <pubDate>Fri, 10 Mar 2023 17:59:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/390</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-390</guid>
   <description>&lt;div&gt;&lt;p&gt;Should parsing and building URIs attempt to special case Windows URIs for UNC names?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Depending on the platform and language APIs involved, we see &lt;code&gt;file:&lt;/code&gt; URIs encoded in a variety of different ways. It doesn't help that there's no official RFC for &lt;code&gt;file:&lt;/code&gt; URIs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file:/path/part&lt;/code&gt; is a &lt;code&gt;file:&lt;/code&gt; URI with no host and a path of &lt;code&gt;/path/part&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file:///path.part&lt;/code&gt; is a &lt;code&gt;file:&lt;/code&gt; URI with an explicitly empty host and a path of &lt;code&gt;/path/part&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file://path/part&lt;/code&gt; is a &lt;code&gt;file:&lt;/code&gt; URI with an authority of &lt;code&gt;path&lt;/code&gt; and a path of &lt;code&gt;/part&lt;/code&gt;. I think one common way to interpret this is as if it was &lt;code&gt;file:/part&lt;/code&gt;. That is, in &lt;code&gt;file:&lt;/code&gt; URIs, although a different host is possible, it's often just ignored.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c:\path\part&lt;/code&gt; is most usefully interpreted as &lt;code&gt;file:/c:/path/part&lt;/code&gt;, a &lt;code&gt;file:&lt;/code&gt; URI with no host and a path of &lt;code&gt;/c:/path/part&lt;/code&gt;. These are only going to be useful on a Windows system, so it isn't a problem to treat them the same way on all platforms. (Aside: I don't actually know if the path part should be &lt;code&gt;c:/path/part&lt;/code&gt; instead, but it's currently got the leading slash in &lt;code&gt;fn:parse-uri()&lt;/code&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then there's this: &lt;code&gt;file:////name/path/part&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One interpretation is, "look, we accept &lt;code&gt;file:/&lt;/code&gt; and &lt;code&gt;file:///&lt;/code&gt; so let's just accept &lt;code&gt;file://&lt;/code&gt; and &lt;code&gt;file://///////&lt;/code&gt;, etc. as the same." And I think that's generally right, with the single special exception of &lt;code&gt;file:////&lt;/code&gt;. The problem is that on Windows, this is a very common way to encode the URI for a UNC path, that is: &lt;code&gt;\\name\path\part&lt;/code&gt; which is a Windows UNC path for &lt;code&gt;\path\part&lt;/code&gt; on a host named &lt;code&gt;name&lt;/code&gt; (via whatever networking protocol backs UNC).&lt;/p&gt;
&lt;p&gt;You'd think that this should be &lt;code&gt;file://name/path/part&lt;/code&gt;, but I think because browsers and maybe other tools just discard the authority part of a &lt;code&gt;file:&lt;/code&gt; URI (or maybe because these are &lt;em&gt;paths&lt;/em&gt; in some Windows sense?), that's not how they're encoded.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aside: Yes, I'm sure you also see &lt;code&gt;file:\\\\name\path\part&lt;/code&gt; and &lt;code&gt;file:c:\path\part&lt;/code&gt; and other forms as well. Those are out of scope, they're simply, flatly, completely wrong. You can't use &lt;code&gt;\&lt;/code&gt; as a delimiter in a URI. RFC 3986 is authoritative on this point. Step one of dealing with random strings we think should be URIs is replacing all &lt;code&gt;\&lt;/code&gt; with &lt;code&gt;/&lt;/code&gt; because RFC 3986.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's problematic to deal with &lt;code&gt;file:////&lt;/code&gt; as a special case, but it's also problematic to leave out support for a common pattern on a widely deployed operating system.&lt;/p&gt;
&lt;p&gt;Recognizing four slashes after &lt;code&gt;file:&lt;/code&gt; and treating that specially isn't hard. The hard part is how do we encode this in the map that &lt;code&gt;fn:parse-uri&lt;/code&gt; produces bearing in mind that the result should round-trip if you push it back through &lt;code&gt;fn:build-uri&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Consider &lt;code&gt;file:////uncname/path/part&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Today, that is parsed as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map {
  "uri": "file:////uncname/path/part",
  "scheme": "file",
  "authority": "uncname",
  "host": "uncname",
  "path": "/path/to/file",
  "path-segments": array { "", "path", "to", "file" }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and that doesn’t round trip. If you feed that to &lt;code&gt;fn:build-uri&lt;/code&gt;, you get &lt;code&gt;file://uncname/path/part&lt;/code&gt; and that absolutely doesn’t mean the same thing on a Windows machine.&lt;/p&gt;
&lt;p&gt;We could encode the slashes in the &lt;code&gt;authority&lt;/code&gt; in which case we also have to encode them in the &lt;code&gt;host&lt;/code&gt; because in the presence of &lt;code&gt;host&lt;/code&gt;, the &lt;code&gt;authority&lt;/code&gt; isn’t used to by &lt;code&gt;fn:build-uri()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map {
  "uri": "file:////uncname/path/part",
  "scheme": "file",
  "authority": "////uncname",
  "host": "////uncname",
  "path": "/path/to/file",
  "path-segments": array { "", "path", "to", "file" }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It kind of works, but it’s really ugly and it means we have a host value that is a complete kludge. It doesn’t match the RFC rules for hostnames at all.&lt;/p&gt;
&lt;p&gt;The other option that occurs to me is to add a “unc-path” property to the map:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map {
  "unc-path": true(),
  "uri": "file:////uncname/path/part",
  "scheme": "file",
  "authority": "uncname",
  "host": "uncname",
  "path": "/path/to/file",
  "path-segments": array { "", "path", "to", "file" }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That works but it introduces all sorts of possibilities for incoherent data, such as an &lt;code&gt;https:&lt;/code&gt; URI with a &lt;code&gt;unc-path&lt;/code&gt; flag set to &lt;code&gt;true()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What’s the right answer?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ignore the UNC path special case, it’s the users problem to deal with them.&lt;/li&gt;
&lt;li&gt;Recognize them, encode the details in the &lt;code&gt;authority&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Recognize them, use a special property like &lt;code&gt;unc-path&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Recognize them, and do this other much better idea I have: ________________&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #389 created</title>
   <pubDate>Thu, 9 Mar 2023 09:31:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/389</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-389</guid>
   <description>&lt;div&gt;&lt;p&gt;The fn:build-uri function needs to perform URI encoding for path and query segments&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;fn:parse-uri&lt;/code&gt; function describes decoding, but the &lt;code&gt;fn:build-uri&lt;/code&gt; function fails to encode.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #388 closed</title>
   <pubDate>Wed, 8 Mar 2023 16:35:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/388</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-388</guid>
   <description>&lt;div&gt;&lt;p&gt;Update the example background color in serialization&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #388 created</title>
   <pubDate>Wed, 8 Mar 2023 16:25:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/388</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-388</guid>
   <description>&lt;div&gt;&lt;p&gt;Update the example background color in serialization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR completes my action to fix the dark blue background in examples in the serialization spec. I've made them the same as the examples in the XSLT spec which seem to have been satisfactory.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #387 created</title>
   <pubDate>Tue, 7 Mar 2023 21:03:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/387</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-387</guid>
   <description>&lt;div&gt;&lt;p&gt;Add compatibility notes for fn:namespace-uri-for-prefix&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Action QT4CG-024-01&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #386 created</title>
   <pubDate>Tue, 7 Mar 2023 20:32:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/386</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-386</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-025-05 (markup typo)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #385 created</title>
   <pubDate>Tue, 7 Mar 2023 20:15:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/385</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-385</guid>
   <description>&lt;div&gt;&lt;p&gt;Actions QT4CG-025-07 / -08&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Improves termdef markup; adds error code; updates change history appendix.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #355 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:19:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/355</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-355</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-022-02 - add to imp-def-feature appendix&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #370 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:19:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/370</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-370</guid>
   <description>&lt;div&gt;&lt;p&gt;Bump XSLT version&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #363 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:18:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/363</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-363</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #345 - missing rules for type matching&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #364 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:18:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/364</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-364</guid>
   <description>&lt;div&gt;&lt;p&gt;Generalize switch expressions in XQuery (issue #328)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #371 closed</title>
   <pubDate>Tue, 7 Mar 2023 17:17:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/371</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-371</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 370: forwards and backwards compatibility for 4.0&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 025 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 7 Mar 2023 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/03-07</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-03-07</guid>
</item><item>
   <title>Issue #384 created</title>
   <pubDate>Mon, 6 Mar 2023 16:24:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/384</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-384</guid>
   <description>&lt;div&gt;&lt;p&gt;Definition of "effective value" in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The term "effective value" is defined in XSLT with a rather narrow definition in the context of attribute value templates. The term is used throughout the spec (sometimes hyperlinked, sometimes not) in a much more general sense, for example the "effective value" of an attribute is the explicit value given to the attribute, or the value after basic normalization such as whitespace stripping, or the default value if the attribute is not present.&lt;/p&gt;
&lt;p&gt;This affects the determination of the correct result for test merge-021, where it is a little ambiguous whether two &lt;code&gt;xsl:merge-source/@order&lt;/code&gt; attribute have the same "effective value" given that one is defaulted.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 025 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sun, 5 Mar 2023 11:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/03-07</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-03-07</guid>
</item><item>
   <title>Issue #383 created</title>
   <pubDate>Tue, 28 Feb 2023 17:21:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/383</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-383</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve the specification of unordered comparisons in deep-equal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;At &lt;a href="https://qt4cg.org/meeting/minutes/2023/02-28.html"&gt;meeting 024&lt;/a&gt; where PR https://github.com/qt4cg/qtspecs/pull/320 was accepted, there remained an open question of how best to specify that in some circumstances the comparisons should be made without regard to the order of (some) children.&lt;/p&gt;
&lt;p&gt;Can the name of the option be improved?&lt;/p&gt;
&lt;p&gt;Should the option support wildcard names?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #382 created</title>
   <pubDate>Tue, 28 Feb 2023 17:19:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/382</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-382</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve whitespace handling in deep-equal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;At &lt;a href="https://qt4cg.org/meeting/minutes/2023/02-28.html"&gt;meeting 024&lt;/a&gt; where PR https://github.com/qt4cg/qtspecs/pull/320 was accepted, there remained an open question of how to deal with whitespace.&lt;/p&gt;
&lt;p&gt;The current options can be seen as having somewhat overlapping domains. Can this be improved?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #381 created</title>
   <pubDate>Tue, 28 Feb 2023 17:18:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/381</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-381</guid>
   <description>&lt;div&gt;&lt;p&gt;Deep-equal comparisons without errors&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;At &lt;a href="https://qt4cg.org/meeting/minutes/2023/02-28.html"&gt;meeting 024&lt;/a&gt; where PR #320 was accepted, there remained an open question of how to deal with errors.&lt;/p&gt;
&lt;p&gt;On the one hand, in order for &lt;code&gt;fn:deep-equal&lt;/code&gt; to be most easily used as a comparison function in the many contexts where a comparison function is required, it would be best if it simply returned &lt;code&gt;false()&lt;/code&gt; rather than raising an error when incomparably items are encountered.&lt;/p&gt;
&lt;p&gt;On the other hand, making "return false()" the default will mean that it is possible to construct items that are not equal to themselves, which will certainly violate the expectations of some users.&lt;/p&gt;
&lt;p&gt;This conflict needs to be resolved somehow.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 024 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 28 Feb 2023 17:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/02-28</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-02-28</guid>
</item><item>
   <title>Issue #377 closed</title>
   <pubDate>Tue, 28 Feb 2023 14:49:28 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/377</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-377</guid>
   <description>&lt;div&gt;&lt;p&gt;Published XQuery 4.0 spec renders XML predefined entities instead of literal characters&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #380 closed</title>
   <pubDate>Tue, 28 Feb 2023 14:49:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/380</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-380</guid>
   <description>&lt;div&gt;&lt;p&gt;Removed CDATA sections around markup&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #380 created</title>
   <pubDate>Tue, 28 Feb 2023 14:23:20 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/380</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-380</guid>
   <description>&lt;div&gt;&lt;p&gt;Removed CDATA sections around markup&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #377&lt;/p&gt;
&lt;p&gt;I took a minimal approach here. I've removed CDATA sections where the section contained an &lt;code&gt;&amp;amp;&lt;/code&gt; but not a &lt;code&gt;&amp;lt;&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the section contains &lt;code&gt;&amp;lt;&lt;/code&gt;, then it's  (presumably) necessary to escape the markup&lt;/li&gt;
&lt;li&gt;If the section &lt;em&gt;does not&lt;/em&gt; contain an &lt;code&gt;&amp;amp;&lt;/code&gt;, then it's irrelevant. But not removing it limits the number of places changed by the script&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #379 created</title>
   <pubDate>Tue, 28 Feb 2023 12:09:11 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/379</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-379</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespace handling in parse-html&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The HTML5/"Living Standard" specification has two modes when it comes to handling namespaces:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For XHTML content the document is parsed as XML with full namespace support.&lt;/li&gt;
&lt;li&gt;For HTML content, it has pseudo-namespace support.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, the HTML parsing algorithm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;places html, svg, and mathml elements in their corresponding namespaces.&lt;/li&gt;
&lt;li&gt;allows certain element/attribute tag names (e.g. &lt;code&gt;xlink:href&lt;/code&gt;) to be parsed as QNames.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From the XSLT/XQuery perspective, this affects the data model. Specifically, how to model and specify the node-names and the set of namespaces associated with a given element node.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #378 created</title>
   <pubDate>Tue, 28 Feb 2023 08:55:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/378</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-378</guid>
   <description>&lt;div&gt;&lt;p&gt;Update the localName and unparsed entity reference notes for parse-html&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR applies the following changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] QT4CG-021-03: RD to change must to will in DOM notes about lowercase&lt;/li&gt;
&lt;li&gt;[x] QT4CG-021-04: RD to revise and move the note about unrecognized entities&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #377 created</title>
   <pubDate>Tue, 28 Feb 2023 07:22:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/377</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-377</guid>
   <description>&lt;div&gt;&lt;p&gt;Published XQuery 4.0 spec renders XML predefined entities instead of literal characters&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When rendered in the browser, XML examples in the &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html"&gt;XQuery 4.0 specification&lt;/a&gt; show, for example, '&lt;code&gt;&amp;amp;lt;&lt;/code&gt;' instead of '&lt;code&gt;&amp;lt;&lt;/code&gt;':&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/2734234/221782371-1d119a80-72b3-4ede-b9c9-0b2b464533c0.png" alt="Screenshot 2023-02-28 at 07 21 49"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #376 created</title>
   <pubDate>Mon, 27 Feb 2023 17:16:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/376</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-376</guid>
   <description>&lt;div&gt;&lt;p&gt;add documentation prefix attribute to xsl:stylesheet&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Although the addition of xsl:note is very welcome, i had been hoping for something like the xsl:stylesheet attribute extension-element-prefixes, e.g. ignored-element-prefixes.&lt;/p&gt;
&lt;p&gt;The specification would be something like,
Elements and attributes associated with an ignored element prefix are not treated as direct constructors, and are removed when the stylesheet is compiled. For such an element, this is equivalent to having an xsl:use-when attribute with value false on the element; for attributes, they are simply discarded along with their value.&lt;/p&gt;
&lt;p&gt;It is not an error for a prefix to be listed both as an ignored element prefix and as an extension element prefix; the result is implementation dependent in this case, but MUST not result in neither an extension being invoked nor the element or attribute being ignored.&lt;/p&gt;
&lt;p&gt;Ignored elements may appear anywhere in the input tree, and ignored attributes may appear on any element.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template match="city/park" css:module="main"&amp;gt;
  &amp;lt;css:rule&amp;gt;
    color: green;
    trees: tall;
  &amp;lt;/xsl:rule&amp;gt;
  &amp;lt;div class="park"&amp;gt;
    &amp;lt;xsl:apply-templates /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #375 created</title>
   <pubDate>Mon, 27 Feb 2023 17:03:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/375</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-375</guid>
   <description>&lt;div&gt;&lt;p&gt;Context for default parameter values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is an attempt to resolve issue #256 by providing details of the static and dynamic context for evaluating default parameter values, including providing a mechanism for accessing parts of the static and dynamic context of the caller.&lt;/p&gt;
&lt;p&gt;If this PR is accepted we will need to follow up with (a) similar changes to XSLT, and (b) use of the new notation in the signatures of standard functions and operators that have context-dependent default values for parameters.&lt;/p&gt;
&lt;p&gt;Note that the PR also breaks up the rather unwieldy sections for Function Declarations and Variable Declarations into more manageable subsections, which has involved some re-ordering; some of the change marking may therefore be spurious.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #374 created</title>
   <pubDate>Mon, 27 Feb 2023 10:11:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/374</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-374</guid>
   <description>&lt;div&gt;&lt;p&gt;Can't view the XSD for XSLT in the browser&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;If you attempt to open &lt;code&gt;https://qt4cg.org/specifications/xslt-40/schema-for-xslt40.xsd&lt;/code&gt; in the browser (in Firefox), you'll get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error loading stylesheet: An unknown error has occurred (805303f4)
http://www.w3.org/2008/09/xsd.xsl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a Chrome-derived browser I get a blank screen on which even the context menu doesn't work. Digging about in the inspect window leads me to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Unsafe attempt to load URL http://www.w3.org/2008/09/xsd.xsl from frame with URL
https://qt4cg.org/specifications/xslt-40/schema-for-xslt40.xsd. Domains, protocols and ports must match.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I conclude that the problem is trying to load the XSL for XSD from a different domain. Boo. I guess we should copy those stylesheets to &lt;code&gt;qt4cg.org&lt;/code&gt;, or remove the stylesheet PI, or ignore the whole thing on the assumption that we'll eventually publish these specifications in some W3C location and the probem will go away. Maybe.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #373 created</title>
   <pubDate>Mon, 27 Feb 2023 09:29:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/373</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-373</guid>
   <description>&lt;div&gt;&lt;p&gt;apparent copy/paste error in annotation documentation of simple type yes-or-no-or-maybe&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XSD 1.1 schema for XSLT 3 and the one for XSLT 4 (at https://qt4cg.org/specifications/xslt-40/schema-for-xslt40.xsd) has an error in the annotation/documentation section of the simple type &lt;code&gt;yes-or-no-or-maybe&lt;/code&gt; as it there says &lt;code&gt;One of the values "yes" or "no" or "omit".&lt;/code&gt;. I think that should be &lt;code&gt;One of the values "yes" or "no" or "maybe"&lt;/code&gt;, the error probably exists as someone copied the text from the &lt;code&gt;yes-or-no-or-omit&lt;/code&gt; type declaration and forgot to adapt the description.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #372 created</title>
   <pubDate>Sun, 26 Feb 2023 23:06:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/372</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-372</guid>
   <description>&lt;div&gt;&lt;p&gt;Separate default namespace for elements from the default namespace for types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently the static context provides a "default namespace for elements and types". It's not at all clear why these should be the same. For types, the vast majority of QNames representing types are in the XML Schema namespace, which is never used for elements.&lt;/p&gt;
&lt;p&gt;In the current 4.0 drafts the two default namespaces are separated; but this has not been reviewed or agreed by the CG. This issue is raised for discussion of the change, and I will also review the design to see whether it still make sense.&lt;/p&gt;
&lt;p&gt;Some observations on the current text for XQuery:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In section 2.2.1 (static context) it would be good to give a bit more detail (if only as a forwards reference) about the circumstances in which the default element namespace and the default type namespace are used.&lt;/li&gt;
&lt;li&gt;In 3.4 Sequence Types the sentence "[Lexical QNames]appearing in a [sequence type] have their prefixes expanded to namespace URIs by means of the [statically known namespaces] and (where applicable) the [default element namespace] or [default type namespace]" is rather inelegantly worded. If there is a prefix, then the statically known namespaces are used; if there is none, then the relevant default namespace is used, and it would be nice to explain more clearly which one applies.&lt;/li&gt;
&lt;li&gt;In 3.6 Item Types, we need to be clearer about references to named/declared item types, and about how the names are resolved. Do we really want these names to be in the same symbol space as atomic types? Perhaps we should have a rule that Item Types (like functions) must be in a namespace and this must not be the same as an imported schema namespace.&lt;/li&gt;
&lt;li&gt;In 5.14, Default namespace declaration, there seems to be duplication between the two paragraphs starting "for backwards compatibility reasons"&lt;/li&gt;
&lt;li&gt;Appendix C.1 (much though I dislike it) should say something about the initialisation of the default namespaces for elements and for types.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that issue #65 talks of the need for different default namespaces for input and output elements. I think that's a separate issue.&lt;/p&gt;
&lt;p&gt;Observations on the current text for XSLT:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In 5.1.2.1 the paragraph "The [xsl:]xpath-default-namespace attribute must be in the [XSLT namespace] if and only if its parent element is not in the XSLT namespace needs to be generalised to [xsl:]default-element-namespace. In fact, this rule should move to the parent section 5.1.2, which needs an introduction.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #371 created</title>
   <pubDate>Fri, 24 Feb 2023 16:59:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/371</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-371</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 370: forwards and backwards compatibility for 4.0&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is essentially editorial; it updates the XSLT rules for forwards and backwards compatible processing to acknowledge the fact that the current version is now 4.0.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #370 created</title>
   <pubDate>Fri, 24 Feb 2023 16:18:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/370</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-370</guid>
   <description>&lt;div&gt;&lt;p&gt;Bump XSLT version&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There are various places where the XSLT spec refers to XSLT 3.0 where it should now refer to 4.0.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 024 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 24 Feb 2023 08:25:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/02-28</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-02-28</guid>
</item><item>
   <title>Issue #352 closed</title>
   <pubDate>Wed, 22 Feb 2023 21:24:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/352</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-352</guid>
   <description>&lt;div&gt;&lt;p&gt;The @array attribute of xsl:for-each-group is no more&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #354 closed</title>
   <pubDate>Wed, 22 Feb 2023 10:08:23 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/354</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-354</guid>
   <description>&lt;div&gt;&lt;p&gt;Combine multiple signatures of XSLT functions to use defaults&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #353 closed</title>
   <pubDate>Wed, 22 Feb 2023 10:07:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/353</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-353</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue109 xsl note&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #362 closed</title>
   <pubDate>Wed, 22 Feb 2023 10:06:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/362</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-362</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop obsolete note in XSLT regarding for-each-group/@array&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 023 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Wed, 22 Feb 2023 09:53:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/02-21</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-02-21</guid>
</item><item>
   <title>Issue #369 created</title>
   <pubDate>Tue, 21 Feb 2023 17:44:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/369</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-369</guid>
   <description>&lt;div&gt;&lt;p&gt;Namespaces for Functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;What problem are we trying to solve? Essentially, I think "namespace clutter".&lt;/p&gt;
&lt;p&gt;Namespace clutter manifests itself in several different ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firstly, declaration clutter in source code. Here's the start of a module in an XSLT Stylesheet of medium complexity:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:stylesheet 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
    exclude-result-prefixes="#all"
    version="3.0" 
    xmlns="http://ns.saxonica.com/xslt/export" 
    xmlns:doc="http://www.saxonica.com/ns/documentation"
    xmlns:map="http://www.w3.org/2005/xpath-functions/map" 
    xmlns:ex="http://ns.saxonica.com/xslt/export" 
    xmlns:f="MyFunctions" 
    xmlns:t="MyTypes"
    expand-text="true"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eight namespace declarations here, of which 3 are concerned with functions; and  Wit can get a lot worse than that.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Secondly, namespace clutter in the static and dynamic context. The namespace bindings shown above don't disappear when the code is compiled; even with exclude-result-prefixes="yes", they have to hang around at run-time just in case someone tries to resolve a QName dynamically. Preserving the namespace context in the expression tree through optimization rewrites is a significant cost that has no user benefit; very rarely are they actually going to use the namespace context at run time.&lt;/li&gt;
&lt;li&gt;Thirdly, prefix clutter in the executable code. Writing &lt;code&gt;math:cos(math:cos($x))&lt;/code&gt; is just so clumsy compared with &lt;code&gt;cos(cos($x))&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think there are a number of things we can do to reduce this.&lt;/p&gt;
&lt;p&gt;First, separate out the namespace context for static resolution of function names as a separate part of the static context, used only for this purpose. Ensure that there is no functionality that depends on knowing this part of the static context at run time, so it can be discarded by the compiler as soon as function names are resolved. Then provide source syntax for binding function prefixes to function namespaces in XSLT and XQuery to populate this part of the static context; there is no reason this has to be done using XML namespace declarations. There is also no reason for having different bindings in force in different parts of a single module. And once we've separated these declarations from XML namespace declarations, there's no reason why we can't provide default bindings. We could also allow bindings to have cross-module scope to reduce duplicated code. Note: the xsl:function-library proposal in the current XSLT 4.0 draft tries to achieve some of these things.&lt;/p&gt;
&lt;p&gt;Second, allow functions to be referenced by local name alone where the reference is unambiguous; and perhaps provide some aliasing mechanisms to make more existing names unambiguous.&lt;/p&gt;
&lt;p&gt;We've explored a third idea, which is to introduce some kind of polymorphism where function names have local scope and are distinguished by the types of objects to which they are applied. I think that given our type system, this is very hard to achieve and I haven't seen any very satisfactory proposals. We also need to remember that there are considerable costs if we start resolving function names dynamically at run time. I wouldn't rule out making progress in this direction, but I'm not optimistic of coming up with a workable solution. There might be some simple things we could do, like having a single function &lt;code&gt;size()&lt;/code&gt; that performs the work of both &lt;code&gt;map:size()&lt;/code&gt; and &lt;code&gt;array:size()&lt;/code&gt; depending on the argument.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #368 created</title>
   <pubDate>Tue, 21 Feb 2023 10:34:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/368</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-368</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 129 - Context item generalized to context value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a first cut proposal to generalize the context item to a context value, allowing (for example) array predicates.&lt;/p&gt;
&lt;p&gt;The proposal covers XPath and XQuery only at this stage; it doesn't address the consequences for XSLT.&lt;/p&gt;
&lt;p&gt;Careful review requested!&lt;/p&gt;
&lt;p&gt;Addresses issue #129 and issue #367.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #367 created</title>
   <pubDate>Tue, 21 Feb 2023 00:06:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/367</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-367</guid>
   <description>&lt;div&gt;&lt;p&gt;Focus for RHS of thin arrow expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We define &lt;code&gt;A -&amp;gt; F(B, C)&lt;/code&gt; as being equivalent to &lt;code&gt;A ! F(., B, C)&lt;/code&gt; which means that B and C are evaluated with a focus based on the current item in A, not with the outer focus. This is different from the &lt;code&gt;=&amp;gt;&lt;/code&gt; operator. For example if the $E is an element E, with several children called F, then&lt;/p&gt;
&lt;p&gt;&lt;code&gt;namespace-uri(.) -&amp;gt; fn:QName(name())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;has a different effect from&lt;/p&gt;
&lt;p&gt;&lt;code&gt;namespace-uri(.) =&amp;gt; fn:QName(name())&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;whereas it might reasonably be expected that in the case where the LHS produces a single value, the two operators are equivalent. We can't change the meaning of &lt;code&gt;=&amp;gt;&lt;/code&gt; because it's defined in 3.1. So should we change the meaning of &lt;code&gt;-&amp;gt;&lt;/code&gt; to fall into line?&lt;/p&gt;
&lt;p&gt;We could do this easily enough by defining &lt;code&gt;A -&amp;gt; F(B, C)&lt;/code&gt; as equivalent to &lt;code&gt;for $a in A return F($a, B, C)&lt;/code&gt;.  I think that as well as being more consistent with &lt;code&gt;=&amp;gt;&lt;/code&gt;, the result is probably more intuitive. (We could also define it as equivalent to &lt;code&gt;let $f := F(?, B, C) return A ! $f(.)&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;For the expression &lt;code&gt;A -&amp;gt; {B}&lt;/code&gt;, and for the proposed &lt;code&gt;A =&amp;gt; {B}&lt;/code&gt;, I don't think we have any choice other than evaluating B with an inner focus based on A. But at least we can do it consistently for both operators.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #366 created</title>
   <pubDate>Mon, 20 Feb 2023 18:43:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/366</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-366</guid>
   <description>&lt;div&gt;&lt;p&gt;Support xsl:use-package with xsl:package-location&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Unless I am misreading the specs (which I do commonly enough), there is currently no way for an XSLT writer using &lt;code&gt;xsl:use-package&lt;/code&gt; to indicate where the package is to be found, except outside the XSLT environment. I propose to allow &lt;code&gt;xsl:use-package&lt;/code&gt; to contain zero or more &lt;code&gt;xsl:package-location&lt;/code&gt; children. I propose the addition of an element and not an attribute, because a package may be in multiple locations, and need nuance, as noted below.&lt;/p&gt;
&lt;p&gt;Attributes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@href&lt;/code&gt;, on the model of &lt;code&gt;xsl:import&lt;/code&gt; and &lt;code&gt;xsl:include&lt;/code&gt;, would specify by relative or absolute URI where the package is.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@priority&lt;/code&gt; (default 0) would provide a mechanism to indicate whether the specified &lt;code&gt;xsl:package-location&lt;/code&gt; should override (value greater than 0), or simply provide a fallback for (less than or equal to 0), the preconfigured place the package should be retrieved from.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@use-when&lt;/code&gt; would allow a developer to manage different versions of a package for different cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other attributes given to &lt;code&gt;xsl:package-location&lt;/code&gt; would need discussion.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #365 created</title>
   <pubDate>Mon, 20 Feb 2023 16:41:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/365</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-365</guid>
   <description>&lt;div&gt;&lt;p&gt;switch, typeswitch: Optional braces&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The indentation of switch expressions is often a mess. Now that we allow curly braces for &lt;code&gt;if&lt;/code&gt;, it would be nice to also allow optional braces for &lt;code&gt;switch&lt;/code&gt; and &lt;code&gt;typeswitch&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;typeswitch($item) {
  case xs:numeric return 'number'
  default return '...'
},
switch($item) {
  case 0 to 9 return 'single digit'
  default return '...'
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The current syntax is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;typeswitch($item)
  case xs:numeric return 'number'
  default return '...',

switch($item)
  case 0 to 9 return 'single digit'
  default return '...'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #364 created</title>
   <pubDate>Mon, 20 Feb 2023 15:43:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/364</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-364</guid>
   <description>&lt;div&gt;&lt;p&gt;Generalize switch expressions in XQuery (issue #328)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #363 created</title>
   <pubDate>Mon, 20 Feb 2023 13:07:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/363</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-363</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #345 - missing rules for type matching&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #362 created</title>
   <pubDate>Mon, 20 Feb 2023 12:12:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/362</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-362</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop obsolete note in XSLT regarding for-each-group/@array&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fixes issue #352&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #361 created</title>
   <pubDate>Mon, 20 Feb 2023 11:38:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/361</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-361</guid>
   <description>&lt;div&gt;&lt;p&gt;Named arguments: $input vs. $value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Great effort has been made in unifying the parameter names of the XQFO standard; thanks for that!&lt;/p&gt;
&lt;p&gt;I believe to remember that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$value&lt;/code&gt;, &lt;code&gt;$values&lt;/code&gt;, &lt;code&gt;$value1&lt;/code&gt;, etc. is used for atomic/atomized arguments, whereas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$input&lt;/code&gt;, &lt;code&gt;$input1&lt;/code&gt;, etc. is used for input, mostly of type &lt;code&gt;item()&lt;/code&gt;, that is processed unchanged.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$uri&lt;/code&gt; is used for arguments that could have been defined as items of type &lt;code&gt;xs:anyURI&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I believe the following argument names need to be double-checked (if not, It may be that I haven’t fully grasped how the naming rules are supposed to work):&lt;/p&gt;
&lt;p&gt;Function | Currently | Presumably | Justification
--- | --- | --- | ---
&lt;code&gt;array:slice&lt;/code&gt; | &lt;code&gt;$input&lt;/code&gt; | &lt;code&gt;$array&lt;/code&gt; | Alignment with &lt;code&gt;array:size&lt;/code&gt; et al.
&lt;code&gt;trace&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | &lt;code&gt;$input&lt;/code&gt; | Argument is not atomized
&lt;code&gt;json&lt;/code&gt; | &lt;code&gt;$input&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Argument is atomized
&lt;code&gt;string&lt;/code&gt; | &lt;code&gt;$item&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt;  | &lt;code&gt;$item&lt;/code&gt; is used nowhere else
&lt;code&gt;expanded-QName&lt;/code&gt; | &lt;code&gt;$qname&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;prefix-from-QName&lt;/code&gt; et al.
&lt;code&gt;resolve-QName&lt;/code&gt; | &lt;code&gt;$qname&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;prefix-from-QName&lt;/code&gt; et al.
&lt;code&gt;parse-QName&lt;/code&gt; | &lt;code&gt;$eqname&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;parse-xml&lt;/code&gt; et al.
&lt;code&gt;parse-json&lt;/code&gt; | &lt;code&gt;$json&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;parse-xml&lt;/code&gt; et al.
&lt;code&gt;json-to-xml&lt;/code&gt; | &lt;code&gt;$json&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;parse-xml&lt;/code&gt; et al.
&lt;code&gt;char&lt;/code&gt; | &lt;code&gt;$name&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Input may also be codepoint values, etc.
&lt;code&gt;namespace-uri-for-prefix&lt;/code&gt; | &lt;code&gt;$prefix&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | &lt;code&gt;$prefix&lt;/code&gt; is used nowhere else
&lt;code&gt;resolve-uri&lt;/code&gt; | &lt;code&gt;$relative&lt;/code&gt; | &lt;code&gt;$uri&lt;/code&gt; | Absolute URIs are legal as well&lt;/p&gt;
&lt;p&gt;And we should probably pay particular attention to the naming conventions when adding new functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #360 created</title>
   <pubDate>Mon, 20 Feb 2023 11:24:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/360</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-360</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 314 array composition and decomposition&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR addresses parts of issue 29, issue 113, and issue 314 relating to the composition and decomposition of arrays.&lt;/p&gt;
&lt;p&gt;It introduces two functions &lt;code&gt;array:of&lt;/code&gt; for array composition, and &lt;code&gt;array:members&lt;/code&gt; for decomposition, and defines all other array functions in terms of these two primitives (replacing the internal functions &lt;code&gt;op:A2S&lt;/code&gt; and &lt;code&gt;op:S2A&lt;/code&gt;). The items in the decomposed form of an array are called "value records", singleton maps of the form &lt;code&gt;map{'value': $value}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;array:from-sequence&lt;/code&gt; is renamed &lt;code&gt;array:build&lt;/code&gt; to reflect its symmetry with &lt;code&gt;map:build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Question for the group: should we have a new function for constructing a "value record", or is the syntax &lt;code&gt;map{'value': $value}&lt;/code&gt; adequate for the purpose?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #359 created</title>
   <pubDate>Mon, 20 Feb 2023 09:53:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/359</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-359</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:void: Absorb result of evaluated argument&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Absorb the result of the evaluated argument.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:void(
  $input as item()*
) as empty-sequence()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Motivation&lt;/h3&gt;
&lt;p&gt;Developers tend to get creative if they want to suppress the result of an expression. The reason is that there is no simply solution to do this properly. Some constructs I have seen in practice:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $unused := EXPRESSION
return 'ok'

EXPRESSION[position() = 10000], 'ok'

let $result := 'ok'
return if(exists(EXPRESSION)) then $result else $result
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cases like this are frequent in nondeterministic code. Think e.g. of side-effecting functions of the EXPath HTTP-Client and File Modules: The function results are not always relevant for the invoking application, or already known.&lt;/p&gt;
&lt;p&gt;The function is also helpful during development and for testing code. &lt;code&gt;fn:void#1&lt;/code&gt; and &lt;code&gt;fn:identity#1&lt;/code&gt; can both be passed on to functions to either return or ignore the result of their arguments. The function can potentially be used to measure the runtime performance of an expression (but an implementation should not be prevented from discarding the function call if the argument expression is deterministic).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #358 created</title>
   <pubDate>Sun, 19 Feb 2023 23:55:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/358</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-358</guid>
   <description>&lt;div&gt;&lt;p&gt;serialization indent whitespace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There could be an option to control whether the serialization indents with space or tabs, and how many of them (e.g.  2 or 4 spaces )&lt;/p&gt;
&lt;p&gt;Related: https://github.com/qt4cg/qtspecs/issues/101&lt;/p&gt;
&lt;p&gt;A user request: https://github.com/benibela/xidel/issues/100&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #357 created</title>
   <pubDate>Sat, 18 Feb 2023 16:07:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/357</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-357</guid>
   <description>&lt;div&gt;&lt;p&gt;Representing key-value pairs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A map can be decomposed into, or composed from, a sequence of key-value pairs (KVPs).&lt;/p&gt;
&lt;p&gt;There are two natural representations of a key-value pair (K, V): it can be represented as a singleton map (&lt;code&gt;map{ K: V }&lt;/code&gt;) or as a "doubleton" map (&lt;code&gt;map{ 'key': K, 'value': V}&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This issue examines how well either of these representations is currently supported, which of them is preferable, and how this support should be improved.&lt;/p&gt;
&lt;p&gt;I'll consider the following basic operations: constructing a KVP from a key and a value, assembling a map from a set of KVPs, decomposing a map into a sequence of KVPs, extracting the key from a KVP, and extracting the value from a KVP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Singleton Representation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Constructing a KVP from a key and a value:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map{ $key : $value }
map:entry($key, $value)
&amp;lt;xsl:map:entry key="$key" select="$value"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assembling a map from a set of KVPs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map:merge($kvps)
&amp;lt;xsl:map&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Decomposing a map into a sequence of KVPs:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:for-each($map, map:entry#2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Extracting the key from a KVP:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:keys($kvp)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Extracting the value from a KVP:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$kvp?*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Doubleton Representation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Constructing a KVP from a key and a value:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map{ 'key': $key, 'value': $value }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assembling a map from a set of KVPs&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:build($kvps, -&amp;gt;{?key}, -&amp;gt;{?value})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Decomposing a map into a sequence of KVPs:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map:for-each($map, -&amp;gt;($K, $V){map{ 'key': $key, 'value': $value })&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Extracting the key from a KVP:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$kvp?key&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Extracting the value from a KVP:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$kvp?value&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Analysis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The singleton representation is better supported at present, and it makes sense therefore to fill in the gaps that currently make it awkward. The main attraction of the doubleton representation is the ease of extracting the key and the value using &lt;code&gt;$kvp?key&lt;/code&gt; and &lt;code&gt;$kvp?value&lt;/code&gt;. The equivalents for the singleton representation (&lt;code&gt;map:keys($kvp)&lt;/code&gt; and &lt;code&gt;$kvp?*&lt;/code&gt;) feel clumsy and unintuitive; however, it's not at all obvious what would be better, short of introducing new custom syntax, which seems over-the-top. The best idea I can come up with is to have two functions &lt;code&gt;map:key($kvp)&lt;/code&gt; and &lt;code&gt;map:value($kvp)&lt;/code&gt; which require $kvp to be a singleton map. But I hate the namespace prefixes...&lt;/p&gt;
&lt;p&gt;The other thing needed to "fill the gaps" is a function &lt;code&gt;map:entries($map)&lt;/code&gt; equivalent to &lt;code&gt;map:for-each($map, map:entry#2)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What if we chose to go the other way, and improve support for the doubleton representation?&lt;/p&gt;
&lt;p&gt;We could add &lt;code&gt;map:key-value-pair($key, $value)&lt;/code&gt; to create  KVP, and &lt;code&gt;map:of($kvps)&lt;/code&gt; to build a map from a set of KVPs, and &lt;code&gt;map:key-value-pairs($map)&lt;/code&gt; to decompose a map. The trickiest problem is what to do about XSLT, where the 3.0 instructions &lt;code&gt;&amp;lt;xsl:map&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;xsl:map-entry&amp;gt;&lt;/code&gt; use the singleton representation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #356 created</title>
   <pubDate>Sat, 18 Feb 2023 00:21:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/356</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-356</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] Issues with array:flatten&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;1. Issues&lt;/h1&gt;
&lt;p&gt;There are at least two issues with the definition of the function &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-flatten"&gt;&lt;strong&gt;&lt;code&gt;array:flatten&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlike most other functions on arrays (such as &lt;strong&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-put"&gt;array:put&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-replace"&gt;array:replace&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-append"&gt;array:append&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-slice"&gt;array:slice&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-subarray"&gt;array:subarray&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-remove"&gt;array:remove&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-insert-before"&gt;array:insert-before&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-tail"&gt;array:tail&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-trunk"&gt;array:trunk&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-reverse"&gt;array:reverse&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-join"&gt;array:join&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-for-each"&gt;array:for-each&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-filter"&gt;array:filter&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-for-each-pair"&gt;array:for-each-pair&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-sort"&gt;array:sort&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-partition"&gt;array:partition&lt;/a&gt;&lt;/strong&gt;) , which produce an array as their result, &lt;strong&gt;this function produces only a sequence&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;This function is not lossless&lt;/strong&gt; -- any members that are the empty sequence or the empty array are not represented in the returned result.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;2. Suggested solution(s)&lt;/h1&gt;
&lt;p&gt;We want to have a function that is similar to the wrongly defined one, but produces its contents as an array, and is lossless. There are two obvious ways to do this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Correct the specification of   &lt;strong&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-array-flatten"&gt;&lt;code&gt;array:flatten&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; so that its result is an array and it represents the empty sequences and empty arrays as the same members of its result.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add to the Specification a new function: &lt;strong&gt;&lt;code&gt;array:leaves&lt;/code&gt;&lt;/strong&gt; that produces an array as its result and that is lossless.
&lt;strong&gt;array:leaves&lt;/strong&gt; returns an array whose members are exactly all the leaves of the input array, by the order of their appearance. By definition leaves are all, and at any depth, members that are not an array except when they are the empty array. Thus () (the empty sequence) and [] (the empty array) are leaves by definition.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Solution 2. will not cause any compatibility issues&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;3. Examples&lt;/h1&gt;
&lt;p&gt;The expression &lt;strong&gt;&lt;code&gt;array:leaves([1, (), [4, 6], 5, 3])&lt;/code&gt;&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;[1, (),  4, 6, 5, 3]&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The expression &lt;strong&gt;&lt;code&gt;array:leaves([1, 2, 5], [[10, 11], 12], [], 13)&lt;/code&gt;&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;[1, 2, 5, 10, 11, 12, [], 13]&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 023 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 17 Feb 2023 17:49:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/02-21</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-02-21</guid>
</item><item>
   <title>Pull request #355 created</title>
   <pubDate>Thu, 16 Feb 2023 21:41:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/355</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-355</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-022-02 - add to imp-def-feature appendix&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Adds entries to the implementation-defined-features appendix of the serialization spec, corresponding to the option to generate &lt;code&gt;&amp;lt;meta charset="XXX"&amp;gt;&lt;/code&gt; for HTML5.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #354 created</title>
   <pubDate>Thu, 16 Feb 2023 18:30:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/354</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-354</guid>
   <description>&lt;div&gt;&lt;p&gt;Combine multiple signatures of XSLT functions to use defaults&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR addresses issue 69, by modifying those XSLT built-in functions that currently have multiple signatures, to use a single signature with parameter defaults instead.&lt;/p&gt;
&lt;p&gt;The changes however don't currently render correctly. The XSLT processing pipeline needs to be changed to pick up the changes that were made to the F+O stylesheets to render parameter defaults correctly. I haven't yet managed to work out where this is done.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #353 created</title>
   <pubDate>Thu, 16 Feb 2023 17:22:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/353</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-353</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue109 xsl note&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Addresses issue #109 and issue #87. Unfortunately the PR also includes the unrelated commits for issue 22.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #352 created</title>
   <pubDate>Thu, 16 Feb 2023 14:58:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/352</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-352</guid>
   <description>&lt;div&gt;&lt;p&gt;The @array attribute of xsl:for-each-group is no more&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There is a note in XSLT §14.2 concerning the @array attribute of xsl:for-each-group, but this attribute has been dropped.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #351 closed</title>
   <pubDate>Thu, 16 Feb 2023 08:48:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/351</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-351</guid>
   <description>&lt;div&gt;&lt;p&gt;Another attempt to build off the merge-base branch&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #351 created</title>
   <pubDate>Thu, 16 Feb 2023 08:48:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/351</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-351</guid>
   <description>&lt;div&gt;&lt;p&gt;Another attempt to build off the merge-base branch&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #341 closed</title>
   <pubDate>Thu, 16 Feb 2023 00:17:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/341</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-341</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Error-free selection operator for maps or arrays, or finite-domain functions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #350 created</title>
   <pubDate>Thu, 16 Feb 2023 00:11:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/350</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-350</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] CompPath (Composite-objects path) Expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;CompPath (Composite-objects path) Expressions&lt;/h1&gt;
&lt;p&gt;As initially discussed in issue #341, we were exploring different ways to provide an XPath-like language to traverse in depth composite objects such as maps and arrays and select their members at any depth.
While working on this, the idea of an XPath-like language for composite items started to emerge and here we present this idea in a more or less crystalized form.&lt;/p&gt;
&lt;h2&gt;1. Root Component&lt;/h2&gt;
&lt;p&gt;Any CompPath expression must start off a composite item (of type map or array, or of other future composite item type (maybe set? )  ).
This can be a literal composite item or a reference to a variable whose value is a composite item.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;
(: Literal composite items: :)
[1, 2, 3]

[1, [2,  3]]?2

{"x":1, "y" : map{ "z": 2}}

{"x":1, "y" : map{ "z": 2}} ?y

(: Variables containing composite items: :)
let $comp1 := [1, [2, 3]],
 $comp2 :=$comp1 ?2,
 $comp3 := {"x":1, "y" : map{ "z": 2}},
 $comp4 := $comp3 ?y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above examples all literal expressions and all variables (&lt;strong&gt;&lt;code&gt;$comp1, $comp2, $comp3, $comp4&lt;/code&gt;&lt;/strong&gt;) may serve as the root component for a CompPath expression.&lt;/p&gt;
&lt;h2&gt;2. The component-path operator (\)&lt;/h2&gt;
&lt;p&gt;The component-path operator "\" is used to build expressions for locating members at any depth within component trees. Its left-hand side expression must return a result that is a composite item or else this result is represented as such by wrapping it into an array.&lt;/p&gt;
&lt;p&gt;The operator returns an array, the values of whose members are composite items themselves or any such value may be a non-composite "leaf" in the root-component tree).&lt;/p&gt;
&lt;p&gt;Each operation E1\E2 is evaluated as follows: Expression E1 is evaluated, and the result is wrapped in an array A1. If any member of A1 is not a composite item, a type error is raised.
Each member of A1 serves in turn  to provide an inner "composite-focus" (the member as the "composite-context-item" or &lt;strong&gt;&lt;code&gt;.&lt;/code&gt;&lt;/strong&gt;, its index in A1 as the "composite-context-position" or &lt;strong&gt;&lt;code&gt;index()&lt;/code&gt;&lt;/strong&gt;, the set of keys of the composite-context-item as the "composite-keyset" or &lt;strong&gt;&lt;code&gt;keys()&lt;/code&gt;&lt;/strong&gt; and the size of this member as the "composite-context-size" (specified as one of: &lt;strong&gt;&lt;code&gt;size()&lt;/code&gt;&lt;/strong&gt;, or &lt;strong&gt;&lt;code&gt;array-size()&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;key-size()&lt;/code&gt;&lt;/strong&gt;) ) for the evaluation of E2. The result of each evaluation of  E2, if it isn't a single composite item, is wrapped in a single array. The arrays resulting from all the evaluations of E2 are wrapped  in a single array and this single array is the result of the evaluation.&lt;/p&gt;
&lt;p&gt;E2 is typically a function over the &lt;em&gt;context-focus&lt;/em&gt;  and its results will be the set of the next step composite-context-items (used as the left-hand-side of the next in chain composite-step-expression (see below)), or these results would be the final results of evaluation if this is the last-in chain composite-step-expression.&lt;/p&gt;
&lt;h2&gt;3. Composite-Steps&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;composite-step&lt;/strong&gt; is a part of a composite-path-expression that generates an array and filters its members by zero or more predicates. A &lt;strong&gt;composite-step-expression&lt;/strong&gt; is either a &lt;em&gt;CompositeAxisStep&lt;/em&gt; or a &lt;em&gt;CompositePostfixExpression&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;4. Composite-Axes&lt;/h2&gt;
&lt;p&gt;The following axes are defined for traversing a composite-item tree:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt; axis contains the members of the composite-context-item.&lt;/li&gt;
&lt;li&gt;The  &lt;strong&gt;&lt;code&gt;value-member::&lt;/code&gt;&lt;/strong&gt;  axis contains the members of the composite-context-item that are not composite themselves.&lt;/li&gt;
&lt;li&gt;The  &lt;strong&gt;&lt;code&gt;node-member::&lt;/code&gt;&lt;/strong&gt;  axis contains the members of the composite-context-item that are nodes.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;descendant-member::&lt;/code&gt;&lt;/strong&gt; axis is defined as the transitive closure of the &lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt; axis; it contains the descendent-members of the composite-context-item (the child members of the composite-context-item, and their child-members, ... and so on).&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;self::&lt;/code&gt;&lt;/strong&gt; axis contains just the composite-context-item.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;descendant-member-or-self::&lt;/code&gt;&lt;/strong&gt; contains the composite-context-item and all of its descendent-members.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;following-sibling-member::&lt;/code&gt;&lt;/strong&gt; axis contains the members of the immediate container of the composite-context-item that follow it. For any two members &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; of a composite item &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt;, by definition &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; follows &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt; if and only if &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt; is an array and the index of &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; in &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt; is greater than that of &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt;, or if &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt; is a map, then the key of &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; is greater than that of &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;preceding-sibling-member::&lt;/code&gt;&lt;/strong&gt; axis contains the members of the immediate container of the composite-context-item that precede it. For any two members &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; of a composite item &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt;, by definition &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt; precedes &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; if and only if &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt; is an array and the index of &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; in &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt; is greater than that of &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt;, or if &lt;strong&gt;&lt;em&gt;Comp&lt;/em&gt;&lt;/strong&gt; is a map, then the key of &lt;strong&gt;&lt;em&gt;mem2&lt;/em&gt;&lt;/strong&gt; is greater than that of &lt;strong&gt;&lt;em&gt;mem1&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, &lt;strong&gt;&lt;code&gt;following-sibling-member::5&lt;/code&gt;&lt;/strong&gt; means all members of the composite-context-item with index &amp;gt; 5,
and &lt;strong&gt;&lt;code&gt;preceding-sibling-member::5&lt;/code&gt;&lt;/strong&gt; means all members of the composite-context-item with index &amp;lt; 5&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the immediate container of the composite-context-item is a map whose key-values cannot be ordered, then specifying either of the &lt;strong&gt;&lt;code&gt;following-sibling-member::&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;preceding-sibling-member::&lt;/code&gt;&lt;/strong&gt; axes on this composite-context-item must raise a type error. (Obviously, these two axes are meaningful only for composite items, whose members are ordered, such as the array).&lt;/p&gt;
&lt;p&gt;If the composite-axis name is omitted from a composite-axis step, the default axis is &lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;5. Composite Axis Steps&lt;/h2&gt;
&lt;p&gt;A composite axis step completely resembles the ordinary axis step in XPath. It consists of three parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The composite axis  (&lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;descendant-member::&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;value-member::&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;node-member::&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;following-sibling-member::&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;preceding-sibling-member::&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;self::&lt;/code&gt;&lt;/strong&gt;, or the &lt;strong&gt;&lt;code&gt;descendant-member-or-self::&lt;/code&gt;&lt;/strong&gt; axis)&lt;/li&gt;
&lt;li&gt;The member test&lt;/li&gt;
&lt;li&gt;The composite-predicates&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;6. Member Tests&lt;/h2&gt;
&lt;p&gt;A member test is a condition on the key-name, index, or kind (&lt;em&gt;composite&lt;/em&gt;, &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;array&lt;/em&gt; or &lt;em&gt;value&lt;/em&gt;, &lt;em&gt;node&lt;/em&gt;, or (any) &lt;em&gt;member&lt;/em&gt;). A member test determines which members contained by a copmosite-axis are selected by a composite-step.&lt;/p&gt;
&lt;p&gt;As such, a member test is either an &lt;em&gt;identifier-test&lt;/em&gt; (key-name or index) or a &lt;em&gt;kind-test&lt;/em&gt; (&lt;em&gt;composite&lt;/em&gt;, &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;array&lt;/em&gt;,  &lt;em&gt;value&lt;/em&gt;, or &lt;em&gt;member&lt;/em&gt;)).&lt;/p&gt;
&lt;p&gt;Examples of member identifiers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A string specifies a name of a key, whose value will be selected. For example: &lt;strong&gt;&lt;code&gt;\child-member::X&lt;/code&gt;&lt;/strong&gt; selects from the composite-context-item the value corresponding to its key which has the name "X".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\child-member::3&lt;/code&gt;&lt;/strong&gt; selects from the composite-context-item the value of its 3rd member, if it is an array or the value corresponding to its key &lt;strong&gt;&lt;code&gt;3&lt;/code&gt;&lt;/strong&gt;, if it is a map.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;following-sibling-member::3&lt;/code&gt;&lt;/strong&gt; selects from the composite-content-item (which is most-likely an array) all of its members having index greater than 3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;preceding-sibling-member::3&lt;/code&gt;&lt;/strong&gt; selects from the composite-content-item (which is most-likely an array) all of its members having index less than 3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\descendant-member-or-self::X&lt;/code&gt;&lt;/strong&gt; selects from the composite-context-item (that must be a map) and from all its descendant-members, the values corresponding to their key named "X", if these descendents have a key named "X".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similarly &lt;strong&gt;&lt;code&gt;\5&lt;/code&gt;&lt;/strong&gt; is equivalent to &lt;strong&gt;&lt;code&gt;\child-member::5&lt;/code&gt;&lt;/strong&gt; and selects from the composite-context-item that is an array the value of its 5th member. This will also select the value corresponding to the key &lt;strong&gt;&lt;code&gt;5&lt;/code&gt;&lt;/strong&gt; from the composite-context-item if it is a map, because on the &lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt; axis both maps and arrays may be selected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\X&lt;/code&gt;&lt;/strong&gt; is equivalent to &lt;strong&gt;&lt;code&gt;\child-member::X&lt;/code&gt;&lt;/strong&gt; and selects from the composite-context-item (that must be a map), the value corresponding to its key which has the name "X".&lt;/p&gt;
&lt;p&gt;There is also the pseudo-operator &lt;code&gt;\\&lt;/code&gt; . This is an abbreviation for:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\descendant-member-or-self::member()\&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thus, &lt;strong&gt;&lt;code&gt;\\X&lt;/code&gt;&lt;/strong&gt; means: "(Deep) Select all members of the root-component that are the corresponding values of keys equal to 'X' "&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We may use a &lt;strong&gt;&lt;em&gt;kind test&lt;/em&gt;&lt;/strong&gt; as part of the previous example, if we want to select only a specific kind of members of the composite-context-item.
&lt;strong&gt;&lt;code&gt;\array()&lt;/code&gt;&lt;/strong&gt;  In this example, although we are on the &lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt; axis, we want to select only members of the composite-context-item that are arrays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\map()&lt;/code&gt;&lt;/strong&gt;  In this example, although we are on the &lt;strong&gt;&lt;code&gt;child-member::&lt;/code&gt;&lt;/strong&gt; axis, we want to select only members of the composite-context-item that are maps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\value()&lt;/code&gt;&lt;/strong&gt;  In this example we want to select only members of the composite-context-item that are not composite items themselves.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\node()&lt;/code&gt;&lt;/strong&gt;  In this example we want to select only members of the composite-context-item that are nodes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;\member()&lt;/code&gt;&lt;/strong&gt;  In this example we want to select all members of the composite-context-item, regardless whether they are maps, arrays, or values.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;6.1 Wildcards&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;*&lt;/code&gt;&lt;/strong&gt; wildcard can be used instead of a member identifier. Its meaning is to select all existing members of the composite-context-item, that is possibly selected by a specific axis and limited by a specific member kind-test.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\*&lt;/code&gt;&lt;/strong&gt;  (: (Shallow) Selects all members of the composite-context-item :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\map()\*&lt;/code&gt;&lt;/strong&gt;  (: Selects from the composite-context-item all values that correspond to a key of any map-member of the composite-context item :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\array()\*&lt;/code&gt;&lt;/strong&gt;  (: Selects from the composite-context-item all members of all its members that are arrays :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\\*&lt;/code&gt;&lt;/strong&gt;  (: (Deep) Select all members of the composite tree rooted by the root-component :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;7. Predicates&lt;/h2&gt;
&lt;p&gt;As defined above, a &lt;strong&gt;composite-step&lt;/strong&gt; has three parts: &lt;em&gt;composite-axis&lt;/em&gt; (can be omitted and then a default axis is used), &lt;em&gt;member test&lt;/em&gt;, and an optional &lt;em&gt;list of composite-predicates&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;&lt;em&gt;composite-predicate&lt;/em&gt;&lt;/strong&gt; in a composite-step is an expression used as a &lt;em&gt;filter&lt;/em&gt; applied on the members of the composite-context-item that are already selected by the axis and member tests of the axis step, and not filtered out by any preceding composite-predicates in the &lt;em&gt;composite-predicates-list&lt;/em&gt;. The composite-predicate may be any XPath expression and is written within double square brackets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\*[[3]]&lt;/code&gt;&lt;/strong&gt;  (: Selects any member of the composite-context-item, that is an array and has a 3rd member or any member of the composite-context-item, that is a map and has a key &lt;strong&gt;3&lt;/strong&gt; :)
This is a shorthand for: &lt;strong&gt;&lt;code&gt;\*[[array-size() ge 3 or 3 = keys()]]&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\array()[[3]]&lt;/code&gt;&lt;/strong&gt; (: Selects those array members of the composite-context-item that have a 3rd member :)
This is a shorthand for: &lt;strong&gt;&lt;code&gt;\*[[size() ge 3]]&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\*[[size() eq 7]]&lt;/code&gt;&lt;/strong&gt;  (: Selects those members whose array-size() or key-size() is exactly 7:)
This is a shorthand for: &lt;strong&gt;&lt;code&gt;\composite::*[[self::map() and key-size() eq 7 or self::array() and array-size() eq 7]]&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\*[[X]]&lt;/code&gt;&lt;/strong&gt;  (: Selects any member of the composite-context-item, that is a map and has a key &lt;strong&gt;X&lt;/strong&gt;  :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\map()[[X]]&lt;/code&gt;&lt;/strong&gt; (: Selects any map member of the composite-context-item, that has a key &lt;strong&gt;X&lt;/strong&gt;  :)
The above two expressions are a shorthand for: &lt;strong&gt;&lt;code&gt;\*[['X' = keys()]]&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\value()[[. gt 0]]&lt;/code&gt;&lt;/strong&gt; (: Selects any value (non-composite member) of the composite-context-item, that is a positive number :)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;8. Mixing CompPath and XPath expressions&lt;/h2&gt;
&lt;p&gt;CompPath and XPath expressions can be used as parts of a single expression:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A CompPath expression may be appended at the end of any XPath expression that produces a composite-object .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An XPath expression may be appended at the end of any CompPath expression. When doing this,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CompPathExpr / XPathExpr&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CompPathExpr\node::* / XPathExpr&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CompPathExpr ! XPathExpr&lt;/code&gt;&lt;/strong&gt;  (:  Note: also causes ordering and deduplication of the nodes! :)&lt;/p&gt;
&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;CompPathExpr\value::* !  XPathExpr&lt;/code&gt;&lt;/strong&gt;  (: Note: No ordering or deduplication, can be applied on any item, not just on nodes :)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A CompPath expression may be substituted for the expected argument of any XPath expression, for example:
&lt;strong&gt;&lt;code&gt;count(MyCompPathExpr)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any XPath expression that produces a composite item can be used as the composite-root for any CompPath expression&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $myBooks := 
&amp;lt;books&amp;gt;
 &amp;lt;book name="Tom Sawyer"&amp;gt;
   &amp;lt;author&amp;gt;Mark Twain&amp;lt;/author&amp;gt;
 &amp;lt;/book&amp;gt;
 &amp;lt;book name="Wuthering Heights"&amp;gt;
   &amp;lt;author&amp;gt;Emily Brontë&amp;lt;/author&amp;gt;
 &amp;lt;/book&amp;gt;
 &amp;lt;book name="Jane Eyre"&amp;gt;
   &amp;lt;author&amp;gt;Charlotte Brontë&amp;lt;/author&amp;gt;
 &amp;lt;/book&amp;gt;
 &amp;lt;book name="Adventures of Huckleberry Finn"&amp;gt;
   &amp;lt;author&amp;gt;Mark Twain&amp;lt;/author&amp;gt;
 &amp;lt;/book&amp;gt;
&amp;lt;/books&amp;gt;,
$map1 := map {"science-works": map{"Einstein": "Special Theory of relativity",
                                  "Darwin" : "On the Origin of Species"
                                 },
             "literature" : map{"19the Century": $myBooks}
            }
return
  $map1\literature\\*/book[author eq 'Mark Twain']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evaluating this mixed CompPath and XPath expression produces the correct result:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;&amp;lt;book name="Tom Sawyer"&amp;gt;
  &amp;lt;author&amp;gt;Mark Twain&amp;lt;/author&amp;gt;
&amp;lt;/book&amp;gt;
&amp;lt;book name="Adventures of Huckleberry Finn"&amp;gt;
  &amp;lt;author&amp;gt;Mark Twain&amp;lt;/author&amp;gt;
&amp;lt;/book&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #349 closed</title>
   <pubDate>Wed, 15 Feb 2023 18:04:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/349</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-349</guid>
   <description>&lt;div&gt;&lt;p&gt;Revert PR change; it doesn't work in this context&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #349 created</title>
   <pubDate>Wed, 15 Feb 2023 18:04:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/349</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-349</guid>
   <description>&lt;div&gt;&lt;p&gt;Revert PR change; it doesn't work in this context&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #348 closed</title>
   <pubDate>Wed, 15 Feb 2023 17:46:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/348</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-348</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to build PR with merge-base version of master&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #348 created</title>
   <pubDate>Wed, 15 Feb 2023 17:46:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/348</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-348</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to build PR with merge-base version of master&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR changes the CI &lt;code&gt;build-pr.yml&lt;/code&gt; script so that it checks out the version of master that the branch started from, rather than the current version of master, for building the specifications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pro: we won't get build failures when the current master can't build the old version (for example, when images have been removed)&lt;/li&gt;
&lt;li&gt;Con: we won't get any features from the current master, such as stylesheet updates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since failing builds are more troublesome than formatting issues, I'm going to say the pros outweigh the cons.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #347 created</title>
   <pubDate>Wed, 15 Feb 2023 14:06:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/347</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-347</guid>
   <description>&lt;div&gt;&lt;p&gt;Attempt to clarify fn:parse-uri and fn:build-uri&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #307&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #346 closed</title>
   <pubDate>Wed, 15 Feb 2023 10:11:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/346</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-346</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove dagger from record cross-references&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #346 created</title>
   <pubDate>Wed, 15 Feb 2023 10:10:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/346</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-346</guid>
   <description>&lt;div&gt;&lt;p&gt;Remove dagger from record cross-references&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Record types are better supported by the stylesheets so the dagger is simply a distraction.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #345 created</title>
   <pubDate>Tue, 14 Feb 2023 22:52:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/345</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-345</guid>
   <description>&lt;div&gt;&lt;p&gt;Missing rule for matching atomic values against atomic types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XPath §3.6.2 we have forgotten to state the obvious rule:&lt;/p&gt;
&lt;p&gt;"An Atomic Value AV matches a generalized atomic type GAT if the type annotation of AV (call it T) satisfies the condition derives-from(T, GAT)."&lt;/p&gt;
&lt;p&gt;At the same time it would a good idea to clarify whether locally-declared union and enum types fall within the definition of "schema types" (I think they should do so.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #342 closed</title>
   <pubDate>Tue, 14 Feb 2023 17:24:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/342</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-342</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue318 meta elements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 022 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 14 Feb 2023 17:12:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/02-14</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-02-14</guid>
</item><item>
   <title>Issue #338 closed</title>
   <pubDate>Thu, 9 Feb 2023 17:30:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/338</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-338</guid>
   <description>&lt;div&gt;&lt;p&gt;Add ednote per action QT4CG-016-02&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #344 created</title>
   <pubDate>Thu, 9 Feb 2023 17:06:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/344</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-344</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 22: allow "for"/"let" keyword to be repeated in XPath&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Addresses the proposal in issue 22 to allow repetition of the "let" or "for" keyword in a ForExpr or LetExpr. (It does not, however, allow "for" and "let" to be mixed).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #343 created</title>
   <pubDate>Thu, 9 Feb 2023 12:47:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/343</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-343</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO: $collation argument&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the function set of the XQFO current specification, the type of the &lt;code&gt;$collation&lt;/code&gt; parameter is sometimes &lt;code&gt;xs:string&lt;/code&gt; and sometimes &lt;code&gt;xs:string?&lt;/code&gt;, depending on the position of the parameter. Examples:&lt;/p&gt;
&lt;h4&gt;Mandatory&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:distinct-values($values as xs:anyAtomicType*, $collation as fn:default-collation()) as xs:anyAtomicType*
fn:index-of($input | as xs:anyAtomicType*, $search | as xs:anyAtomicType, $collation as xs:string) as xs:integer*
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Optional&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:sort($input as item()*, $collation as xs:string?, $key as function(item()) as xs:anyAtomicType*
fn:lowest($input as item()*, $collation as xs:string?, $key as function(item()) as xs:anyAtomicType*) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think we should always allow an empty sequence.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #342 created</title>
   <pubDate>Thu, 9 Feb 2023 12:27:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/342</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-342</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue318 meta elements&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Revises the rules for serializing meta elements to take account of new HTML5 syntax.&lt;/p&gt;
&lt;p&gt;Resolves issue #318&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #330 closed</title>
   <pubDate>Wed, 8 Feb 2023 08:35:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/330</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-330</guid>
   <description>&lt;div&gt;&lt;p&gt;Update fn:parse-html to apply review feedback.&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #341 created</title>
   <pubDate>Wed, 8 Feb 2023 01:50:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/341</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-341</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath] Error-free selection operator for maps or arrays, or finite-domain functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In March 2021 Jarno Elovirta raised on the &lt;strong&gt;&lt;em&gt;#general channel&lt;/em&gt;&lt;/strong&gt; of the XML.com Slack the problem that the existing map or array lookup operator "&lt;strong&gt;?&lt;/strong&gt;" prevents a free traversal of a nested mapp/array object. For example, this expression results in error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;[
  map {"k0": 1}, 
  map{"k0": [1, 2, 3]}
]  ?* ?("k0")  ?*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;[XPTY0004] Input of lookup operator must be map or array: 1.&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;There are three possible types of reaction to this problem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Do nothing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Relax the semantics of the map/array lookup operator "&lt;strong&gt;?&lt;/strong&gt;" so that it can be applied on items of non-map/non-array type and in such case produce the empty sequence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Introduce a similar operator to "&lt;strong&gt;?&lt;/strong&gt;" that will behave as it, but instead of producing an error when applied on items of non-map/non-array type it produces the empty sequence.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Obviously, we are not advocating the 1st choice above, or otherwise we wouldn't be raising any issue 😄&lt;/p&gt;
&lt;p&gt;Choice 2 could be implemented, but this would have a few drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it would bring a certain degree of backwards incompatibility&lt;/li&gt;
&lt;li&gt;"silently returning nothing" is really difficult to debug or even notice unexpected results, as pointed out by @michaelhkay&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;This proposal is to choose alternative 3. above&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Why is it better than the 2nd one?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No incompatibility can be introduced, as this is a new operator.&lt;/li&gt;
&lt;li&gt;The user has intentionally chosen this operator over the "?" operator, and this means that the user is well aware of the new, sometimes tricky to observe/explain/debug behavior, but the user doesn't mind these effects and is ready to deal with them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;By definition the operator &lt;strong&gt;"-&amp;gt;"&lt;/strong&gt; with left-hand-side any expression &lt;strong&gt;&lt;em&gt;E&lt;/em&gt;&lt;/strong&gt; and right-hand-side a literal string  &lt;strong&gt;&lt;em&gt;X&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;&lt;code&gt;E -&amp;gt; X&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;is lexically expanded to:&lt;/p&gt;
&lt;p&gt;   &lt;strong&gt;&lt;code&gt;E[. instance of map(*) or . instance of array(*)]?X &lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;With the original expression provided by Jarno Elovirta, but now using the &lt;strong&gt;"-&amp;gt;"&lt;/strong&gt; operator:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;[
  map {"k0": 1}, 
  map{"k0": [1, 2, 3]}
]  -&amp;gt;* -&amp;gt;("k0")  -&amp;gt;*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;its evaluation produces the expected result (all the values within just one of the leaves of the tree), and no error:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;1, 2, 3&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That is, &lt;strong&gt;&lt;code&gt;1 -&amp;gt;*&lt;/code&gt;&lt;/strong&gt;  produces the empty sequence and no error.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Of course, the above example can be rewritten to this equivalent XPath 3.0 expression and will get the wanted result, but literally no one, myself included, will ever write this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;[
 map {"k0": 1}, 
 map{"k0": [1, 2, 3]}
] [. instance of map(*) or . instance of array(*)]      ?*
           [. instance of map(*) or . instance of array(*)]      ?k0
                                [. instance of map(*) or . instance of array(*)]   ?*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/217432167-5f7fbff0-3d8d-48a3-a27d-5f62cb77c3dc.png" alt="image"/&gt;&lt;/p&gt;
&lt;h2&gt;Thus &lt;strong&gt;&lt;em&gt;&lt;code&gt;this is all about making it possible/feasible and empowering our users!&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #340 created</title>
   <pubDate>Tue, 7 Feb 2023 22:02:07 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/340</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-340</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:format-number: Specifying decimal format&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It would be nice if the decimal format for &lt;code&gt;fn:format-number&lt;/code&gt; could also be supplied via an options argument:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;format-number(
  value := 123.45,
  picture := '#.##0,00',
  format := map { 'decimal-separator': ',', 'grouping-separator': '.' }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If both &lt;code&gt;$decimal-format-name&lt;/code&gt; and &lt;code&gt;$format&lt;/code&gt; are supplied, an error would probably need to be raised.&lt;/p&gt;
&lt;p&gt;The current writing of the query above is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare decimal-format de decimal-separator = ',' grouping-separator = '.';

format-number(
  value := 123.45,
  picture := '#.##0,00',
  decimal-format-name': 'de'
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 021 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 7 Feb 2023 17:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/02-07</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-02-07</guid>
</item><item>
   <title>Issue #339 created</title>
   <pubDate>Tue, 7 Feb 2023 13:46:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/339</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-339</guid>
   <description>&lt;div&gt;&lt;p&gt;The constraints on document-uri are too...constraining&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XPath data model imposes the following constraints on the document-uri property:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the &lt;code&gt;document-uri&lt;/code&gt; is not the empty sequence, then the following constraint must hold: the node returned by evaluating &lt;code&gt;fn:doc()&lt;/code&gt; with the document-uri as its argument must return the document node that provided the value of the &lt;code&gt;document-uri&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;In other words, for any Document Node &lt;code&gt;$arg&lt;/code&gt;, either &lt;code&gt;fn:document-uri($arg)&lt;/code&gt; must return the empty sequence or &lt;code&gt;fn:doc(fn:document-uri($arg))&lt;/code&gt; must return &lt;code&gt;$arg&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This contraint turns out to be inconvenient whenever the larger environment doesn’t enforce a 1:1 mapping between URIs and documents.&lt;/p&gt;
&lt;p&gt;For example, in a browser context, a JavaScript function that returns different versions of the same document over time cannot identify those documents with the same document-uri.&lt;/p&gt;
&lt;p&gt;In XProc, a &lt;code&gt;p:add-attribute&lt;/code&gt; step that returns a copy of its input document with one additional attribute, cannot identify the output document with the same document-uri as the input document.&lt;/p&gt;
&lt;p&gt;Given that the document URI is often necessary to evaluate relative URI references within a document, the constraints imposed in the data model are too strict.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #338 created</title>
   <pubDate>Tue, 7 Feb 2023 13:33:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/338</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-338</guid>
   <description>&lt;div&gt;&lt;p&gt;Add ednote per action QT4CG-016-02&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This is a purely editorial change. Unless someone objects over the next few days, I'm just going to merge it in.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 021 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sat, 4 Feb 2023 15:09:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/02-07</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-02-07</guid>
</item><item>
   <title>Issue #337 created</title>
   <pubDate>Thu, 2 Feb 2023 00:52:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/337</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-337</guid>
   <description>&lt;div&gt;&lt;p&gt;Local union and enum types: and the definition of generalised atomic types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We need to review the proposed specs for local union and enum types, and decide whether or not to proceed with them.&lt;/p&gt;
&lt;p&gt;I note that the definitions of &lt;strong&gt;generalized atomic type&lt;/strong&gt; and &lt;strong&gt;pure union type&lt;/strong&gt; say they must be "schema-defined", which appears to exclude locally-defined union and enum types.&lt;/p&gt;
&lt;p&gt;I wonder if the definition of local enum types should be aligned more closely with an XSD type derived from xs:string by restricting with an enum facet. Now that we allow down-casting in the coercion rules, the objections to this seem to disappear.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cast&lt;/code&gt; and &lt;code&gt;castable&lt;/code&gt; should also probably pay more attention to these types.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #336 created</title>
   <pubDate>Wed, 1 Feb 2023 12:48:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/336</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-336</guid>
   <description>&lt;div&gt;&lt;p&gt;Action QT4CG-019-01 (type of $pattern in fn:tokenize())&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Also, update the fos:history record for a number of functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #308 closed</title>
   <pubDate>Wed, 1 Feb 2023 12:13:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/308</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-308</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve the legends in the diagrams&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #335 closed</title>
   <pubDate>Wed, 1 Feb 2023 12:13:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/335</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-335</guid>
   <description>&lt;div&gt;&lt;p&gt;Rework type hierarchy diagrams as styled lists&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #335 created</title>
   <pubDate>Wed, 1 Feb 2023 12:13:50 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/335</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-335</guid>
   <description>&lt;div&gt;&lt;p&gt;Rework type hierarchy diagrams as styled lists&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #308&lt;/p&gt;
&lt;p&gt;This proposal was accepted at meeting 020 on 31 January 2023.&lt;/p&gt;
&lt;p&gt;The PR won't format correctly because there are style changes, so I'm just going to merge this. I have fixed the diagrams in both the data model specification and f&amp;amp;o.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #324 closed</title>
   <pubDate>Wed, 1 Feb 2023 10:17:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/324</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-324</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposed syntax and semantics for string templates&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #326 closed</title>
   <pubDate>Wed, 1 Feb 2023 10:17:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/326</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-326</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 205: make support for higher-order functions mandatory&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #319 closed</title>
   <pubDate>Wed, 1 Feb 2023 10:17:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/319</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-319</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 221: op:same-key becomes fn:atomic-equal&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #334 created</title>
   <pubDate>Wed, 1 Feb 2023 09:17:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/334</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-334</guid>
   <description>&lt;div&gt;&lt;p&gt;Transient properties: a new approach to deep selection and update in maps and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;After exploring many alternatives, I have come to the conclusion that we can't solve the problem of deep navigation and transformation of JSON structures without a data model change.&lt;/p&gt;
&lt;p&gt;Most of the problems boil down to this: JSON trees do not have parent pointers, therefore after navigating down to a leaf node of the tree, we cannot get any information from higher up the tree. The solution to this (the "zipper" model) is to retain transient information about how a particular node in the tree was reached, so that we can retrace our steps and revisit nodes that were passed en route.&lt;/p&gt;
&lt;p&gt;The change I propose is quite minor, but powerful: Any XDM value can be augmented with a set of transient properties represented as a set of key-value pairs. These properties are ignored (and typically dropped) by all operations on a value, except where otherwise specified. For the purpose of exposition, I'll use the syntax &lt;code&gt;$value¶name&lt;/code&gt; to refer to the transient &lt;code&gt;name&lt;/code&gt; property of &lt;code&gt;$value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We'll change the semantics of &lt;code&gt;map:get()&lt;/code&gt; and &lt;code&gt;array:get()&lt;/code&gt;, and the associated lookup operators, so that the resulting values have transient properties indicating how they were selected. For example, given&lt;/p&gt;
&lt;p&gt;&lt;code&gt;let $name := $person?firstName&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;the resulting value (perhaps the string "Michael") will be augmented with transient properties&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;¶parent - the map from which the value was selected (retaining its own transient properties if any)&lt;/li&gt;
&lt;li&gt;¶key - the key used to make the selection, here "firstName"&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and derived properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;¶ancestors - the transitive closure of ¶parent&lt;/li&gt;
&lt;li&gt;¶root - the last ¶ancestor&lt;/li&gt;
&lt;li&gt;¶path - a string representation of the path used to select the value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can also define other "downward selection" operations such as &lt;code&gt;map:find&lt;/code&gt;, and &lt;code&gt;array:foot&lt;/code&gt; to retain these transient properties. So for example &lt;code&gt;map:find($json, 'firstname')[.='Michael']¶parent?surname&lt;/code&gt; now finds the surnames of anyone named 'Michael', at any depth of the tree.&lt;/p&gt;
&lt;p&gt;If we turn back to the use cases in my 2016 paper on transforming JSON&lt;/p&gt;
&lt;p&gt;https://www.saxonica.com/papers/xmlprague-2016mhk.pdf&lt;/p&gt;
&lt;p&gt;The first use case (bulk update) relied on matching items expressed in XML as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match="map[array[@key='tags']/string='ice']/number[@key='price']/text()"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which couldn't be done in JSON because of the inability to match based on ancestor context. With the new transient properties we can match this as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;match="type(xs:integer)[¶key = 'price'][¶parent?tags?* = 'ice']"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the second use case (hierarchic inversion), we can again get properties of parent or ancestor maps&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$students ! map:put("course", ¶parent?name)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I think we can also use this to define deep update operations. But I'll leave that investigation until later.&lt;/p&gt;
&lt;p&gt;Note: transient properties potentially have many other applications, for example we might use them to solve our problems with &lt;code&gt;document-uri()&lt;/code&gt;. But exploring that would be a distraction here. The nice thing about transient properties is that they give a lot of potential for augmenting existing functionality with full backwards compatibility, because we can define existing operations to return results with additional transient properties that all existing operations will ignore. If we were so minded, for example, we could have different functions/operators return "quiet NaN" and "signalling NaN" by adding a transient property to the NaN value returned.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #333 created</title>
   <pubDate>Wed, 1 Feb 2023 00:34:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/333</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-333</guid>
   <description>&lt;div&gt;&lt;p&gt;Equality of function items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The question of equality of function items arises in the discussion of determinism of functions and memo functions in XSLT - see F&amp;amp;O 3.1 section 1.7.4, and came up again today in the context of fn:deep-equal.&lt;/p&gt;
&lt;p&gt;1.7.4 makes a brave attempt to describe situations under which two functions are "identical", though leaving implementations room for flexibility. I think we can build on this and improve it, by describing more situations in which the result is predictable.&lt;/p&gt;
&lt;p&gt;The data model describes the properties of a function item, and we can say that two function items are equivalent if all their properties are the same.&lt;/p&gt;
&lt;p&gt;The properties that cause problems are the "implementation" and the "closure", and in both cases I think we can find ways of doing a comparison.&lt;/p&gt;
&lt;p&gt;For the implementation, we can define this by reference to the way in which the implementation property is set. For function items constructed by reference to static functions (e.g. &lt;code&gt;my:func#3&lt;/code&gt; or &lt;code&gt;function-lookup(my:func, 3)&lt;/code&gt;) then they have the same implementation if and only if they are constructed by reference to the same static function. Similarly for function items constructed by evaluating an inline function expression. Other ways of constructing a function item, such as partial application, essentially create a new function with the same implementation as an existing function and a different closure.&lt;/p&gt;
&lt;p&gt;For the closure (ignoring for the moment functions that include parts of the dynamic context in their closure), this is essentially just a set of variable bindings and it's not too difficult to say that functions are identical if these sets of variable bindings are identical.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #332 created</title>
   <pubDate>Tue, 31 Jan 2023 18:51:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/332</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-332</guid>
   <description>&lt;div&gt;&lt;p&gt;Add a namespace uris option to fn:path&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The output of &lt;code&gt;fn;path&lt;/code&gt; using namespaces is very verbose as it is specified to use the &lt;code&gt;Q{uri}name&lt;/code&gt; syntax. It would be useful if it was extended to take a namespace prefix to uri map.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a second &lt;code&gt;$namespaces&lt;/code&gt; parameter that has the type &lt;code&gt;map(union(xs:NCName, enum('')), xs:anyURI)&lt;/code&gt; (the same as fn:in-scope-namespaces) -- this will have a default value of &lt;code&gt;map{}&lt;/code&gt; to preserve the existing behaviour.&lt;/li&gt;
&lt;li&gt;If the namespace uri is in the map, use the given prefix. If that prefix is "" then just use the local name.&lt;/li&gt;
&lt;li&gt;If the namespace uri is not in the map, use the &lt;code&gt;Q{uri}name&lt;/code&gt; syntax.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This allows for things like &lt;code&gt;fn:path($e, namespaces := fn:in-scope-namespaces())&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #331 created</title>
   <pubDate>Tue, 31 Jan 2023 18:43:14 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/331</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-331</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend fn:path to support arrays and maps.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently, &lt;code&gt;fn:path&lt;/code&gt; is defined for nodes. This means it is not possible to use it with arrays or maps (e.g. to determine the path to a JSON item when a comparison fails).&lt;/p&gt;
&lt;p&gt;As such, I recommend:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;changing the type to &lt;code&gt;item()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the value is a node use the current logic.&lt;/li&gt;
&lt;li&gt;If the value is in an array, use &lt;code&gt;?n&lt;/code&gt; where n is the nth item of the array where the item is located.&lt;/li&gt;
&lt;li&gt;If the value is in a map, use &lt;code&gt;?name&lt;/code&gt; or &lt;code&gt;?"name"&lt;/code&gt; where name is the key name of the map where the item is located.&lt;/li&gt;
&lt;li&gt;If the value is an atomic item, or the root of a map/array structure, use &lt;code&gt;.&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example: &lt;code&gt;.?4?user?name&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 020 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 31 Jan 2023 17:12:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/01-31</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-01-31</guid>
</item><item>
   <title>Pull request #330 created</title>
   <pubDate>Tue, 31 Jan 2023 12:56:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/330</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-330</guid>
   <description>&lt;div&gt;&lt;p&gt;Update fn:parse-html to apply review feedback.&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR applies the following review comments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] QT4CG-016-03: RD to add a note clarifying “known character encoding”&lt;/li&gt;
&lt;li&gt;[x] QT4CG-016-04: RD to add a note clarifying the “&lt;em&gt;”/”&lt;/em&gt;” html/version combination&lt;/li&gt;
&lt;li&gt;[x] QT4CG-016-05: RD to add a “todo” noting the dependency on keyword arguments&lt;/li&gt;
&lt;li&gt;[x] QT4CG-016-06: RD to reword the introduction to mapping to clarify who’s doing the mapping&lt;/li&gt;
&lt;li&gt;[ ] QT4CG-016-08: RD to clarify how namespace comparisons are performed.&lt;/li&gt;
&lt;li&gt;[x] QT4CG-016-09: RD to add a note stating that the local name should always be lowercase&lt;/li&gt;
&lt;li&gt;[x] QT4CG-016-10: RD to consider how to clarify parsed entity parsing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #329 created</title>
   <pubDate>Mon, 30 Jan 2023 11:45:03 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/329</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-329</guid>
   <description>&lt;div&gt;&lt;p&gt;Keyword parameters: Error codes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I’ve read the current specification twice, and I have checked the existing qt4 tests, but I’m still confused by the exact meaning of the new error codes for keyword arguments, &lt;code&gt;XPST0141&lt;/code&gt; and &lt;code&gt;XPST0142&lt;/code&gt;. Things are getting particularly tricky if we consider partial function applications.&lt;/p&gt;
&lt;p&gt;My proposal would be to simplify the current approach and:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;use the existing error code &lt;code&gt;XPST0017&lt;/code&gt; for all cases in which a function cannot be chosen as the available arguments (both positional and keyword-based) don’t match the function definition, and&lt;/li&gt;
&lt;li&gt;only raise a new error code (&lt;code&gt;XPST0141&lt;/code&gt;, possibly) if a keyword argument has been specified more than once (as this can be done without checking the function definitions).&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #328 created</title>
   <pubDate>Mon, 30 Jan 2023 10:05:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/328</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-328</guid>
   <description>&lt;div&gt;&lt;p&gt;Switch Cases: Lift single-item restriction on operands&lt;/p&gt;&lt;div class="markup"&gt;&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.w3.org/TR/xquery-31/#id-switch"&gt;XQuery switch cases&lt;/a&gt; have a peculiar restriction: The operand of a single case must yield an empty sequence or a single item. There seem to be no (obvious) reasons why this restriction exists, so I believe we should lift it and allow arbitrary sequences.&lt;/p&gt;
&lt;p&gt;A similar extension is planned for Java 12 (&lt;a href="http://openjdk.java.net/jeps/325"&gt;JEP 325: Switch Expressions&lt;/a&gt;). The required changes in XQuery are simpler, though, as the 3.1 grammar already supports arbitrary expressions as operands.&lt;/p&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;switch($value)
  case 1
  case 2
  case 3
  case 4
  case 5
    return 'small'
  default
    return 'big'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Proposed syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;switch($value)
  case 1 to 5
    return 'small'
  default
    return 'big'
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Required Changes&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://www.w3.org/TR/xquery-31/#id-switch"&gt;current matching rules&lt;/a&gt; could be rephrased as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The SwitchCaseOperand is evaluated.&lt;/li&gt;
&lt;li&gt;The resulting value is atomized.&lt;/li&gt;
&lt;li&gt;The case matches if the value is empty and if the value of the switch expression is empty as well.&lt;/li&gt;
&lt;li&gt;Otherwise, the atomized value of the switch operand expression is compared with each item of the atomized value of the SwitchCaseOperand using &lt;code&gt;fn:deep-equal&lt;/code&gt;, with the default collation from the static context.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Original Proposal: https://github.com/expath/xpath-ng/pull/12&lt;/li&gt;
&lt;li&gt;Discussion on Slack: https://xmlcom.slack.com/archives/C011NLXE4DU/p1675006336963479&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 020 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 30 Jan 2023 08:47:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/01-31</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-01-31</guid>
</item><item>
   <title>Issue #327 created</title>
   <pubDate>Mon, 30 Jan 2023 08:42:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/327</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-327</guid>
   <description>&lt;div&gt;&lt;p&gt;Tokenisation&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The rule in A.2&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When tokenizing, the longest possible match that is consistent with the EBNF is used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;needs clarifying. It could be read as suggesting that if taking the longest match turns out to lead to a syntax error, the tokenisation should be re-attempted using a shorter match. I don't think that has ever been intended. So what exactly does the qualifier "that is consistent with the EBNF" actually mean?&lt;/p&gt;
&lt;p&gt;Possibly related, A.2.2 Terminal Delimitation states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Terminal symbols that are not used exclusively in [/* ws: explicit */] productions are of two kinds: delimiting and non-delimiting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But (at least in the XQuery version) the list of delimiting tokens includes a number that are indeed used exclusively in ws:explicit productions, for example a number of tokens containing back-ticks, and &lt;code&gt;]]&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I think we need to be clearer that tokens used in ws:explicit productions are recognised only when parsing the production that uses them. For example given the expression &lt;code&gt;A[B[C]]&amp;gt;3&lt;/code&gt;, we should not recognise &lt;code&gt;]]&amp;gt;&lt;/code&gt; as a token under the longest-token rule. I think that's probably what the "consistent with the EBNF" rule is intended to convey.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #326 created</title>
   <pubDate>Sun, 29 Jan 2023 22:45:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/326</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-326</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 205: make support for higher-order functions mandatory&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #325 created</title>
   <pubDate>Sun, 29 Jan 2023 22:03:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/325</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-325</guid>
   <description>&lt;div&gt;&lt;p&gt;Operator precedence table needs updating&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;otherwise&lt;/code&gt; and &lt;code&gt;-&amp;gt;&lt;/code&gt; operators (and maybe others) are missing from the non-normative precedence table in Appendix A.4.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #324 created</title>
   <pubDate>Sun, 29 Jan 2023 18:23:31 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/324</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-324</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposed syntax and semantics for string templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See issue #58.&lt;/p&gt;
&lt;p&gt;I would recommend reviewing the XQuery version of the spec first, since it contains additional notes contrasting string templates and the existing string constructors. The section on string constructors has moved, but is unchanged except for the addition of this note.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #323 created</title>
   <pubDate>Fri, 27 Jan 2023 21:56:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/323</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-323</guid>
   <description>&lt;div&gt;&lt;p&gt;add select attribute to xsl:text&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Although xsl:text select="socks" would be the same as xsl:value-of select="socks" in implementation terms, users of XSLT 2 and later, even people who have been using XSLT 2 or 3 for some time, are often surprised to learn that xsl:value-of makes a text node, and that they need to use xsl:sequence to return something else.&lt;/p&gt;
&lt;p&gt;So it'd be great to have them use xsl:text instead of xsl:value-of, where text nodes are wanted, because then introducing xsl:sequence is a small step.&lt;/p&gt;
&lt;p&gt;Of course, beginners also often use value-of where they should be using apply-templates, e.g. to handle mixed content! But again, using xsl:text reduces that temptation.&lt;/p&gt;
&lt;p&gt;We do have value templates now, &lt;a href="xsl:text"&gt;xsl:text&lt;/a&gt;{ .... }&amp;lt;/xsl:text&amp;gt;, which mitigates the need slightly, but i think only slightly, because the select= analogy is very compelling.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #322 created</title>
   <pubDate>Thu, 26 Jan 2023 10:10:12 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/322</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-322</guid>
   <description>&lt;div&gt;&lt;p&gt;Map construction in XSLT: xsl:record instruction&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Constructing maps in XSLT often involves code rather like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;xsl:map&amp;gt;
               &amp;lt;xsl:map-entry key="'author'" select="string(AUTHOR)"/&amp;gt;
               &amp;lt;xsl:map-entry key="'title'" select="string(TITLE)"/&amp;gt;
               &amp;lt;xsl:map-entry key="'price'" select="xs:decimal(PRICE)"/&amp;gt;
               &amp;lt;xsl:map-entry key="'publisher'" select="string(../@name)"/&amp;gt;
           &amp;lt;/xsl:map&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The alternative using XPath is also rather ugly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:sequence select="map{'author': string(AUTHOR),
                                                 'title':string(TITLE), 
                                                 'price': xs:decimal(PRICE), 
                                                 'publisher':string(../@name)}"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(the fact  that it is creating a map doesn't stand out; the &lt;code&gt;xsl:sequence&lt;/code&gt; is a distraction because there's no sequence involved; and many users dislike long multi-line XPath expressions because of formatting problems in their editing tools)&lt;/p&gt;
&lt;p&gt;I propose a new instruction xsl:record which allows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;xsl:record author="string(AUTHOR)"
                                title="string(TITLE)" 
                                price="xs:decimal(PRICE)" 
                                publisher="string(../@name)"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is rather like literal result elements in that the attributes are user-defined rather than system-defined. Unlike LREs, the values are general expressions rather than AVTs, because the values are not necessarily strings. The instruction can only be used where the keys (field names) take the form of NCNames.&lt;/p&gt;
&lt;p&gt;If variable entries are required, or entries whose keys are not NCNames, they can appear as child instructions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;            &amp;lt;xsl:record author="string(AUTHOR)"
                                title="string(TITLE)" 
                                price="xs:decimal(PRICE)" 
                                publisher="string(../@name)"&amp;gt;
              &amp;lt;xsl:if test="@private"&amp;gt;
                  &amp;lt;xsl:map-entry name="'private entry'" select="true()"/&amp;gt;
              &amp;lt;/xsl:if&amp;gt;
          &amp;lt;/xsl:record&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Follow the tradition of LREs, duplicates are resolved as "last one wins".&lt;/p&gt;
&lt;p&gt;If "standard attributes" such as &lt;code&gt;[xsl:]version&lt;/code&gt; are required, they must be in the XSLT namespace, as with LREs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #321 created</title>
   <pubDate>Thu, 26 Jan 2023 04:12:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/321</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-321</guid>
   <description>&lt;div&gt;&lt;p&gt;relax $input in fn:serialize&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Relevant specifications:
https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-serialize&lt;/p&gt;
&lt;p&gt;Would it be possible to relax the strictures on &lt;code&gt;$input&lt;/code&gt; (first parameter) of &lt;code&gt;fn:serialize()&lt;/code&gt;?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The specifications do not explicitly forbid &lt;code&gt;map(*)&lt;/code&gt; or &lt;code&gt;array(*)&lt;/code&gt; as input, but in practice, when these are supplied, Saxon rejects them. Developers (or at least this one) who work with arrays and maps often need to render them in string output or messages, if only for diagnostics. If there is something really prohibitively wrong with those two items as input to &lt;code&gt;fn:serialize()&lt;/code&gt;, then the specifications should say so.&lt;/li&gt;
&lt;li&gt;Attributes are forbidden, but it is unclear why. They get serialized fine in the context of a parent, why not alone?&lt;/li&gt;
&lt;li&gt;Namespace nodes are forbidden; see previous point.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(No doubt there must have been discussion on points 2-3, but the rationale is not clear from the specs.)&lt;/p&gt;
&lt;p&gt;Perhaps the question is that the details of what the serialization should look like is contestable. I think the answer there is simply, pick one. I think we'll happily live with whatever is chosen.&lt;/p&gt;
&lt;p&gt;For the serialization of maps and arrays, I'll point as one possible model my &lt;a href="https://github.com/textalign/TAN-2021/blob/9d2215e36da1f64bddad9daddfc5aa2242e17c81/functions/maps/TAN-fn-maps-extended.xsl#L58"&gt;tan:map-to-xml()&lt;/a&gt; and &lt;a href="https://github.com/textalign/TAN-2021/blob/9d2215e36da1f64bddad9daddfc5aa2242e17c81/functions/arrays/TAN-fn-arrays-extended.xsl#L66"&gt;tan:array-to-xml()&lt;/a&gt;, which have been indispensable for daily troubleshooting.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #320 created</title>
   <pubDate>Wed, 25 Jan 2023 18:58:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/320</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-320</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 98 - add options parameter to fn:deep-equal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This proposal adds an options parameter to fn:deep-equal, giving much more detailed control over how the comparison is performed (while remaining backwards compatible by default).&lt;/p&gt;
&lt;p&gt;This proposal is a first draft and I would request careful review, it's not one to pass through "on the nod".&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #319 created</title>
   <pubDate>Wed, 25 Jan 2023 16:20:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/319</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-319</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 221: op:same-key becomes fn:atomic-equal&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The proposal renames op:same-key as fn:atomic-equal, thus making it directly available to applications.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #318 created</title>
   <pubDate>Wed, 25 Jan 2023 11:36:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/318</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-318</guid>
   <description>&lt;div&gt;&lt;p&gt;Serialization HTML/XHTML output methods: meta elements and the charset attribute&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;HTML5 introduces the ability to write&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;meta charset="utf-8"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;in place of&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The serialization spec (for HTML and XHTML output methods) ignores this.&lt;/p&gt;
&lt;p&gt;(a) it requires the serializer to add a &lt;code&gt;meta&lt;/code&gt; element in the second form rather than the first.&lt;/p&gt;
&lt;p&gt;(b) when removing existing &lt;code&gt;meta&lt;/code&gt; elements, it requires the second form to be deleted, but not the first. This may result in invalid (X)HTML in which both elements are present.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #309 closed</title>
   <pubDate>Tue, 24 Jan 2023 17:20:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/309</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-309</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop ternary conditionals, as agreed on 2023-01-17&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #310 closed</title>
   <pubDate>Tue, 24 Jan 2023 17:20:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/310</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-310</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix outstanding issues from PR 304&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #312 closed</title>
   <pubDate>Tue, 24 Jan 2023 17:20:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/312</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-312</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor editorial improvements&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #313 closed</title>
   <pubDate>Tue, 24 Jan 2023 17:19:16 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/313</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-313</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 294: fn:remove()&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #317 created</title>
   <pubDate>Tue, 24 Jan 2023 17:16:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/317</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-317</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:format-integer: $lang → $language ?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;A minor inconsistency in the XQFO specification: The third parameter of &lt;code&gt;fn:format-integer&lt;/code&gt; is named &lt;code&gt;$lang&lt;/code&gt;…&lt;/p&gt;
&lt;p&gt;https://qt4cg.org/specifications/xpath-functions-40/Overview-diff.html#func-format-integer&lt;/p&gt;
&lt;p&gt;…whereas all other language parameters are named &lt;code&gt;$language&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 019 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 24 Jan 2023 17:11:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/01-24</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-01-24</guid>
</item><item>
   <title>Issue #316 created</title>
   <pubDate>Mon, 23 Jan 2023 16:23:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/316</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-316</guid>
   <description>&lt;div&gt;&lt;p&gt;Function fn:differences&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I didn't see any issues thread devoted &lt;code&gt;fn:differences()&lt;/code&gt;, so am opening this one. Please respond with xrefs to anything relevant.&lt;/p&gt;
&lt;p&gt;Draft here:
https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-differences&lt;/p&gt;
&lt;p&gt;IMO, this function seems overly complicated for both users and implementors. The specs provide difficult reading. But it is the first function to try to address the desideratum for differencing. Something like it is needed methinks.&lt;/p&gt;
&lt;p&gt;My suggestion would be to simplify the function as a straightforward string comparison, i.e., change the signature to something like &lt;code&gt;fn:differences($input1 as xs:string, $input2 as xs:string) as OUTPUT&lt;/code&gt; where &lt;code&gt;OUTPUT&lt;/code&gt; is either a tree structure (like the output of &lt;code&gt;fn:analyze-string()&lt;/code&gt;) or a sequence of records (e.g., &lt;code&gt;(is-in-1 as xs:boolean, is-in-2 as xs:boolean, fragment as xs:string)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Such a change would make the function more tractable for both users and implementers. The user, would need to cast each sequence to a string, and in so doing will be able to (be compelled to) make fine-grained decisions on things such as normalization. Processor implementers have far simpler input, and they can choose the difference algorithm that makes best sense at the moment.&lt;/p&gt;
&lt;p&gt;One counterargument might be that the resultant output would be difficult to correlate to the original sequences. Ostensibly, one wants to do things such as decide whether to drop certain items in sequence 1 or sequence 2. My response is that the current draft results in output that suffers from the same problem. Navigating the map to correlate it to the original sequence sounds daunting. With my suggestion, there are ways around this, through auxiliary functions or arity expansions that normalize the output.&lt;/p&gt;
&lt;p&gt;But I don't want to get postprocessing output here, which would be tangential to the main question, i.e., how &lt;code&gt;fn:differences()&lt;/code&gt; should be constructed in a way conducive to both users and implementers.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #311 closed</title>
   <pubDate>Mon, 23 Jan 2023 11:46:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/311</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-311</guid>
   <description>&lt;div&gt;&lt;p&gt;Stylesheet fix to mark optional fields in record definitions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #315 created</title>
   <pubDate>Wed, 18 Jan 2023 14:58:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/315</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-315</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:transform inconsistency: initial-mode&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The &lt;code&gt;fn:transform&lt;/code&gt; specification in F+O says that if no initial-mode is supplied, the unnamed mode is used.&lt;/p&gt;
&lt;p&gt;The XSLT 3.0 specification says that if no initial mode is supplied, then the default mode is used if one has been specified, or the unnamed mode is used if not.&lt;/p&gt;
&lt;p&gt;I think the XSLT 3.0 spec should win here: it makes more sense if a default has been declared that it should actually be used.&lt;/p&gt;
&lt;p&gt;(Thanks to Amanda Galtman for pointing this out.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #314 created</title>
   <pubDate>Wed, 18 Jan 2023 09:24:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/314</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-314</guid>
   <description>&lt;div&gt;&lt;p&gt;Basic Operations on Maps and Arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;Manipulating Arrays and Maps&lt;/h1&gt;
&lt;p&gt;This is an outline of proposed new facilities designed to make processing of maps and arrays easier. The basic facilities needed for transformation of maps and arrays are the ability to decompose them into their parts, manipulate the parts, and the compose new arrays and maps from these parts.&lt;/p&gt;
&lt;p&gt;Further background is in my 2022 Balisage paper, https://balisage.net/Proceedings/vol27/html/Kay01/BalisageVol27-Kay01.html&lt;/p&gt;
&lt;p&gt;This proposal considers only the "shallow" operations on maps and arrays. Further proposals for deep search and update of nested structures are to be expected.&lt;/p&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;A map entry is an item used to represent a key-value pair in a map; it is an item of type &lt;code&gt;record(key as xs:anyAtomicType, value as item()*)&lt;/code&gt;, aliased in this proposal as &lt;code&gt;type(map-entry)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note: &lt;em&gt;an alternative representation for key-value pairs is as a singleton map, and that's the representation used by the existing map:entry() function and by the xsl:map-entry instruction. A representation as &lt;code&gt;record(key, value)&lt;/code&gt; is rather more convenient to enable extraction of the key and value, but does create some compatibility issues...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An array entry is an item used to represent a member of an array; it is an item of type &lt;code&gt;record(value as item()*)&lt;/code&gt;, aliased in this proposal as &lt;code&gt;type(array-entry)&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Decomposing Maps and Arrays&lt;/h2&gt;
&lt;p&gt;The function &lt;code&gt;map:entries($map)&lt;/code&gt; returns a sequence of map entries, in unpredictable order, representing the contents of the supplied map. It is equivalent to &lt;code&gt;map:for-each($map, -&amp;gt;($k, $v){map:entry($k, $v)})&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;array:entries($array)&lt;/code&gt; returns a sequence of array entries, in array order, representing the members of the supplied array. It is equivalent to &lt;code&gt;array:for-each($array, -&amp;gt;($v){array:entry($v)})&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Constructing Maps and Arrays&lt;/h2&gt;
&lt;p&gt;The function &lt;code&gt;map:of($entries as type(map-entry)*) as map(*)&lt;/code&gt; constructs a map from a sequence of map entries. A second parameter, &lt;code&gt;$options&lt;/code&gt;, is available to control handling of duplicates, as with &lt;code&gt;map:merge()&lt;/code&gt;. The function is equivalent to &lt;code&gt;map:merge($entries!map{'key':?key, 'value':?value})&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;array:of($entries as type(array-entry)*) as array(*)&lt;/code&gt; constructs an array from a sequence of array entries. It is equivalent to &lt;code&gt;array:fold-left($entries, [], array:append#2)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;map:entry($key, $value) as type(map-entry)&lt;/code&gt; is equivalent to &lt;code&gt;map{'key':$key, 'value':$value}&lt;/code&gt;. &lt;em&gt;Problem: we already have a function map:entry() in 3.1 that does something different. Need to change the terminology...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;array:entry($value) as type(array-entry)&lt;/code&gt; is equivalent to &lt;code&gt;map{'value':$value}&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Filtering Maps and Arrays&lt;/h2&gt;
&lt;p&gt;The construct &lt;code&gt;$map?[PREDICATE]&lt;/code&gt; is equivalent to &lt;code&gt;map:of(map:entries($map)[PREDICATE])&lt;/code&gt;. For example, given a map in which the keys are dates, &lt;code&gt;$map?[year-from-date(?key)=2023]&lt;/code&gt; returns a map containing those entries in which the key is a date in 2023.&lt;/p&gt;
&lt;p&gt;The construct &lt;code&gt;$array?[PREDICATE]&lt;/code&gt; is equivalent to &lt;code&gt;array:of(array:entries($array)[PREDICATE])&lt;/code&gt;. For example, &lt;code&gt;$array?[1]&lt;/code&gt; selects the first item in the array (as a single-member array), while &lt;code&gt;$array?[exists(?value)]&lt;/code&gt; returns an array containing all those entries in the input array that are not empty. If &lt;code&gt;$array&lt;/code&gt; is an array of maps, then &lt;code&gt;$array?[?value?name='John']&lt;/code&gt; selects those members of the array that are maps having &lt;code&gt;?name='John'&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Mapping Maps and Arrays&lt;/h2&gt;
&lt;p&gt;The construct &lt;code&gt;$map!!EXPR&lt;/code&gt; evaluates &lt;code&gt;EXPR&lt;/code&gt; once for each entry in &lt;code&gt;$map&lt;/code&gt; and returns the result as a flattened sequence. For example &lt;code&gt;map:of($map!!map:entry(?key, ?value+1))&lt;/code&gt; returns a map in which each value has been incremented by one.&lt;/p&gt;
&lt;p&gt;The construct &lt;code&gt;$array!!EXPR&lt;/code&gt; evaluates &lt;code&gt;EXPR&lt;/code&gt; once for each entry in &lt;code&gt;$array&lt;/code&gt;, and returns the result as a flattened sequence. For example, &lt;code&gt;array:of($array!!array:entry(?value+1))&lt;/code&gt; returns an array in which every value has been incremented by one.&lt;/p&gt;
&lt;h2&gt;FLWOR Expressions&lt;/h2&gt;
&lt;p&gt;The for-member clause &lt;code&gt;for member $m in $array&lt;/code&gt; is equivalent to &lt;code&gt;for $sys:var in array:entries($array) let $m := $sys:var?value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The for-entry clause &lt;code&gt;for entry ($k, $v) in $map&lt;/code&gt; is equivalent to &lt;code&gt;for $sys:var in map:entries($map) let $k := $sys:var?key, $v := $sys:var?value&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;XSLT&lt;/h2&gt;
&lt;p&gt;Iteration over maps and arrays is achieved using &lt;code&gt;&amp;lt;xsl:for-each select="array:entries()"&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;xsl:for-each select="map:entries()"&amp;gt;&lt;/code&gt; directly.&lt;/p&gt;
&lt;p&gt;Construction of maps uses the existing instructions &lt;code&gt;&amp;lt;xsl:map&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;xsl:map-entry&amp;gt;&lt;/code&gt;. There is an inconvenience here in that the &lt;code&gt;&amp;lt;xsl:map-entry&amp;gt;&lt;/code&gt; instruction returns a singleton map (&lt;code&gt;map{key:value}&lt;/code&gt;) rather than a map entry as defined in this proposal (&lt;code&gt;map{'key':key, 'value':value}&lt;/code&gt;)..&lt;/p&gt;
&lt;p&gt;Construction of arrays uses the new instructions &lt;code&gt;&amp;lt;xsl:array&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;xsl:array-entry&amp;gt;&lt;/code&gt;. The &lt;code&gt;xsl:array-entry&lt;/code&gt; instruction is defined to construct an array entry as defined in this proposal.&lt;/p&gt;
&lt;h2&gt;Use Cases&lt;/h2&gt;
&lt;p&gt;To be supplied.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #313 created</title>
   <pubDate>Tue, 17 Jan 2023 22:53:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/313</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-313</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue 294: fn:remove()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Allow remove() to remove several items, aligning it with array:remove() and map:remove()&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #312 created</title>
   <pubDate>Tue, 17 Jan 2023 22:25:54 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/312</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-312</guid>
   <description>&lt;div&gt;&lt;p&gt;Minor editorial improvements&lt;/p&gt;&lt;div class="markup"&gt;&lt;ul&gt;
&lt;li&gt;Issue 300 (clarification about results being normalized)&lt;/li&gt;
&lt;li&gt;Action QT4CG-018-02 (explaining signature notation)&lt;/li&gt;
&lt;li&gt;Action QT4CG-018-04 (explaining numeric predicates on ancestor unions)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #311 created</title>
   <pubDate>Tue, 17 Jan 2023 21:39:32 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/311</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-311</guid>
   <description>&lt;div&gt;&lt;p&gt;Stylesheet fix to mark optional fields in record definitions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #310 created</title>
   <pubDate>Tue, 17 Jan 2023 21:27:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/310</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-310</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix outstanding issues from PR 304&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See https://github.com/qt4cg/qtsp…ecs/pull/304#issuecomment-1378532583 - but excluding item 3 because that's a stylesheet change.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #309 created</title>
   <pubDate>Tue, 17 Jan 2023 19:20:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/309</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-309</guid>
   <description>&lt;div&gt;&lt;p&gt;Drop ternary conditionals, as agreed on 2023-01-17&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We agreed today to drop ternary conditional expressions from the proposal; this PR implements that change.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 018 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 17 Jan 2023 16:15:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/01-17</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-01-17</guid>
</item><item>
   <title>Issue #286 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:14:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/286</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-286</guid>
   <description>&lt;div&gt;&lt;p&gt;Spec changes to allow child::(a|b|c) - Issue 107&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #290 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:14:01 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/290</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-290</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #18 (function type hierarchy)&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #288 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:13:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/288</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-288</guid>
   <description>&lt;div&gt;&lt;p&gt;Error in fn:path specification&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #291 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:13:35 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/291</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-291</guid>
   <description>&lt;div&gt;&lt;p&gt;DTD validity of F&amp;amp;O spec&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #304 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:13:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/304</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-304</guid>
   <description>&lt;div&gt;&lt;p&gt;Mike's content changes from PR 292&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #284 closed</title>
   <pubDate>Tue, 17 Jan 2023 17:12:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/284</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-284</guid>
   <description>&lt;div&gt;&lt;p&gt;Add grammar for "if (test) then {expr}" with no else&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #308 created</title>
   <pubDate>Sun, 15 Jan 2023 17:05:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/308</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-308</guid>
   <description>&lt;div&gt;&lt;p&gt;Improve the legends in the diagrams&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR completes my action QT4CG-015-03: NW to make sure the direction of the arrow is in the legends&lt;/p&gt;
&lt;p&gt;I also made sure the legends aren't too wide. I still have more work to do for the other actions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 018 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sun, 15 Jan 2023 15:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/01-17</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-01-17</guid>
</item><item>
   <title>Issue #306 closed</title>
   <pubDate>Sun, 15 Jan 2023 16:17:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/306</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-306</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:char - editors actions from 2023-01-10&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #307 created</title>
   <pubDate>Sun, 15 Jan 2023 15:42:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/307</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-307</guid>
   <description>&lt;div&gt;&lt;p&gt;Parsing and building URIs comments and queries&lt;/p&gt;&lt;div class="markup"&gt;&lt;ol&gt;
&lt;li&gt;fn:build-uri states:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;If the scheme key is present in the map, the URI begins with the value of that key concatenated with //, otherwise it begins //.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;a. Shouldn't the concatenation be &lt;code&gt;://&lt;/code&gt; so e.g. &lt;code&gt;http&lt;/code&gt; becomes &lt;code&gt;http://&lt;/code&gt;?
b. How are non-heirarchical schemes handled like &lt;code&gt;urn&lt;/code&gt;, and &lt;code&gt;mailto&lt;/code&gt;?&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;RFC 3986 allows IPv6 and IPvFuture addresses that contain &lt;code&gt;:&lt;/code&gt; characters, e.g. &lt;code&gt;http://[::1]:80&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My understanding of fn:parse-uri is that this will fail to parse.&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;RFC 3986 states that for userinfo, the &lt;code&gt;user:password&lt;/code&gt; form is deprecated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Browsers will reject this due to the security risk, and the RFC suggests that applications should not render the password (the part after the &lt;code&gt;:&lt;/code&gt;) in clear text. -- Should fn:build-uri follow suite, or (along with fn:parse-uri) have an option to control the behaviour (keep, remove, invalid), where if the option is invalid, it will throw an fn:error?&lt;/p&gt;
&lt;ol start="4"&gt;
&lt;li&gt;RFC 3986 suggests that the port should be omitted if it matches the default for the scheme&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Should fn:build-uri have this behaviour?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #306 created</title>
   <pubDate>Tue, 10 Jan 2023 21:23:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/306</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-306</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:char - editors actions from 2023-01-10&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes to the new fn:char function (issue #121) as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Action QT4CG-017-01 clarifies the definition of formats #nnn and #xnnn.&lt;/li&gt;
&lt;li&gt;Action QT4CG-017-02 changes the order of the rules&lt;/li&gt;
&lt;li&gt;In discussion it was asked whether any HTML5 entity names refer to strings comprising more than one character. On investigation it appears that they do, and the spec has been revised to allow for this.&lt;/li&gt;
&lt;li&gt;added history/status information&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 017 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 10 Jan 2023 16:20:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2023/01-10</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#minutes-01-10</guid>
</item><item>
   <title>Issue #305 created</title>
   <pubDate>Mon, 9 Jan 2023 17:50:13 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/305</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-305</guid>
   <description>&lt;div&gt;&lt;p&gt;parse-xml() and whitespace stripping&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There seems to be nothing in either the XSLT spec or in F+O that says explicitly whether stylesheet-defined space stripping rules (xsl:strip-space and xsl:preserve-space) apply to documents loaded using &lt;code&gt;fn:parse-xml&lt;/code&gt; (or, by extension, &lt;code&gt;parse-html&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The spec says that these rules apply to "source trees" defined as "any tree provided as input to the transformation. This includes the document containing the [global context item] if any, documents containing nodes present in the [initial match selection], documents containing nodes supplied as the values of [stylesheet parameters], documents obtained from the results of functions such as [document], [doc], and [collection]...".&lt;/p&gt;
&lt;p&gt;I guess one reasonable interpretation is that the "such as" includes &lt;code&gt;parse-xml()&lt;/code&gt;. But it goes rather against the grain that the behaviour of parse-xml() should be affected by the containing stylesheet declarations, when there is no mention of such a context-dependency in the function specification; in this, parse-xml() is rather different from doc() which deliberately says very little about how the XDM instance returned relates to the URI supplied as input.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #292 closed</title>
   <pubDate>Mon, 9 Jan 2023 09:43:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/292</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-292</guid>
   <description>&lt;div&gt;&lt;p&gt;Merge signatures with optional params&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #304 created</title>
   <pubDate>Mon, 9 Jan 2023 09:32:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/304</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-304</guid>
   <description>&lt;div&gt;&lt;p&gt;Mike's content changes from PR 292&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I teased apart some of the omnibus PR #292. I've commited the schema and stylesheet changes. This PR covers the remaining prose changes.&lt;/p&gt;
&lt;p&gt;Mike writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I regret that this has turned into a bit of an omnibus PR. The main changes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fix validity issues with the function catalog and its schema (Issue 291)&lt;/li&gt;
&lt;li&gt;Convert all functions to use a single signature with optional parameters (Issue 70)&lt;/li&gt;
&lt;li&gt;Extend the function catalog to handle record definitions (Issue 257)&lt;/li&gt;
&lt;li&gt;Fix the (trivial) bug with properties of fn:path (Issue 288)&lt;/li&gt;
&lt;li&gt;Add introductory text concerning the handling of operators (Issue 35)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fix #291
Fix #70
Fix #257
Fix #288
Fix #35&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #303 closed</title>
   <pubDate>Mon, 9 Jan 2023 07:38:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/303</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#closed-303</guid>
   <description>&lt;div&gt;&lt;p&gt;Mike's proposed schema and stylesheet changes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #303 created</title>
   <pubDate>Mon, 9 Jan 2023 07:32:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/303</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-303</guid>
   <description>&lt;div&gt;&lt;p&gt;Mike's proposed schema and stylesheet changes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;These are the schema and stylesheet changes from PR #292. They don't break the build and on casual inspection they seem fine, so I'm just going to accept them.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 017 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 6 Jan 2023 16:02:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2023/01-10</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#agenda-01-10</guid>
</item><item>
   <title>Issue #300 created</title>
   <pubDate>Fri, 6 Jan 2023 16:19:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/300</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-300</guid>
   <description>&lt;div&gt;&lt;p&gt;[F+O] Ambiguity regarding Unicode normalization (editorial)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In §1.7.1 the paragraph&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unless explicitly stated, the xs:string values returned by the
functions in this document are not normalized in the sense of
[Character Model for the World Wide Web 1.0: Fundamentals].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;is a little bit ambiguous for my taste. By "are not normalized" it means "no action is taken to normalize the strings", it doesn't mean "the strings will not be in normalized form".&lt;/p&gt;
&lt;p&gt;I suggest: "Unless explicitly stated, the functions in this document operate on strings as sequences of codepoints and do not attempt to convert input strings, or produce output strings, in Unicode normalized form. Unicode normalization occurs only when explicitly requested, for example by use of the &lt;code&gt;fn:normalize-unicode&lt;/code&gt; function."&lt;/p&gt;
&lt;p&gt;At the same time we might update the reference to point to "Character Model for the World Wide Web: String Matching", revised in 2021, though it is still only a Working Group Note. See https://www.w3.org/TR/charmod-norm/#unicodeNormalization&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #281 closed</title>
   <pubDate>Mon, 2 Jan 2023 18:12:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/281</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-281</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath: Short-circuiting Functions and Lazy Evaluation Hints&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #299 created</title>
   <pubDate>Mon, 2 Jan 2023 18:08:24 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/299</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-299</guid>
   <description>&lt;div&gt;&lt;p&gt;Short-circuiting functions, function-arity guards and lazy hints&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;&lt;strong&gt;I. Shortcutting and lazy hints&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Let us have this expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $f := function($arg1 as item()*, $arg2 as item()*) as function(item()*) as item()*
             {  (: Some code here :) }
  return
    $f($x) ($y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Evaluating &lt;strong&gt;&lt;code&gt;$f($x)&lt;/code&gt;&lt;/strong&gt; produces a function. The &lt;strong&gt;actual arity&lt;/strong&gt; of this resulting function can be any number &lt;strong&gt;&lt;code&gt;N &amp;gt;= 0&lt;/code&gt;&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If &lt;strong&gt;&lt;code&gt;N &amp;gt; 1&lt;/code&gt;&lt;/strong&gt; there would be arity mismatch error, as only one argument &lt;code&gt;$y&lt;/code&gt; is provided in the expression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;strong&gt;&lt;code&gt;N = 1&lt;/code&gt;&lt;/strong&gt; the final function call can be evaluated, and the argument &lt;code&gt;$y&lt;/code&gt;   must be evaluated,  or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If &lt;code&gt;N = 0&lt;/code&gt;, then  &lt;code&gt;$y&lt;/code&gt; is unneeded and can safely be ignored&lt;/strong&gt; according to the updated &lt;strong&gt;“&lt;a href="https://qt4cg.org/pr/279/xquery-40/xpath-40.html#id-coercion-rules"&gt;Coercion Rules / Function Coercion&lt;/a&gt;”&lt;/strong&gt; in Xpath 4.0.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Because a possibility exists to be able to ignore the evaluation of &lt;code&gt;$y&lt;/code&gt;, it is logical to delay the evaluation of &lt;code&gt;$y&lt;/code&gt; until the actual arity of &lt;code&gt;$f($x)&lt;/code&gt; is known&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The current XPath 4.0 evaluation rules do not require an implementation to base its decision whether or not to evaluate &lt;code&gt;$y&lt;/code&gt; on the actual arity of the function produced by &lt;code&gt;$f($x)&lt;/code&gt;, thus at present an implementation could decide to evaluate &lt;code&gt;$y&lt;/code&gt; regardless of the actual arity of the function produced by &lt;code&gt;$f($x)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is where a &lt;em&gt;lazy&lt;/em&gt; hint comes&lt;/strong&gt;: it indicates to the XPath processor that &lt;em&gt;&lt;strong&gt;it is logical to make the decision about evaluation of &lt;code&gt;$y&lt;/code&gt; based on the actual arity of the function returned by &lt;code&gt;$f($x)&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A rewrite of the above expression using a &lt;strong&gt;&lt;em&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/em&gt;&lt;/strong&gt; hint looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $f := function($arg1 as item()*, $arg2 as item()*) as function(item()*) as item()*
             {  (: Some code here :) }  
  return
    $f($x) (lazy $y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is one example of a function with short-cutting and calling it with a &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; hint:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, $y as xs:boolean) as xs:boolean
             {
                let $partial := function($x as xs:boolean) as function(xs:boolean) as  xs:boolean
                                {
                                  if(not($x)) then -&amp;gt;(){false()}
                                              else -&amp;gt;($t) {$t}
                                }
                 return $partial($x)($y)
             }
  return
     $fAnd($x (: possibly false() :), lazy $SomeVeryComplexAndSlowComputedExpression)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Without the &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; hint in the above example, it is perfectly possible that an XPath implementation, unrestricted by the current rules, would evaluate &lt;em&gt;&lt;code&gt;$SomeVeryComplexAndSlowComputedExpression&lt;/code&gt;&lt;/em&gt; - something that is unneeded and could be avoided completely&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Formal syntax and semantics&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword should immediately precede any argument in a function call. If specified, it means that &lt;strong&gt;&lt;em&gt;it is logical to make the decision about evaluation of this argument based on the actual arity of the function in this function call&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Based on this definition, it follows that &lt;strong&gt;&lt;em&gt;&lt;code&gt;lazy $argK&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; implies &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; for all arguments following &lt;code&gt;$argK&lt;/code&gt; in the function call. Thus specifying more than one &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; hint within a given function call is redundant and an implementation may report this redundancy to the user.&lt;/p&gt;
&lt;p&gt;The scope of a &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword specified on an argument is this and all following arguments of (only) the current function call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is possible to specify a &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword that is in force for the respective argument(s) of all function calls of the given function. To do this, the &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword must  be  specified immediately preceding a parameter name in the function definition of that function.&lt;/p&gt;
&lt;p&gt;For example, if the function &lt;strong&gt;&lt;code&gt;$f&lt;/code&gt;&lt;/strong&gt; is specified as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $f := function($arg1 as item()*, lazy $arg2 as item()*, $arg3 as item()*, $arg4 as item()* ) 
          { (: some code here:) }
  return
     $someExpression
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then any call of &lt;strong&gt;&lt;code&gt;$f&lt;/code&gt;&lt;/strong&gt; in its definition scope that has the form:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;$f($x, $y, $z, $t)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;$f($x, lazy $y, $z, $t)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is possible to specify the &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword immediately preceding a function definition. This instructs the XPath processor that any call of this function is only necessary to be evaluated if the function is actually called during the evaluation of the expression that contains this function call.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $complexComputation := lazy function($x, $y) {$x + $y}, (: Make it as complex as you want ... :)
     $someCondition := function()
        {
            let $date := current-date()
              return
                  month-from-date($date) eq 2
                and 
                 day-from-date($date) eq 29 
       }
  return if($someCondition()) 
           then $complexComputation(2, 3)
           else 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specifying the &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword in the function definition for &lt;code&gt;$complexComputation&lt;/code&gt; can save significant computing resources, because the programmer knows that &lt;code&gt;$someCondition()&lt;/code&gt; is true during only a single day in any 4-years period.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;&lt;strong&gt;II.fn:lazy&lt;/strong&gt;&lt;/h1&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Applied on a single argument that can be any &lt;em&gt;expression&lt;/em&gt;. Lazily returns its argument &lt;em&gt;expression&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Signature&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;lazy fn:lazy( 
        $expression as item()*
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Properties&lt;/h2&gt;
&lt;p&gt;This function is &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-deterministic"&gt;deterministic&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-context-independent"&gt;context-independent&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-focus-independent"&gt;focus-independent&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Rules&lt;/h2&gt;
&lt;p&gt;The semantics of the function is strictly defined below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $lazyFunction := lazy fn:identity#1
   return
      (: AnyExpression here :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any expression &lt;strong&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/strong&gt; of the form:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;Q(E1, lazy(E2))&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;where &lt;strong&gt;&lt;code&gt;E1&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;E2&lt;/code&gt;&lt;/strong&gt; are subexpressions of &lt;strong&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/strong&gt;, must be evaluated by the Processor in two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Substitute the expression&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;Q(E1, lazy(E2))&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;Q(E1, ?) (lazy E2)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evaluate the latter according to the rules for a &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; argument&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;We can use almost the same example as above, but here &lt;code&gt;$complexComputation&lt;/code&gt; is defined without the &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; keyword and thus is not a &lt;strong&gt;&lt;em&gt;lazy&lt;/em&gt;&lt;/strong&gt; function. To have &lt;code&gt;$complexComputation&lt;/code&gt; evaluated lazily, we call the &lt;code&gt;lazy()&lt;/code&gt; function, passing &lt;code&gt;$complexComputation&lt;/code&gt;  to it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $complexComputation := (: no lazy here :) function($x, $y) {$x + $y}, (: Make it as complex as you want ... :)
     $someCondition := function()
        {
            let $date := current-date()
              return
                  month-from-date($date) eq 2
                and 
                 day-from-date($date) eq 29 
       }
  return 
        $someCondition() and lazy( $complexComputation(2, 3))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the expression &lt;strong&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/strong&gt; is:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;$someCondition() and lazy( $complexComputation(2, 3))&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This  is the same as:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:op("and")($someCondition(), lazy( $complexComputation(2, 3))&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;According to the Rules above, the processor converts this to:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:op("and")($someCondition(), ?) (lazy( $complexComputation(2, 3)) )&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$someCondition()&lt;/code&gt; is evaluated and if its value is &lt;code&gt;false()&lt;/code&gt;,   then the expression to be evaluated is:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:op("and")(false(), ?) (lazy( $complexComputation(2, 3)) )&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As &lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:op("and")(false(), ?)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; by definition is &lt;strong&gt;&lt;em&gt;&lt;code&gt;function() {false()}&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;. then the final result &lt;strong&gt;&lt;code&gt;false()&lt;/code&gt;&lt;/strong&gt; is produced and the unnecessary argument &lt;strong&gt;&lt;em&gt;&lt;code&gt;$complexComputation(2, 3)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; is not evaluated at all.&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;III. A function's arity is a guard for its arguments&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Let us have a  function &lt;strong&gt;&lt;code&gt;$f&lt;/code&gt;&lt;/strong&gt; defined as below:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $f := function($arg1 as item()*, $arg2 as item()*, …, $argN as item()*)
   as function(item()*, item()*, …, item()*) as item()*
     {
       if($cond0($arg1))       then -&amp;gt; () { 123 }
        else if($cond1($arg1)) then -&amp;gt; ($Z1 as item()*) {$Z1}
        else if($cond2($arg1)) then -&amp;gt; ($Z1 as item()*, $Z2 as item()*) {$Z1 + $Z2}
        (:    .        .        .        .         .        .        .         .  :)
        else if($condK($arg1)) then -&amp;gt; ($Z1 as item()*, $Z2 as item()*, …, $Zk as item()*)
                                       {$Z1 + $Z2 + … + $Zk}
        else ()
     }
  return
     $f($y1, $y2, …, $yN) ($z1, $z2, …, $zk)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A call to &lt;strong&gt;&lt;code&gt;$f&lt;/code&gt;&lt;/strong&gt; returns a function whose arity may be any of the numbers: 0, 1, …, K.&lt;/p&gt;
&lt;p&gt;Depending on the arity of the returned function (0, 1, …, K), the last (K, K-1,  K-2, …, 2, 1, 0) arguments of the function call:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;$f($y1, $y2,  .  .  . , $yN) ($z1, $z2, .  .  . , $zk)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;are unneeded and it is logical that they would not need to be evaluated&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, the actual arity of the result of calling &lt;strong&gt;&lt;code&gt;$f&lt;/code&gt;&lt;/strong&gt; is a guard for the arguments of a call to this function-result&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Thus, one more bullet needs to be added to [2.4.5 Guarded Expressions] https://qt4cg.org/specifications/xquery-40/xpath-40.html#id-guarded-expressions), specifying an additional guard-type:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In an expression of the type &lt;code&gt;E(A1, A2, ..., AN)&lt;/code&gt; any of the arguments &lt;code&gt;A&lt;/code&gt;&lt;sub&gt;K&lt;/sub&gt; is guarded by the condition
&lt;code&gt;actual-arity(E) ge K&lt;/code&gt;. This rule has the consequence that if the actual arity of &lt;code&gt;E()&lt;/code&gt; is less than &lt;code&gt;K&lt;/code&gt; then if any argument &lt;code&gt;Am&lt;/code&gt; (where &lt;code&gt;m &amp;gt;= K&lt;/code&gt;) is evaluated, this must not raise a dynamic error. An implementation may base on the actual arity of &lt;code&gt;E()&lt;/code&gt; its decision for the evaluation of the arguments.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #298 created</title>
   <pubDate>Mon, 2 Jan 2023 15:36:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/298</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-298</guid>
   <description>&lt;div&gt;&lt;p&gt;Abstract supertype for map and array&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I've been wondering whether there would be any mileage in introducing an abstract super type for map() and array(), perhaps called lookup(). This would basically treat an array as a map with integer keys.&lt;/p&gt;
&lt;p&gt;This would allow a cleaner type signature for map:find() and any future functions such as xx:search() that work both on maps and arrays. It might simplify the description of the lookup operator "?". For functions that already exist in both the map and array namespaces, such as get(), we could introduce a unified function in the fn namespace with the cosmetic benefit of reducing the need for namespace prefixes and namespace declarations.&lt;/p&gt;
&lt;p&gt;I'm still keen to find a better way of doing iteration, filtering, mapping, and construction of maps and arrays, and I think this might be a useful stepping stone.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #297 created</title>
   <pubDate>Wed, 28 Dec 2022 23:51:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/297</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-297</guid>
   <description>&lt;div&gt;&lt;p&gt;Lookup in deeply nested JSON, an abbreviated syntax for map:find&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XML, you can select all X nodes with an abbreviated syntax //X&lt;/p&gt;
&lt;p&gt;There is no abbreviated syntax for JSON&lt;/p&gt;
&lt;p&gt;I propose to add a ?? syntax. Like / is doubled for //, it doubles the ? lookup operator.&lt;/p&gt;
&lt;p&gt;The syntax is basically the same as for ?:&lt;/p&gt;
&lt;p&gt;[200]  UnaryLookupRecursion  ::=  "??"  KeySpecifier
[143]  LookupRecursion ::=  "??"  KeySpecifier
[144]  KeySpecifier |::=  NCName  |  IntegerLiteral  |  StringLiteral  |  VarRef  |  ParenthesizedExpr  |  "*"&lt;/p&gt;
&lt;p&gt;For the semantic it can call map:find, except for * and varref:&lt;/p&gt;
&lt;p&gt;Unary variant:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;??"string"    becomes map:find(. , "string")
??NCName      becomes map:find( ., "NCName")
??123         becomes map:find(., 123)

??*           Recursively every member/value of every array/map underneath .
              E.g. for `[{"a": {"x": 123}}, 456]`: `{"a": {"x": 123}}, {"x": 123}, 123, 456`

??$varref     calls ?$varref on every nested array/map.
              Like (.,??*)?$varref   (except for type errors)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Postfix variant:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;E??S&lt;/code&gt;   would be &lt;code&gt;E!??S&lt;/code&gt; if it is atomic, or &lt;code&gt;let $s := data(S) return E!??$s&lt;/code&gt; if S is parenthesized&lt;/p&gt;
&lt;p&gt;This probably conflicts with #171&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #296 created</title>
   <pubDate>Thu, 22 Dec 2022 10:44:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/296</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-296</guid>
   <description>&lt;div&gt;&lt;p&gt;Default namespace for elements; especially in the context of HTML&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There can be little doubt that the fact that an unprefixed name in XPath fails to select an unprefixed element in the source document is one of the major gotcha's, causing massive bewilderment to all newbie users.&lt;/p&gt;
&lt;p&gt;The XPath 2.0 solution of using a default element namespace in the static context is a partial solution; its main drawback is that it doesn't help the newbies who didn't know about the problem or its solution.&lt;/p&gt;
&lt;p&gt;The HTML "living standard" introduces a "wilful violation" of the XPath 1.0 spec to address the issue. Given that most elements in an HTML DOM will be in the XHTML namespace, it states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the QName has no prefix and the principal node type of the axis is element, then the default element namespace is used. Otherwise if the QName has no prefix, the namespace URI is null. The default element namespace is a member of the context for the XPath expression. The value of the default element namespace when executing an XPath expression through the DOM3 XPath API is determined in the following way:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If the context node is from an HTML DOM, the default element namespace is "http://www.w3.org/1999/xhtml".
Otherwise, the default element namespace URI is null.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It then adds a note which is blatantly untrue:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is equivalent to adding the default element namespace feature of XPath 2.0 to XPath 1.0, and using the HTML namespace as the default element namespace for HTML documents. It is motivated by the desire to have implementations be compatible with legacy HTML content while still supporting the changes that this specification introduces to HTML regarding the namespace used for HTML elements, and by the desire to use XPath 1.0 rather than XPath 2.0.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since the XPath 2.0 facility picks up the default namespace from the static context, while the HTML "wilful violation" picks it up dynamically from a property of the context node (namely "being from an HTML DOM") there is no way these can be considered equivalent.&lt;/p&gt;
&lt;p&gt;(Note also, there's a significant ambiguity in the "wilful violation" rules: what exactly is the "context node" that determines this behaviour? I think they're suggesting it is the context node at the point of XPath API invocation, not the context node for the specific axis step. This makes it rather unclear how the rule is supposed to apply to XSLT. And: if an XSLT stylesheet creates a temporary tree with nodes in the XHTML namespaces, do we consider those nodes as being "from an HTML DOM"?)&lt;/p&gt;
&lt;p&gt;Nevertheless, the intent of the "violation" is worthy, and it would be nice if we can find a solution to this problem that works both for HTML and for other vocabularies.&lt;/p&gt;
&lt;p&gt;Our current proposal for fn:parse-html is that HTML elements should go in the XHTML namespace and this means that users familiar with XPath 1.0 implementations in the browser will trip over this problem. A lot.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #295 created</title>
   <pubDate>Tue, 20 Dec 2022 23:43:38 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/295</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-295</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend support for self-reference in record types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We currently allow a field in a record to have type "..", that is, the same type as the containing record definition.&lt;/p&gt;
&lt;p&gt;This isn't good enough for the fn:random-number-generator, where we need something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;random-number-generator-record:
record(
   number as xs:double,
   next as function() as #random-number-generator-record,
   permute as function(item()*) as item()*,
   *,
)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are two ways we could tackle this. We could extend the syntax to allow ".." here, so it becomes
&lt;code&gt;next as function() as ..&lt;/code&gt; Or we could allow named item types to refer to themselves:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:item-type name="random-number-generator-record"
   as="record(
   number as xs:double,
   next as function() as type(random-number-generator-record),
   permute as function(item()*) as item()*,
   *,
)"&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We haven't really reviewed the proposal for named item types. It's easy enough to declare them in XQuery and XSLT (and not really very difficult to define the rules under which self-referential definitions are allowed). Free-standing XPath is a bit more of a problem.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 016 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 20 Dec 2022 17:26:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/12-20</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-12-20</guid>
</item><item>
   <title>Issue #294 created</title>
   <pubDate>Tue, 20 Dec 2022 15:48:55 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/294</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-294</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:remove removing multiple items&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;&lt;code&gt;map:remove&lt;/code&gt; and &lt;code&gt;array:remove&lt;/code&gt; take a list of keys/positions to be removed; fn:remove only accepts one. I propose changing &lt;code&gt;fn:remove&lt;/code&gt; to bring it into line.&lt;/p&gt;
&lt;p&gt;Without this, removing multiple items is tricky because removing one item changes the positions of the others.&lt;/p&gt;
&lt;p&gt;Example use case:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $p := index-where($persons -&amp;gt;{@status='retired'))
return $persons =&amp;gt; remove($p)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Of course, this could always be done with a filter. But removing a small number of items from a large sequence might be more efficient than a filter)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #293 created</title>
   <pubDate>Mon, 19 Dec 2022 20:14:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/293</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-293</guid>
   <description>&lt;div&gt;&lt;p&gt;Error in fn:doc-available specification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Observed on the XML.com slack (Oct 6 2022):&lt;/p&gt;
&lt;p&gt;A rule in the XQFO 3.1 specification seems to be inconsistent. In the error summary, it’s stated that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;err:FODC0005&lt;/code&gt;, Invalid argument to fn:doc or fn:doc-available. Raised (optionally) by &lt;code&gt;fn:doc&lt;/code&gt; and &lt;code&gt;fn:doc-available&lt;/code&gt; if the argument is not a valid URI reference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The rules for &lt;code&gt;fn:doc-available&lt;/code&gt; say: “[…] In all other cases this function returns false. This includes the case where an invalid URI is supplied, and also the case where a valid relative URI reference is supplied, and cannot be resolved, for example because the static base URI is absent.”&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #292 created</title>
   <pubDate>Mon, 19 Dec 2022 18:43:21 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/292</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-292</guid>
   <description>&lt;div&gt;&lt;p&gt;Merge signatures with optional params&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This addresses issue #291, concerned with the validity of function-catalog.xml against its XSD schema, and the validity of the intermediate file xpath-functions-40.xml against the xmlspec DTD (as amended for QT).&lt;/p&gt;
&lt;p&gt;It also fixes the trivial error raised in issue #288, and addresses issue #70 by making each function have a single prototype with default values where appropriate. (This is not purely an editorial change, it enables you for example to supply () as the $length argument of fn:substring).&lt;/p&gt;
&lt;p&gt;There's more work on issue #257 (editorial improvements to handling of named record types).&lt;/p&gt;
&lt;p&gt;This commit is mainly for technical review by NDW. It combines changes to the stylesheets, schema, and content, and may therefore require picking apart before it can be applied.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #291 created</title>
   <pubDate>Mon, 19 Dec 2022 11:31:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/291</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-291</guid>
   <description>&lt;div&gt;&lt;p&gt;DTD validity of F&amp;amp;O spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Despite PR #228, I'm still seeing a lot of validation errors when (using Oxygen) I apply DTD validation to build/expanded/xpath-functions-40/xpath-functions-40.xml&lt;/p&gt;
&lt;p&gt;Many of these relate to style attributes not being allowed on table, td, and code elements.&lt;/p&gt;
&lt;p&gt;The merge-function-specs.xsl explicitly creates elements with these attributes:&lt;/p&gt;
&lt;p&gt;See&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;xsl:template match="fos:options"&amp;gt;&lt;/code&gt; line 382&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;xsl:template match="fos:option"&amp;gt;&lt;/code&gt; line 408&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;xsl:template match="processing-instruction('local-function-index')"&amp;gt;&lt;/code&gt; line 347&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It all works because xmlspec-2016.xsl handles these attributes even though the DTD doesn't allow them: see &lt;code&gt;&amp;lt;xsl:template name="style-attributes"&amp;gt;&lt;/code&gt; at line 2096.&lt;/p&gt;
&lt;p&gt;There seem to be three possible options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extend the DTD to allow these attributes&lt;/li&gt;
&lt;li&gt;Change merge-function-specs.xsl to not generate these attributes, instead perhaps generating a role attribute which gets picked up in the final styling&lt;/li&gt;
&lt;li&gt;Sweep the issue under the carpet; avoid validating the intermediate file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main problem with the third approach is that it allows other errors to go unnoticed, for example putting text directly within an &lt;code&gt;&amp;lt;item&amp;gt;&lt;/code&gt; without a containing &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #290 created</title>
   <pubDate>Sat, 17 Dec 2022 19:21:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/290</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-290</guid>
   <description>&lt;div&gt;&lt;p&gt;Fix issue #18 (function type hierarchy)&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Editorial change to fix a technical error in the data model spec (issue #18). Does not change the specification.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #289 created</title>
   <pubDate>Sat, 17 Dec 2022 18:45:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/289</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-289</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposal to add fallback behaviour to map:get and array:get&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Note: I got a build failure trying to build this, it's doing DTD validation but there are invalidities, unrelated to the changes I made.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 016 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 16 Dec 2022 09:41:30 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/12-20</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-12-20</guid>
</item><item>
   <title>Issue #288 created</title>
   <pubDate>Thu, 15 Dec 2022 14:49:30 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/288</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-288</guid>
   <description>&lt;div&gt;&lt;p&gt;Error in fn:path specification&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;On the XML.com slack, Phil Fearon observes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The XPath 3.1 specification has an error in the &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-path"&gt;definition of fn:path&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The properties section states:&lt;/p&gt;
&lt;p&gt;The one-argument form of this function is &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-deterministic"&gt;·deterministic·&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-context-dependent"&gt;·context-dependent·&lt;/a&gt;, and [·focus-dependent·] (https://www.w3.org/TR/xpath-functions-31/#dt-focus-dependent).
The two-argument form of this function is &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-deterministic"&gt;·deterministic·&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-context-independent"&gt;·context-independent·&lt;/a&gt;, and &lt;a href="https://www.w3.org/TR/xpath-functions-31/#dt-focus-independent"&gt;·focus-independent·&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The term one-argument form should be zero-argument form and consequently, two-argument form should be one-argument form&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #277 closed</title>
   <pubDate>Wed, 14 Dec 2022 14:13:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/277</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-277</guid>
   <description>&lt;div&gt;&lt;p&gt;Overriding functions using xsl:import&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #279 closed</title>
   <pubDate>Wed, 14 Dec 2022 14:13:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/279</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-279</guid>
   <description>&lt;div&gt;&lt;p&gt;Rewrite XSLT §10.3.4 (function overriding) for clarity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #287 closed</title>
   <pubDate>Wed, 14 Dec 2022 14:13:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/287</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-287</guid>
   <description>&lt;div&gt;&lt;p&gt;PR #279 with merge conflicts resolved&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #287 created</title>
   <pubDate>Wed, 14 Dec 2022 13:57:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/287</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-287</guid>
   <description>&lt;div&gt;&lt;p&gt;PR #279 with merge conflicts resolved&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #279
Close #277&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #286 created</title>
   <pubDate>Tue, 13 Dec 2022 21:06:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/286</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-286</guid>
   <description>&lt;div&gt;&lt;p&gt;Spec changes to allow child::(a|b|c) - Issue 107&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #258 closed</title>
   <pubDate>Tue, 13 Dec 2022 20:08:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/258</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-258</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue #114 - add array:index-where() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #265 closed</title>
   <pubDate>Tue, 13 Dec 2022 17:58:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/265</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-265</guid>
   <description>&lt;div&gt;&lt;p&gt;Type hierarchy tables/diagrams&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #268 closed</title>
   <pubDate>Tue, 13 Dec 2022 17:58:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/268</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-268</guid>
   <description>&lt;div&gt;&lt;p&gt;New type-hierarchy images / descriptions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 015 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 13 Dec 2022 17:23:01 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/12-13</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-12-13</guid>
</item><item>
   <title>QT4 CG meeting 015 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 9 Dec 2022 07:44:30 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/12-13</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-12-13</guid>
</item><item>
   <title>Issue #285 created</title>
   <pubDate>Thu, 8 Dec 2022 11:34:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/285</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-285</guid>
   <description>&lt;div&gt;&lt;p&gt;Stability of collections&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specification for fn:collection says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, this function is [·deterministic·]. This means that repeated calls on the function with the same argument will return the same result. However, for performance reasons, implementations may provide a user option to evaluate the function without a guarantee of determinism. The manner in which any such option is provided is [·implementation-defined·]. If the user has not selected such an option, a call to this function must either return a deterministic result or must raise a dynamic error [[err:FODC0003].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think this is unrealistic. The cost of making fn:collection deterministic is disproportionate to the benefits. It's very rare in practice for a query or stylesheet to process the same collection more than once, and retaining the information needed to deliver the identical results on these rare occasions is expensive (typically it means holding a long-term lock on the data, or keeping a copy of the entire collection in memory). It also inhibits techniques such as multi-threaded evaluation.&lt;/p&gt;
&lt;p&gt;I would like to relax this requirement.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #284 created</title>
   <pubDate>Wed, 7 Dec 2022 11:55:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/284</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-284</guid>
   <description>&lt;div&gt;&lt;p&gt;Add grammar for "if (test) then {expr}" with no else&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As discussed in issue #234. In reviewing this PR, I suggest we consider it together with the existing proposals for ternary conditionals (x ?? y !! z) and the "otherwise" operator.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 014 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 6 Dec 2022 17:21:01 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/12-06</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-12-06</guid>
</item><item>
   <title>Issue #283 created</title>
   <pubDate>Mon, 5 Dec 2022 11:23:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/283</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-283</guid>
   <description>&lt;div&gt;&lt;p&gt;Enumeration types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The draft specification includes a proposal to provide enumeration types. The proposal is incomplete, for example it does not include all the rules for conversions and casting. This issue is raised in order to outline where we are, what needs to be done, and to elicit consensus on whether we want to proceed with this.&lt;/p&gt;
&lt;p&gt;What's the motivation? Primarily, making function signatures more expressive.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q0: do we really need this?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The essence of the proposal is an ItemType that matches an enumerated set of xs:string values:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[131] | EnumerationType | ::= | "enum" "("  StringLiteral (","  StringLiteral)* ")"  &lt;/code&gt;
For example, the type enum("red", "green", "blue") matches the string "green".&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q1: why restrict it to strings? I think my main reason was that the syntax gets complicated if we try to do it for data types that have no literal representation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Subtyping is based on the value space. An enumeration type E is a subtype of another enumeration type F if the set of strings in E is a subset of those in F. All enumeration types are subtypes of xs:string.&lt;/p&gt;
&lt;p&gt;Strings are not "labelled" as belonging to an enumeration type, matching is purely based on the value ("datum"). This doesn't provide very strong typing. If "violet" and "pink" are allowed by both the enumeration types &lt;code&gt;colour&lt;/code&gt; and &lt;code&gt;flower&lt;/code&gt;, then it's not intrinsically an error to use a variable of type &lt;code&gt;flower&lt;/code&gt; where a &lt;code&gt;colour&lt;/code&gt; is expected. Equally, a variable of type &lt;code&gt;xs:string&lt;/code&gt; can be used where a &lt;code&gt;colour&lt;/code&gt; is expected.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q2: should enumerations be more strongly typed?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I would expect that an enumeration type can be used as the target of "cast" or "castable", but this is not currently in the spec.&lt;/p&gt;
&lt;p&gt;The coercion rules as currently written say that if the expected type is an enumeration type, then the rules are largely the same as for any other subtype of &lt;code&gt;xs:string&lt;/code&gt;:  casting from &lt;code&gt;xs:untypedAtomic&lt;/code&gt; applies, promotion from &lt;code&gt;xs:anyURI&lt;/code&gt; does not apply, 1.0 compatibility mode rules do not apply.&lt;/p&gt;
&lt;p&gt;Operators and functions on enumeration types are the same as for &lt;code&gt;xs:string&lt;/code&gt;. This means, for example, that there are no special rules for comparison: values are ordered as strings and are compared using the default collation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #271 closed</title>
   <pubDate>Mon, 5 Dec 2022 10:26:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/271</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-271</guid>
   <description>&lt;div&gt;&lt;p&gt;Amendments to data model spec as per minutes of 2022-11-22&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 014 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 5 Dec 2022 10:20:13 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/12-06</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-12-06</guid>
</item><item>
   <title>Issue #282 closed</title>
   <pubDate>Mon, 5 Dec 2022 09:51:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/282</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-282</guid>
   <description>&lt;div&gt;&lt;p&gt;Copy of MK actions-2022-11-15 branch by NW&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #282 created</title>
   <pubDate>Mon, 5 Dec 2022 09:46:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/282</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-282</guid>
   <description>&lt;div&gt;&lt;p&gt;Copy of MK actions-2022-11-15 branch by NW&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Resolves merge conflicts in #247&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #281 created</title>
   <pubDate>Sat, 3 Dec 2022 22:12:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/281</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-281</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath: Short-circuiting Functions and Lazy Evaluation Hints&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;Short-circuiting Functions and Lazy Evaluation Hints&lt;/h1&gt;
&lt;h1&gt;&lt;br/&gt;1. Introduction&lt;/h1&gt;
&lt;p&gt;As shown in &lt;a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation#Support_in_common_programming_and_scripting_languages"&gt;Wikipedia&lt;/a&gt;, most contemporary programming languages offer reasonable support for &lt;a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation#Definition"&gt;short-circuit evaluation&lt;/a&gt;
(also known as &lt;em&gt;minimal&lt;/em&gt; or &lt;em&gt;McCarthy evaluation&lt;/em&gt;), including several standard language short-circuit operators.&lt;/p&gt;
&lt;p&gt;Short-circuiting, as we will call the above in this document, is commonly used to achieve:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Avoiding undesired side effects of evaluating the second argument&lt;/em&gt;, such as
excessive evaluation time or throwing an error&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Usual example, using a &lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)"&gt;C-based&lt;/a&gt; language:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;   int denom = 0;
   if (denom != 0 &amp;amp;&amp;amp; num / denom)
   {
   ...//ensures that calculating num/denom never results in divide-by-zero error
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;   int a = 0;
   if (a != 0 &amp;amp;&amp;amp; myfunc(b))
   {
     do_something();
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, short-circuit evaluation guarantees that &lt;code&gt;myfunc(b)&lt;/code&gt; is never called. This is because &lt;code&gt;a != 0&lt;/code&gt; evaluates to &lt;em&gt;&lt;code&gt;false&lt;/code&gt;&lt;/em&gt;. This feature permits two useful programming constructs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If the first sub-expression checks whether an expensive computation is needed and the check evaluates to &lt;em&gt;false&lt;/em&gt;, one can eliminate expensive computation in the second argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It permits a construct where the first expression guarantees a condition without which the second expression may cause a &lt;a href="https://en.wikipedia.org/wiki/Run-time_error"&gt;run-time error&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Idiomatic conditional construct&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Perl"&gt;Perl&lt;/a&gt; idioms:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   some_condition or die; # Abort execution if some_condition is false

   some_condition and die; # Abort execution if some_condition is true
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;br/&gt;2. Short-circuiting in XPath&lt;/h1&gt;
&lt;p&gt;In short (pun intended) there is no such thing mentioned in any officially-published W3C version (&amp;lt;= 3.1) of XPath.&lt;/p&gt;
&lt;p&gt;This topic was briefly mentioned in the discussion of &lt;a href="https://github.com/qt4cg/qtspecs/issues/78"&gt;another proposal&lt;/a&gt;: that of providing the capability to specify strictly the order of evaluation.&lt;/p&gt;
&lt;p&gt;Aspects of incorporating hints for &lt;a href="https://en.wikipedia.org/wiki/Lazy_evaluation"&gt;lazy evaluation&lt;/a&gt; (a topic related to short-cutting) were discussed also in the thread to &lt;a href="https://app.slack.com/client/T011VK9115Z/C01GVC3JLHE/thread/C01GVC3JLHE-1665542903.180989"&gt;this question&lt;/a&gt; on the Xml.com Slack.&lt;/p&gt;
&lt;p&gt;The situation at present is that the XPath processor that is being used decides whether or not to perform shortcutting, even in obvious cases. Thus, varying from one XPath processor to another, the differences in performance evaluation could be dramatic. For example, the following XPath expression is evaluated on BaseX (ver. &amp;gt;= 10.3) for 0 seconds, and the same expression is evaluated by Saxon ver. 11 for about 100 seconds.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;
let $fnAnd := function($x)
   {
     function($y)
     {
      if(not($x)) then false()
                  else $y
     }
   }
   return
      $fnAnd(false())(some $b in ( ((1 to 1000000000000000000) !true()) )  satisfies not($b)   )
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;br/&gt;3. Analysis&lt;/h2&gt;
&lt;p&gt;We can define the term “&lt;em&gt;function with shortcutting&lt;/em&gt;” (just for a 2-argument function, but this can be extended for &lt;code&gt;N&lt;/code&gt;-argument function where &lt;code&gt;N &amp;gt;= 2&lt;/code&gt;) in the  following way:&lt;/p&gt;
&lt;p&gt;Given a function &lt;code&gt;$f($x, $y)&lt;/code&gt;, we denote in XPath its partial application for a given value of $x (say &lt;code&gt;let $x := $t&lt;/code&gt;) as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$f($t, ?)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The above is a function of one argument. By definition:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$f($x, $y)&lt;/code&gt; is equivalent to &lt;code&gt;$f($x, ?) ($y)&lt;/code&gt;, for every pair &lt;code&gt;$x&lt;/code&gt; and &lt;code&gt;$y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That is, the partial application of the 2-argument function &lt;code&gt;$f&lt;/code&gt; with fixed 1st argument is another function &lt;code&gt;$g&lt;/code&gt; which when applied on the 2nd argument (&lt;code&gt;$y&lt;/code&gt;) of &lt;code&gt;$f($x, $y)&lt;/code&gt; produces the same value as &lt;code&gt;$f($x, $y)&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;$g&lt;/code&gt; is defined as &lt;code&gt;$f($x, ?)&lt;/code&gt;, then &lt;code&gt;$g($y)&lt;/code&gt; produces the same value as &lt;code&gt;$f($x, $y)&lt;/code&gt; for every pair &lt;code&gt;$x&lt;/code&gt; and &lt;code&gt;$y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let us take a specific function:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, $y as xs:boolean) as xs:boolean
                     { $x and $y}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then one equivalent way of defining &lt;code&gt;$fAnd&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, $y as xs:boolean) as xs:boolean
                     {
                       let $partial := function($x as xs:boolean) as function(xs:boolean) as xs:boolean
                                               {
                                                  if(not($x)) then -&amp;gt;(){false()}
                                                              else -&amp;gt;($t) {$t}
                                               }
                         return $partial($x)($y)
                    }
   return
       $fAnd(false(), true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;&lt;code&gt;$partial&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; function is the result of the partial application &lt;code&gt;$fAnd($x, ?)&lt;/code&gt; and by definition this is a function of arity 1, which when applied on the 2nd argument of &lt;code&gt;$fAnd&lt;/code&gt;, produces the same result as &lt;code&gt;$fAnd($x, $y)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;From the code above we see that actually there exists a value of &lt;code&gt;$x&lt;/code&gt; (the value &lt;code&gt;false()&lt;/code&gt; ) for which &lt;code&gt;$fAnd($x, ?)&lt;/code&gt; is not a function of one argument, but a constant function (of &lt;strong&gt;0&lt;/strong&gt; arguments) – that produces the value &lt;code&gt;false()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;We say that a function &lt;code&gt;f(x, y)&lt;/code&gt; &lt;em&gt;&lt;strong&gt;allows shortcutting&lt;/strong&gt;&lt;/em&gt; if there exists at least one value &lt;code&gt;t&lt;/code&gt; such that&lt;/p&gt;
&lt;p&gt;&lt;code&gt;f(t, ?)&lt;/code&gt; is a constant.&lt;/p&gt;
&lt;h1&gt;&lt;br/&gt;4. Solution&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;How can an XPath processor treat a function with shortcutting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Obviously, if the XPath processor knows that &lt;code&gt;f(x, y)&lt;/code&gt; allows shortcutting, then it becomes possible to delay the evaluation of the 2nd argument &lt;code&gt;y&lt;/code&gt; and only perform this evaluation if the arity of the function returned by &lt;code&gt;f(t, ?)&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, and not &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can an XPath processor know that a given function allows shortcutting?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One way to obtain this knowledge is to evaluate &lt;code&gt;f(t, ?)&lt;/code&gt; and get the arity of the resulting function. XPath 3.1 allows getting the arity of any function item with the function &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-function-arity"&gt;fn:function-arity()&lt;/a&gt;.      However, doing this on every function call could be expensive and deteriorate performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another way of informing the XPath processor that a given function &lt;code&gt;f(x, y)&lt;/code&gt; allows shortcutting is if the language provides &lt;em&gt;&lt;strong&gt;hints for lazy evaluation&lt;/strong&gt;&lt;/em&gt;:
&lt;br/&gt;let $fAnd := function($x as xs:boolean, &lt;em&gt;&lt;strong&gt;lazy&lt;/strong&gt;&lt;/em&gt; $y as xs:boolean) as xs:boolean&lt;br/&gt;
&lt;br/&gt;Only in the case when there is a &lt;em&gt;&lt;strong&gt;lazy&lt;/strong&gt;&lt;/em&gt; hint specified the XPath processor will check the arity of &lt;code&gt;f(x, ?)&lt;/code&gt; and will not need to evaluate the &lt;code&gt;y&lt;/code&gt; argument if this arity is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us return to the original example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, $y as xs:boolean) as xs:boolean
                     {
                       let $partial := function($x as xs:boolean) as function(xs:boolean) as xs:boolean
                                               {
                                                  if(not($x)) then -&amp;gt;(){false()}
                                                              else -&amp;gt;($t) {$t}
                                               }
                         return $partial($x)($y)
                    }
   return
       $fAnd(false(), true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing this with an Xpath 3.1 processor, an error is raised: “&lt;em&gt;1 argument supplied, 0 expected: function() as xs:boolean { false() }.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/205463393-3b4558ac-66d9-453f-81fc-f83ec0499425.png" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;But according to the updated “&lt;a href="https://qt4cg.org/pr/279/xquery-40/xpath-40.html#id-coercion-rules"&gt;Coercion Rules / Function Coercion&lt;/a&gt;” in Xpath 4.0, no error will occur:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;em&gt;If &lt;em&gt;F&lt;/em&gt; has lower arity than the expected type, then &lt;em&gt;F&lt;/em&gt; is wrapped in a new function that declares and ignores the additional argument; the following steps are then applied to this new function.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For example, if the expected type is &lt;code&gt;function(node(), xs:boolean) as  xs:string&lt;/code&gt;, and the supplied function is &lt;code&gt;fn:name#1&lt;/code&gt;, then the supplied function is effectively replaced by &lt;code&gt;function($n as node(), $b as xs:boolean) as xs:string {fn:name($n)}&lt;/code&gt;&lt;/em&gt;”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is exactly the place where the XPath processor will call the lower-arity function without providing to it the ignored, and not needed to be evaluated, additional argument.&lt;/p&gt;
&lt;p&gt;Thus, according to this rule, an XPath 4.0 processor will successfully evaluate the above expression and will not issue the error shown above.&lt;/p&gt;
&lt;p&gt;Finally, we can put the &lt;em&gt;lazy&lt;/em&gt; hint on a function declaration or on a function call, or on both places:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, lazy $y as xs:boolean) as  xs:boolean
   {
     let $partial := function($x as xs:boolean) as function(lazy xs:boolean) as xs:boolean
                           {
                              if(not($x)) then -&amp;gt;(){false()}
                                          else -&amp;gt;($t) {$t}
                           }
      return $partial($x)( lazy $y)
   }
   return
       $fAnd(false(), lazy true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How to write short-circuiting functions?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The code above is a good example how one can write a short-circuiting function evaluating which the XPath processor would be aware that a short-circuit is happening but instead of signaling arity error as an XPath 3.1 processor does, will logically ignore the unneeded 2nd argument.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #280 created</title>
   <pubDate>Thu, 1 Dec 2022 15:14:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/280</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-280</guid>
   <description>&lt;div&gt;&lt;p&gt;Why is resolve-uri forbidden from resolving against a URI that contains a fragment identifier?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The 3.1 F&amp;amp;O spec says, of &lt;code&gt;fn:resolve-uri()&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A dynamic error is raised [&lt;a href="https://www.w3.org/XML/Group/qtspecs/specifications/xpath-functions-31/html/Overview.html#ERRFORG0002"&gt;err:FORG0002&lt;/a&gt;] if $base is not a valid IRI according to the rules of RFC3987, extended with an implementation-defined subset of the extensions permitted in LEIRI, or if it is not a suitable IRI to use as input to the chosen resolution algorithm (for example, if it is a relative IRI reference, if it is a non-hierarchic URI, or &lt;strong&gt;if it contains a fragment identifier&lt;/strong&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(emphasis added by me)&lt;/p&gt;
&lt;p&gt;What in the name of all things is that about? I've never noticed that before, and I haven't seen any other API (the URL API in Node and the browser for example) that cares.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;resolve-uri('test.xml', 'http://example.com/path/file.xml#foo')&lt;/code&gt; === &lt;code&gt;http://example.com/path/test.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I don't see why the presence of a fragment identifier should matter in the least.&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; let url = new URL("http://example.com/path/file.xml#foo")
&amp;gt;&amp;gt; console.log(url.href)
http://example.com/path/file.xml#foo
&amp;gt;&amp;gt; let resolved = new URL("test.xml", url);
&amp;gt;&amp;gt; console.log(resolved.href)
http://example.com/path/test.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #270 closed</title>
   <pubDate>Wed, 30 Nov 2022 10:57:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/270</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-270</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect statement about named modes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #273 closed</title>
   <pubDate>Wed, 30 Nov 2022 10:56:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/273</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-273</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue270 xslt mode visibility&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #279 created</title>
   <pubDate>Tue, 29 Nov 2022 21:59:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/279</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-279</guid>
   <description>&lt;div&gt;&lt;p&gt;Rewrite XSLT §10.3.4 (function overriding) for clarity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Essentially editorial - clarifies the existing rules, as described in issue #277&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #278 created</title>
   <pubDate>Tue, 29 Nov 2022 17:16:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/278</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-278</guid>
   <description>&lt;div&gt;&lt;p&gt;array bound checking&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Similar functions on arrays and sequences have different behaviour as regards bound checking. For example, fn:head() returns an empty sequence if the input is empty, while array:head() throws an error.&lt;/p&gt;
&lt;p&gt;Sometimes we want the error, sometimes we don't, but this should be orthogonal to whether we are using sequences or arrays.&lt;/p&gt;
&lt;p&gt;Is there a way we can adapt the sequence functions to throw an error, or adapt the array functions so they don't?&lt;/p&gt;
&lt;p&gt;Various ideas have been put forward, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add extra optional parameters to functions to select the behaviour&lt;/li&gt;
&lt;li&gt;mirror the relevant functions (e.g. into a different namespace) to create an alternative version with different behaviour&lt;/li&gt;
&lt;li&gt;add options to the static context (array-bound-checking=yes|no, sequence-bound-checking=yes|no) to switch the behaviour (with appropriate mechanisms in XQuery and XSLT -- and perhaps XPath -- to set these options)&lt;/li&gt;
&lt;li&gt;do nothing, let users solve the problem for themselves by writing user-defined functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note 1: the difference in behaviour affects operators as well as functions: contrast &lt;code&gt;$seq[0]&lt;/code&gt; (which returns ()) with &lt;code&gt;$array(0)&lt;/code&gt; (throws error). Making &lt;code&gt;$seq[0]&lt;/code&gt; throw an error would mean we have to define it in a different way, since the formulation &lt;code&gt;$seq[position()=$N]&lt;/code&gt; is intrinsically error-free.&lt;/p&gt;
&lt;p&gt;Note 2: if &lt;code&gt;$array(0)&lt;/code&gt; doesn't throw an error, it's not immediately obvious what it should do. Returning an empty sequence isn't ideal because the empty sequence is a valid entry in an array. For maps we have the same problem, which is why we have two functions &lt;code&gt;map:get()&lt;/code&gt; and &lt;code&gt;map:contains()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #277 created</title>
   <pubDate>Tue, 29 Nov 2022 12:50:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/277</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-277</guid>
   <description>&lt;div&gt;&lt;p&gt;Overriding functions using xsl:import&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XSLT 3.0, you can have a module M that contains an xsl:function F#2, and in another module you can import M, and declare another xsl:function F#3.&lt;/p&gt;
&lt;p&gt;In the 4.0 spec we appear to disallow this with the paragraph (in §10.3.4):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A stylesheet function may be overridden by another stylesheet function with the same name that has higher [import precedence]. This is only allowed, however, if the [arity range] of the overriding function includes the totality of the arity range of the overridden function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In fact, the error conditions we go on to define (XTSE0769 and XTSE0770) are more carefully worded and do not make the above situation an error. XTSE0769 says that if F has higher import precedence than G, then either the arity ranges of F and G must be disjoint, or the arity range of F must include the totality of G. XTSE0770 says that if F and G have the same import precedence, then their arity ranges must be disjoint.&lt;/p&gt;
&lt;p&gt;The paragraph cited should be replaced with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A stylesheet function may be overridden by another stylesheet function with the same name that has higher [import precedence]. This is only allowed, however, if either (a) the [arity range] of the overriding function includes the totality of the arity range of the overridden function, or (b) the two arity ranges are non-overlapping.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is also scope for editorial improvement to §10.3.4. It describes three separate scenarios:&lt;/p&gt;
&lt;p&gt;(a) overriding functions using xsl:import and import precedence&lt;/p&gt;
&lt;p&gt;(b) overriding functions using xsl:use-package and xsl:override&lt;/p&gt;
&lt;p&gt;(c) overriding extension/external functions using xsl:function (or vice versa)&lt;/p&gt;
&lt;p&gt;and it would be much easier to read the section if these were clearly distinguished.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #276 closed</title>
   <pubDate>Sun, 27 Nov 2022 17:42:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/276</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-276</guid>
   <description>&lt;div&gt;&lt;p&gt;Make './gradlew publish' work on Windows #255&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #255 closed</title>
   <pubDate>Sun, 27 Nov 2022 17:42:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/255</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-255</guid>
   <description>&lt;div&gt;&lt;p&gt;Build error running gradlew publish on Windows&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #276 created</title>
   <pubDate>Sun, 27 Nov 2022 17:37:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/276</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-276</guid>
   <description>&lt;div&gt;&lt;p&gt;Make './gradlew publish' work on Windows #255&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #255&lt;/p&gt;
&lt;p&gt;Repeat after me, "filenames are not URIs." Not on some platforms, anyway.&lt;/p&gt;
&lt;p&gt;I still get a warning about "correctness" because of the interaction between a couple of tasks. That doesn't happen on a *nix platform so I don't know if it's related to the difference between forward and backward slashes or if it's a consequence of the build changes I made to support the new SVG (that might be) in data model. They seem harmless for the moment.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #275 created</title>
   <pubDate>Sat, 26 Nov 2022 22:57:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/275</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-275</guid>
   <description>&lt;div&gt;&lt;p&gt;Problems with nt/xnt links to grammar terms&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm trying to work out why we're getting linking errors during the build when linking to grammatical terms.&lt;/p&gt;
&lt;p&gt;In etc/XT40.xml (after changing extract.xsl to produce tidier namespace declarations, I'm seeing entries like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   &amp;lt;nt def="doc-xpath40-SequenceType" xlink:type="simple"&amp;gt;SequenceType&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="doc-xpath40-ItemType" xlink:type="simple"&amp;gt;ItemType&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="doc-xpath40-OccurrenceIndicator" xlink:type="simple"&amp;gt;OccurrenceIndicator&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="prod-xpath40-AnyItemTest" xlink:type="simple"&amp;gt;AnyItemTest&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="doc-xpath40-TypeName" xlink:type="simple"&amp;gt;TypeName&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="doc-xpath40-KindTest" xlink:type="simple"&amp;gt;KindTest&amp;lt;/nt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the problem entries seem to be the ones prefixed "prod-" rather than "doc-".&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;extract.xsl&lt;/code&gt; stylesheet simply copies what it finds in &lt;code&gt;xpath-assembled.xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The decision seems to be made in &lt;code&gt;grammar2spec.xsl&lt;/code&gt;, for example line 523 reads&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:param name="result_id_docprod_part"/&amp;gt; &amp;lt;!-- 'doc-' or 'prod-' --&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The parameter is set to "prod-" in &lt;code&gt;add-non-terminals&lt;/code&gt; (line 473) and in &lt;code&gt;add-terminals&lt;/code&gt; (line 488), and is set to "doc-" in &lt;code&gt;show-prod&lt;/code&gt; (line 513).&lt;/p&gt;
&lt;p&gt;Looking more carefully, all productions listed in XT40.xml have a "prod-" entry (at least one...) and most of them also have a "doc-" entry. The problem cases are those that do not have a "doc-" entry. Which suggests that &lt;code&gt;show-prod&lt;/code&gt; is not selecting them.&lt;/p&gt;
&lt;p&gt;In a small number of cases, when processing the XSLT specification, the show-prod template is outputting the message&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WARNING!! production with name="MapTest" not found&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is produced for MapTest, ArrayTest, EnumerationType, and NamedItemType. The problem here appears to be that the production is referenced in the XSLT spec but in the grammar file it is not shown with &lt;code&gt;if="xslt40-patterns"&lt;/code&gt;, so it is not present in the pattern grammar.&lt;/p&gt;
&lt;p&gt;For productions like AnyItemTest, the problem is different. It looks to me as if &lt;code&gt;show-prod&lt;/code&gt; is not being called for these terms.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show-prod&lt;/code&gt; is called from one place only: &lt;code&gt;assemble-spec.xsl&lt;/code&gt; line 208. This is in a template rule with &lt;code&gt;match="prodrecap"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sure enough, &lt;code&gt;AnyItemTest&lt;/code&gt; does not appear to have a &lt;code&gt;prodrecap&lt;/code&gt; in the XPath spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #274 created</title>
   <pubDate>Sat, 26 Nov 2022 10:47:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/274</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-274</guid>
   <description>&lt;div&gt;&lt;p&gt;What would it take/would it be possible to build a module repository for QT?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have an ever growing list of proposed convienence functions. I am not opposed, in principle, to adding convenience functions, but we don’t have any principled criteria (AFAICT) for which ones to add and which ones to reject. That’s not surprising, and I’m also not opposed to that. But I’m sure there are hundreds, perhaps thousands, of such functions. At some point, we’re going to start to resist adding more simply because we’ve added so many. Some of us may already be nearing that point.&lt;/p&gt;
&lt;p&gt;It seems to me that the alternative is to do what TeX, Perl, Python, Node, etc. do: make it easy for users to download, install, and use libraries. (I’m carefully using the term “library” here where I might prefer to use “package” or “module” because we already have “package” and “module” which mean other things.)&lt;/p&gt;
&lt;p&gt;What would it take to make that possible?&lt;/p&gt;
&lt;p&gt;One problem we have is that there are two (perhaps three, or more, depending on how you count) different QT languages and they aren’t all mutually interoperable. My XSLT implementation of &lt;code&gt;fn:parse-uri&lt;/code&gt; for example, isn’t directly usable by an XQuery product that doesn’t implement XSLT or some other product that only uses XPath.&lt;/p&gt;
&lt;p&gt;Suppose we added an &lt;code&gt;import library&lt;/code&gt; declaration to XPath, similar to the &lt;code&gt;import module&lt;/code&gt; declaration in XQuery&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LibraryImport := "import" "library"
                   ("namespace" NCName "=")?
                   "at" URILiteral
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a corresponding &lt;code&gt;&amp;lt;xsl:library&amp;gt;&lt;/code&gt; instruction to XSLT.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:library
  namespace = uri
  href = uri /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The semantics of each is that it searches an implementation-defined set of locations for a module that matches the URI. If it finds one, it loads the functions declared in that library. If a namespace is given, it loads only the functions in the namespace provided.&lt;/p&gt;
&lt;p&gt;We’d expect all implementations to be able to load libraries that only used XPath constructions. An XSLT processor might also be able to load XSLT constructions. An XQuery processor might also be able to load XQuery constructions.&lt;/p&gt;
&lt;p&gt;We could define a library file format that allowed an implementor to provide several different implementations of a function, where the processor could choose the best one (in some implementation-dependent way). This would also give us a place to hang version numbers and other relevant metadata.&lt;/p&gt;
&lt;p&gt;With that much in place, would it be more practical to use XPath extension modules?&lt;/p&gt;
&lt;p&gt;Consider the following scenario. I want to use a URI relativization function (as requested in #269). Dimitre provided a pure XPath implementation, so we don’t actually &lt;em&gt;have&lt;/em&gt; to implement it as a native function, we just have to make it easy to use. Imagine that EXPath.org (for example) provided a machine readable list of of libraries.&lt;/p&gt;
&lt;p&gt;I run a hypothetical “expath” command to search the machine readlabe directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ expath search relative
xpath uri-relativize -- returns the relative location between two URIs
xslt  doc-relative -- convenience functions for accessing “uncles”, “aunts”, etc.
xpath relative-rank -- funtions to score XML documents
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It found three libraries that matched “relative”. That first one sounds promising.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ expath show uri-relativize
The uri-relativize library provides uri-relativize(), an XPath
function that resolves one absolute URI relative to another.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That sounds like what I want, so I install it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ expath install uri-relativize
Downloading uri-relativize … installing … done.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in my stylesheet I simply add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:library href="uri-relativize"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or in a language that only uses XPath, I add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import library at "uri-relativize"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and I can use the &lt;code&gt;uri-relativize()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;I think the important parts are that the implementation searches for libraries so that I don’t have to identify precisly where they were installed and that we somehow make it practical to use them without, though it pains me to say this, explicit namespace bindings.&lt;/p&gt;
&lt;p&gt;Perhaps we could allow libraries to “inject” functions into the default function namespace, or we could have a function namespace search list and maybe libraries could extend that.&lt;/p&gt;
&lt;p&gt;The format of the library might be something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;library xmlns="xpath-library" name="uri-relativize" version="1.0.3"
         namespace="http://example.com/my/namespace"&amp;gt;
&amp;lt;provides&amp;gt;
function uri-relativize($path1 as xs:anyURI, $path2 as xs:anyURI) as xs:anyURI
&amp;lt;/provides&amp;gt;
&amp;lt;xpath version="3.0"&amp;gt;
…xpath implementation…
&amp;lt;/xpath&amp;gt;
&amp;lt;xslt version="4.0"&amp;gt;
…xslt 4.0 implementation…
&amp;lt;/xslt&amp;gt;
&amp;lt;xslt version="3.0"&amp;gt;
…xslt 3.0 implementation…
&amp;lt;/xslt&amp;gt;
&amp;lt;library&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I’m sure if we looked closely at the metadata provided in other system’s packages, we’d see I’ve left a bunch of stuff out. You’d probably, for example, want some way of saying one package depends on another and having the processor load those automatically.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #273 created</title>
   <pubDate>Fri, 25 Nov 2022 18:09:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/273</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-273</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue270 xslt mode visibility&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR fixes issue #270 concerning the visibility of XSLT modes.&lt;/p&gt;
&lt;p&gt;It also deals with a lot of editorial issues, some highlighted in issue #275.&lt;/p&gt;
&lt;p&gt;It changes the manual change markup in the XSLT spec to use &lt;code&gt;at-"date"&lt;/code&gt; format rather than &lt;code&gt;at="draft-number"&lt;/code&gt; (dates are more useful for the incremental development process we are following). And it fixes some cross-spec-reference issues, and some violations of hyphenation diktats.&lt;/p&gt;
&lt;p&gt;Also bundled with this bug fix are other editorial changes to fix cross-spec linking errors; for details see the individual commit messages.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 013 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 25 Nov 2022 14:32:27 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-29</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-29</guid>
</item><item>
   <title>Issue #272 created</title>
   <pubDate>Fri, 25 Nov 2022 10:14:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/272</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-272</guid>
   <description>&lt;div&gt;&lt;p&gt;Setting parameter values in xsl:use-package&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It's possible for two different components of an application to use the same library package (via &lt;code&gt;xsl:use-package&lt;/code&gt;) and in principle each of them should be able to configure that package (by setting its global parameters) in different ways. Currently though it's not at all clear how the global parameters of a used package should be set (and there are some inconsistencies in the spec concerning how the &lt;code&gt;visibility&lt;/code&gt; attribute on such parameters is supposed to work).&lt;/p&gt;
&lt;p&gt;I think that it's fairly straightforward to plug this gap by allowing xsl:use-package to have xsl:with-param children, naming the stylesheet parameters in the used package and assigning them values. For static parameters the values must be assigned using static expressions; for non-static parameters any expression can be used: because of the scoping rules and the syntactic constraints on &lt;code&gt;xsl:use-package&lt;/code&gt;, the value of the expression can only depend on global variable and parameters in the using stylesheet package.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #271 created</title>
   <pubDate>Thu, 24 Nov 2022 16:10:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/271</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-271</guid>
   <description>&lt;div&gt;&lt;p&gt;Amendments to data model spec as per minutes of 2022-11-22&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes to data model spec, see actions QT4CG-012-01, -02, -03, -04, -06.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #270 created</title>
   <pubDate>Thu, 24 Nov 2022 13:56:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/270</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-270</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect statement about named modes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;On the description of the 'visibility' attribute &lt;a href="https://qt4cg.org/specifications/xslt-40/Overview-diff.html#declaring-modes"&gt;here&lt;/a&gt; it says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A named mode is not eligible to be used as the &lt;a href="https://qt4cg.org/specifications/xslt-40/Overview-diff.html#dt-initial-mode"&gt;initial mode&lt;/a&gt; if its visibility is private.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But, if the mode is designated as default mode of the implicit or explicit &lt;code&gt;xsl:package&lt;/code&gt; then it's eligible as an initial mode. Having a private visibility does not affect it's initial status. Furthermore, the unnamed mode is always private, and always initial.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #269 created</title>
   <pubDate>Thu, 24 Nov 2022 13:20:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/269</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-269</guid>
   <description>&lt;div&gt;&lt;p&gt;Function for URI relativization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Signature:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;relativize($uri as xs:anyURI, $base as xs:anyURI) as xs:anyURI
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example: &lt;a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/net/URI.html#relativize(java.net.URI)"&gt;URI::relativize&lt;/a&gt; in Java&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #268 created</title>
   <pubDate>Thu, 24 Nov 2022 10:28:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/268</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-268</guid>
   <description>&lt;div&gt;&lt;p&gt;New type-hierarchy images / descriptions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #265&lt;/p&gt;
&lt;p&gt;This is my attempt to improve the type-hierarchy images.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There &lt;em&gt;were&lt;/em&gt; graphics already, but they were accidentally not being copied into the right place.&lt;/li&gt;
&lt;li&gt;But, they're for 3.1 and they're in some format I don't recognize, so&lt;/li&gt;
&lt;li&gt;I created new SVG ones anyway, that folks may or may not like&lt;/li&gt;
&lt;li&gt;I replaced the big, ugly yellow tables with prose. I concluded that accessibility was the only reason they were present.&lt;/li&gt;
&lt;li&gt;The colors are a little different, and a little "off", but they're explicitly chosen from a pallet that offers unambiguously differenty colors for the three most common forms of color-blindness.&lt;/li&gt;
&lt;li&gt;One of the SVG images is too wide, I'm not sure what to do about that&lt;/li&gt;
&lt;li&gt;The labels are text, so you can search for them, and xs:anyAtomicType is a link. We could make more links.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #267 closed</title>
   <pubDate>Thu, 24 Nov 2022 10:16:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/267</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-267</guid>
   <description>&lt;div&gt;&lt;p&gt;Stylesheet updates for inline-SVG in the data model&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #267 created</title>
   <pubDate>Thu, 24 Nov 2022 10:08:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/267</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-267</guid>
   <description>&lt;div&gt;&lt;p&gt;Stylesheet updates for inline-SVG in the data model&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I need to commit this first, and separately, so that the build will be correct.&lt;/p&gt;
&lt;p&gt;Also fixed an obvious CSS typo.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #266 created</title>
   <pubDate>Wed, 23 Nov 2022 18:49:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/266</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-266</guid>
   <description>&lt;div&gt;&lt;p&gt;Add an option on xsl:copy-of to copy a subtree with a change of namespace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It's a common requirement to copy a subtree with a change of namespace.&lt;/p&gt;
&lt;p&gt;It can be done easily enough in XSLT with apply-templates in a custom mode, but an option on xsl:copy-of could make it a lot easier. It could also potentially be a lot more efficient.&lt;/p&gt;
&lt;p&gt;Alternatively, this could be provided as a function, or an option on the copy-of function.&lt;/p&gt;
&lt;p&gt;Or it could be a new higher order function &lt;code&gt;copy-renaming($node, function($name){ xs:QName('new uri', local-name-from-QName($name) })&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There's a danger of course of packing in too much functionality and making it just as complex/inefficient as using a custom mode.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #265 created</title>
   <pubDate>Wed, 23 Nov 2022 12:46:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/265</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-265</guid>
   <description>&lt;div&gt;&lt;p&gt;Type hierarchy tables/diagrams&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;On 22 November, we mentioned in passing that the type hierarchy tables in the Data Model spec are hard to read. They're a garish yellow for no obvious reason and the font size is very small. Would replacing them with diagrams like this be an improvement?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/36793/203549753-a970038e-4b8b-44cb-97cb-8d52d2fc736f.png" alt="out"/&gt;&lt;/p&gt;
&lt;p&gt;(This is the largest and most difficult to represent, I think. I've grouped some of the atomic types together to make the drawing more aesthetically pleasing. I don't think that interferes with comprehension, though might need to be explained.)&lt;/p&gt;
&lt;p&gt;There's no particular rhyme or reason to the order of the items in the "second column" except to leave room for the longer hierarchies further to the right.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #264 closed</title>
   <pubDate>Wed, 23 Nov 2022 09:36:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/264</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-264</guid>
   <description>&lt;div&gt;&lt;p&gt;THIS IS JUST A TEST IGNORE THIS&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #264 created</title>
   <pubDate>Wed, 23 Nov 2022 09:29:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/264</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-264</guid>
   <description>&lt;div&gt;&lt;p&gt;THIS IS JUST A TEST IGNORE THIS&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 012 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 22 Nov 2022 17:33:38 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/11-22</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-11-22</guid>
</item><item>
   <title>Issue #263 closed</title>
   <pubDate>Tue, 22 Nov 2022 12:29:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/263</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-263</guid>
   <description>&lt;div&gt;&lt;p&gt;Exclude spec XSL from PRs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #263 created</title>
   <pubDate>Tue, 22 Nov 2022 12:22:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/263</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-263</guid>
   <description>&lt;div&gt;&lt;p&gt;Exclude spec XSL from PRs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Letting the specification-specific XSL through means you can get a mismatch with the common XSL. So don't do that.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 012 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 21 Nov 2022 11:34:37 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-22</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-22</guid>
</item><item>
   <title>Issue #262 created</title>
   <pubDate>Sun, 20 Nov 2022 23:10:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/262</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-262</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath 4.0] Navigation in deep-structured arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;At present there is no convenient way to navigate down a deep-structured array (whose members are themselves arrays and maybe even (recursively) deep-structured arrays themselves).&lt;/p&gt;
&lt;p&gt;For example, given the array:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt; [1, [2, 3], [4, [5, 6]], (7, 8, 9) ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we cannot navigate to &lt;code&gt;6&lt;/code&gt; with a single function call, nor do we have a convenient search mechanism that will give us all index(es)-paths that navigate to &lt;code&gt;6&lt;/code&gt;, in this case just the single index-path (3, 2, 2).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This proposal is to extend the &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/pr/258/xpath-functions-40/autodiff.html#func-array-get"&gt;&lt;code&gt;array:get()&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; function and the &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40-diff.html#id-array-lookup"&gt;&lt;strong&gt;&lt;em&gt;array lookup using function call syntax&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; to accept as their last argument not just a single integer position, but a sequence of integers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sequence of integer position is called &lt;strong&gt;"item-navigation-path"&lt;/strong&gt;, or simply: &lt;strong&gt;"navigation-path"&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For the array defined above, the navigation path to the contained item &lt;code&gt;6&lt;/code&gt; is:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;(3, 2, 2)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;XPath implementation&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $ar := [1, [2, 3], [4, [5, 6]], (7, 8, 9) ],
    $get := -&amp;gt; ($input as array(*), $indices as xs:integer*)
            {
              let $getHelper := -&amp;gt; ($input as array(*), $indices as xs:integer*, $self as function(*))
              {
                let $headIndex := head($indices), $restindices := tail($indices)
                  return
                    if(exists($restindices))
                      then $self($input($headIndex),$restindices, $self)
                      else if(exists($headIndex))
                             then $input($headIndex)
                             else $input
               }
              return $getHelper($input, $indices, $getHelper)
            }
  return
    $ar =&amp;gt; $get((3, 2, 2))
     (: (: Or alternatively : :) $get($ar, (3, 2, 2)) :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the above expression is evaluated, the expected, correct result is produced:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To allow a simple and intuitive deep-indexing navigation with a single function call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To allow for sophisticated deep-searching functionality (like the current &lt;code&gt;array:index-where()&lt;/code&gt; and &lt;code&gt;array:index-of()&lt;/code&gt;, but not just scratching the surface) to return the navigation paths to wanted items of interest, which then could be stored, passed to other functions and easily retrieved.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Other examples&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $ar := [1, [2, 3], [4, [5, 6]], (7, 8, 9) ],
    $get := -&amp;gt; ($input as array(*), $indices as xs:integer*)
            {
              let $getHelper := -&amp;gt; ($input as array(*), $indices as xs:integer*, $self as function(*))
              {
                let $headIndex := head($indices), $restindices := tail($indices)
                  return
                    if(exists($restindices))
                      then $self($input($headIndex),$restindices, $self)
                      else if(exists($headIndex))
                             then $input($headIndex)
                             else $input
               }
              return $getHelper($input, $indices, $getHelper)
            }
  return
     ( $get($ar, (3, 2, 2)), $get($ar, 2), $get($ar, (3,1)),   $get($ar, (3,2)), $get($ar, ())  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the above expression is evaluated, all the expected, correct results are produced:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;6
[2,3]
4
[5,6]
[1,[2,3],[4,[5,6]],(7,8,9)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/202931815-9fd429f4-55e1-4a79-bd0a-fc6c98990393.png" alt="image"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #261 created</title>
   <pubDate>Sun, 20 Nov 2022 09:48:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/261</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-261</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposed fn:char function - see issue 121&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Although discussion on issue #121 did not converge on a consensus, this PR proposes a new function which I believe meets the requirements expressed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #260 created</title>
   <pubDate>Sat, 19 Nov 2022 23:54:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/260</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-260</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] array:index-of&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Seems we are missing the corresponding array function to the standard (on sequences) &lt;strong&gt;&lt;em&gt;fn:index-of(&lt;/em&gt;&lt;/strong&gt;).&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Returns a sequence of positive integers giving the positions within the array &lt;code&gt;$input&lt;/code&gt; of items that are equal to the &lt;code&gt;$search-member&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;array:index-of(
               $input  as array(*),	
               $searched-member as item()*,
               $compare($x as item()*, $y as item()*) as xs:boolean := fn:deep-equal#2
                 ) as xs:integer*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Properties&lt;/h3&gt;
&lt;p&gt;This function is deterministic, context-independent, and focus-independent&lt;/p&gt;
&lt;h3&gt;Rules&lt;/h3&gt;
&lt;p&gt;The result of the function is a sequence of integers, in monotonic ascending order, representing the &lt;code&gt;1&lt;/code&gt;-based positions in the input array of those members &lt;code&gt;$mem&lt;/code&gt; for whom &lt;code&gt;$compare($mem, $searched-member)&lt;/code&gt; is &lt;code&gt;true()&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;More formally, the function returns the result of the XPath expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;  (1 to array:size($input)) ! (-&amp;gt; {  .[$compare($input(.), $searched-member)] }) (.)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/202876246-0256f0e7-c736-48b5-b862-7ebbe142d9ce.png" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;And also this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/202876368-9dd18c8c-888f-41e2-991d-b0779bc6dcd9.png" alt="image"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #259 created</title>
   <pubDate>Fri, 18 Nov 2022 23:24:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/259</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-259</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue #74 - add the fn:parse-html function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR makes the following changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add an &lt;code&gt;.editorconfig&lt;/code&gt; file to allow editors and IDEs to indent the XML source documents consistently.&lt;/li&gt;
&lt;li&gt;Group the XML and JSON parsing and serialization functions into a common top-level section.&lt;/li&gt;
&lt;li&gt;Update the html5 bibref to the WHATWG specification -- the old HTML5 link redirects there.&lt;/li&gt;
&lt;li&gt;Add a new fn:parse-html function specification.&lt;/li&gt;
&lt;li&gt;Define a mapping between the HTML DOM and the XDM nodes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The function specification itself is complete. The HTML DOM to XDM node mapping currently only contains the overview. I'm going to write that for this PR, this is just to start the ball rolling in specifying this function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #258 created</title>
   <pubDate>Fri, 18 Nov 2022 19:25:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/258</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-258</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue #114 - add array:index-where() function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The function is symmetric with fn:index-where.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #257 created</title>
   <pubDate>Fri, 18 Nov 2022 18:02:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/257</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-257</guid>
   <description>&lt;div&gt;&lt;p&gt;Improving the styling/presentation/prepresentation of the record types in the F&amp;amp;O spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm not keen on the † symbol being used to indicate and link record types. This is not used elsewhere, and when a record type is used as a type, there is a link to the record type definition. I think that that link is sufficient.&lt;/p&gt;
&lt;p&gt;The presentation of the record type definition has the following format:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;†type-name:
record(
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The record part is fine, but I find the &lt;code&gt;†type-name:&lt;/code&gt; part clunky. For functions, omiting the &lt;code&gt;declare function&lt;/code&gt; part from the XQuery syntax makes sense as the function signature is readable without that.&lt;/p&gt;
&lt;p&gt;The XQuery 4.0 draft spec has the following (as of yet unapproved) syntax for defining type aliases: https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-item-type-declaration. I would suggest using something similar, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type-name as record(
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is in line with the way function declarations are specified and looks more readable to me.&lt;/p&gt;
&lt;p&gt;Finally, ommitting the id from the &lt;code&gt;record&lt;/code&gt; element results in &lt;code&gt;†:&lt;/code&gt; before the record. -- It would be nice if instead of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div3 id="html-parser-options"&amp;gt;
           &amp;lt;head&amp;gt;HTML parser options&amp;lt;/head&amp;gt;
           &amp;lt;example role="record"&amp;gt;
              &amp;lt;record id="parse-html-options"&amp;gt;
                 &amp;lt;arg name="method" type="union(enum(&amp;amp;quot;html5&amp;amp;quot;), xs:string)"/&amp;gt;
                 &amp;lt;arg name="*"/&amp;gt;
              &amp;lt;/record&amp;gt;
           &amp;lt;/example&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you could write something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div3 id="parse-html-options"&amp;gt;
           &amp;lt;head&amp;gt;HTML parser options&amp;lt;/head&amp;gt;
           &amp;lt;example role="record"&amp;gt;
              &amp;lt;record type-name="parse-html-options"&amp;gt;
                 &amp;lt;arg name="method" type="union(enum(&amp;amp;quot;html5&amp;amp;quot;), xs:string)"/&amp;gt;
                 &amp;lt;arg name="*"/&amp;gt;
              &amp;lt;/record&amp;gt;
           &amp;lt;/example&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #256 created</title>
   <pubDate>Fri, 18 Nov 2022 16:52:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/256</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-256</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery and XSLT function declarations: static and dynamic context for default parameter values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the new text for default values on parameters in XQuery function declarations, we don't say clearly what the static context for the default value expression is. In particular we don't say that it excludes the other parameters of the function. The XSLT spec has similar (though slightly different) shortcomings.&lt;/p&gt;
&lt;p&gt;There's a slight complication in that we say the dynamic context for the default value expression is the dynamic context of the function call. But what if the default value is a variable reference &lt;code&gt;$x&lt;/code&gt;? Statically, this will be (presumably, though we don't currently say) be bound to a global variable &lt;code&gt;$x&lt;/code&gt;. Now, we say (under "dynamic context") that the dynamic "variable values" contains the same [expanded QNames] as the [in-scope variables] in the [static context] for the expression. But, the static context for the default value expression and the static context for the function call have different in-scope variables and they must therefore have different variable values in the dynamic context, so it's wrong to say that the dynamic context for the default value expression is the same as that of the function call.&lt;/p&gt;
&lt;p&gt;My first instinct would be to restrict the default value to being what XSLT calls a "static expression" (this isn't defined in XQuery, but it could be defined easily enough). However, that would disallow using "." as the default value expression, which is something we wanted to permit.&lt;/p&gt;
&lt;p&gt;The next option would be to say that the dynamic context for a default value expression is the same as the dynamic context of the function call except that "variable values" contains bindings for global variables only. This feels rather kludgey, but it's workable in principle. (It's worth noting, and might be worth noting in the spec, that in XQuery all components of the dynamic context except the focus and the variable values are typically immutable within an execution scope. The same isn't true in XSLT, where we have additional dynamic context components like regex-group() and current-output-uri() to worry about.).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #255 created</title>
   <pubDate>Fri, 18 Nov 2022 12:01:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/255</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-255</guid>
   <description>&lt;div&gt;&lt;p&gt;Build error running gradlew publish on Windows&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When running &lt;code&gt;./gradlew publish&lt;/code&gt; in Windows (via Git Bash) or running the publish gradle task in an IntelliJ Run/Debug configuration, I get the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Task :xquery_assemble_xpath
Transforming specifications/xquery-40/src/xpath.xml...
Error at char 9 in expression in xsl:variable/@select on line 168 column 60 of assemble-spec.xsl:
  FODC0005  Invalid URI
  file:/D:/Projects/xquery-xslt/qtspecs/build/xquery-40/src/xpath-preprocessed.xml/../D:\Projects\xquery-xslt\qtspecs\build/xquery-40/temp-xpath-grammar.xml. Caused by java.net.URISyntaxException: Illegal character in opaque part at index 2: D:\Projects\xquery-xslt\qtspecs\build/xquery-40/temp-xpath-grammar.xml
  In template rule with match="prodrecap" on line 152 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/style/assemble-spec.xsl#51
  In template rule with match="node()[fn:empty(...)]" on line 48 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/style/assemble-spec.xsl#51
  In template rule with match="node()[fn:empty(...)]" on line 48 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/style/assemble-spec.xsl#51
  In template rule with match="node()[fn:empty(...)]" on line 48 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/style/assemble-spec.xsl#51
  In template rule with match="node()[fn:empty(...)]" on line 48 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/specifications/xquery-40/style/assemble-xquery.xsl#26
  In template rule with match="/" on line 13 of assemble-xquery.xsl
Invalid URI file:/D:/Projects/xquery-xslt/qtspecs/build/xquery-40/src/xpath-preprocessed.xml/../D:\Projects\xquery-xslt\qtspecs\build/xquery-40/temp-xpath-grammar.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I've tracked this down to the &lt;code&gt;grammar-file&lt;/code&gt; option passed to the XSLT in the &lt;code&gt;build.gradle&lt;/code&gt; file, but I'm not currently sure what the fix should be.&lt;/p&gt;
&lt;p&gt;Note: running this within Linux via WSL works, so the issue looks like it is due to handling Windows paths as file URIs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 011 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 15 Nov 2022 18:00:42 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/11-15</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-11-15</guid>
</item><item>
   <title>QT4 CG meeting 011 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 11 Nov 2022 12:30:12 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-15</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-15</guid>
</item><item>
   <title>QT4 CG meeting 010 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Thu, 10 Nov 2022 17:37:37 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/11-08</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-11-08</guid>
</item><item>
   <title>QT4 CG meeting 010 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 7 Nov 2022 17:20:10 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-08</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-08</guid>
</item><item>
   <title>QT4 CG meeting 009 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 1 Nov 2022 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/11-01</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-11-01</guid>
</item><item>
   <title>QT4 CG meeting 009 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 28 Oct 2022 08:21:36 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-01</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-01</guid>
</item><item>
   <title>QT4 CG meeting 008 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 25 Oct 2022 16:47:40 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/10-25</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-10-25</guid>
</item><item>
   <title>QT4 CG meeting 008 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sat, 22 Oct 2022 09:49:46 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/10-25</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-10-25</guid>
</item><item>
   <title>QT4 CG meeting 007 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 18 Oct 2022 17:01:35 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/10-18</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-10-18</guid>
</item><item>
   <title>QT4 CG meeting 007 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 14 Oct 2022 16:44:32 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/10-18</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-10-18</guid>
</item><item>
   <title>QT4 CG meeting 006 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 11 Oct 2022 16:47:33 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/10-11</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-10-11</guid>
</item><item>
   <title>QT4 CG meeting 006 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Tue, 4 Oct 2022 16:56:16 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/10-11</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-10-11</guid>
</item><item>
   <title>QT4 CG meeting 005 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 4 Oct 2022 16:56:16 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/10-04</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-10-04</guid>
</item><item>
   <title>QT4 CG meeting 005 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 30 Sep 2022 16:50:29 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/10-04</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-10-04</guid>
</item><item>
   <title>QT4 CG meeting 004 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 27 Sep 2022 16:40:49 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/09-27</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-09-27</guid>
</item><item>
   <title>QT4 CG meeting 004 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sun, 25 Sep 2022 17:48:07 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/09-27</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-09-27</guid>
</item><item>
   <title>QT4 CG meeting 003 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 20 Sep 2022 18:25:39 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/09-20</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-09-20</guid>
</item><item>
   <title>QT4 CG meeting 003 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 16 Sep 2022 15:59:58 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/09-20</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-09-20</guid>
</item><item>
   <title>QT4 CG meeting 002 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 13 Sep 2022 16:30:29 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/09-13</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-09-13</guid>
</item><item>
   <title>QT4 CG meeting 002 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 12 Sep 2022 11:48:44 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/09-13</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-09-13</guid>
</item><item>
   <title>QT4 CG meeting 001 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 6 Sep 2022 16:38:31 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/09-06</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-09-06</guid>
</item><item>
   <title>QT4 CG meeting 001 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 5 Sep 2022 14:45:39 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/09-06</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-09-06</guid>
</item></channel></rss>