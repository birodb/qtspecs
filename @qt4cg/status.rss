<?xml version="1.0" encoding="utf-8"?><rss version="2.0"><channel><title>@qt4cg</title><link>https://qt4cg.org/@qt4cg/</link><description>QT4 CG status feed.</description><language>en-us</language><pubDate>Wed, 14 Dec 2022 14:13:47 GMT</pubDate><lastBuildDate>Wed, 14 Dec 2022 14:15:21 GMT</lastBuildDate><managingEditor>ndw@nwalsh.com</managingEditor><webMaster>ndw@nwalsh.com</webMaster><item>
   <title>Issue #277 closed</title>
   <pubDate>Wed, 14 Dec 2022 14:13:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/277</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-277</guid>
   <description>&lt;div&gt;&lt;p&gt;Overriding functions using xsl:import&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #279 closed</title>
   <pubDate>Wed, 14 Dec 2022 14:13:46 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/279</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-279</guid>
   <description>&lt;div&gt;&lt;p&gt;Rewrite XSLT §10.3.4 (function overriding) for clarity&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #287 closed</title>
   <pubDate>Wed, 14 Dec 2022 14:13:45 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/287</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-287</guid>
   <description>&lt;div&gt;&lt;p&gt;PR #279 with merge conflicts resolved&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #287 created</title>
   <pubDate>Wed, 14 Dec 2022 13:57:39 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/287</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-287</guid>
   <description>&lt;div&gt;&lt;p&gt;PR #279 with merge conflicts resolved&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #279
Close #277&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #286 created</title>
   <pubDate>Tue, 13 Dec 2022 21:06:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/286</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-286</guid>
   <description>&lt;div&gt;&lt;p&gt;Spec changes to allow child::(a|b|c) - Issue 107&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #258 closed</title>
   <pubDate>Tue, 13 Dec 2022 20:08:52 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/258</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-258</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue #114 - add array:index-where() function&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #265 closed</title>
   <pubDate>Tue, 13 Dec 2022 17:58:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/265</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-265</guid>
   <description>&lt;div&gt;&lt;p&gt;Type hierarchy tables/diagrams&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #268 closed</title>
   <pubDate>Tue, 13 Dec 2022 17:58:26 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/268</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-268</guid>
   <description>&lt;div&gt;&lt;p&gt;New type-hierarchy images / descriptions&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 015 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 13 Dec 2022 17:23:01 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/12-13</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-12-13</guid>
</item><item>
   <title>QT4 CG meeting 015 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 9 Dec 2022 07:44:30 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/12-13</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-12-13</guid>
</item><item>
   <title>Issue #285 created</title>
   <pubDate>Thu, 8 Dec 2022 11:34:57 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/285</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-285</guid>
   <description>&lt;div&gt;&lt;p&gt;Stability of collections&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The specification for fn:collection says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, this function is [·deterministic·]. This means that repeated calls on the function with the same argument will return the same result. However, for performance reasons, implementations may provide a user option to evaluate the function without a guarantee of determinism. The manner in which any such option is provided is [·implementation-defined·]. If the user has not selected such an option, a call to this function must either return a deterministic result or must raise a dynamic error [[err:FODC0003].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think this is unrealistic. The cost of making fn:collection deterministic is disproportionate to the benefits. It's very rare in practice for a query or stylesheet to process the same collection more than once, and retaining the information needed to deliver the identical results on these rare occasions is expensive (typically it means holding a long-term lock on the data, or keeping a copy of the entire collection in memory). It also inhibits techniques such as multi-threaded evaluation.&lt;/p&gt;
&lt;p&gt;I would like to relax this requirement.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #284 created</title>
   <pubDate>Wed, 7 Dec 2022 11:55:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/284</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-284</guid>
   <description>&lt;div&gt;&lt;p&gt;Add grammar for "if (test) then {expr}" with no else&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;As discussed in issue #234. In reviewing this PR, I suggest we consider it together with the existing proposals for ternary conditionals (x ?? y !! z) and the "otherwise" operator.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 014 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 6 Dec 2022 17:21:01 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/12-06</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-12-06</guid>
</item><item>
   <title>Issue #283 created</title>
   <pubDate>Mon, 5 Dec 2022 11:23:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/283</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-283</guid>
   <description>&lt;div&gt;&lt;p&gt;Enumeration types&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The draft specification includes a proposal to provide enumeration types. The proposal is incomplete, for example it does not include all the rules for conversions and casting. This issue is raised in order to outline where we are, what needs to be done, and to elicit consensus on whether we want to proceed with this.&lt;/p&gt;
&lt;p&gt;What's the motivation? Primarily, making function signatures more expressive.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q0: do we really need this?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The essence of the proposal is an ItemType that matches an enumerated set of xs:string values:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[131] | EnumerationType | ::= | "enum" "("  StringLiteral (","  StringLiteral)* ")"  &lt;/code&gt;
For example, the type enum("red", "green", "blue") matches the string "green".&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q1: why restrict it to strings? I think my main reason was that the syntax gets complicated if we try to do it for data types that have no literal representation.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Subtyping is based on the value space. An enumeration type E is a subtype of another enumeration type F if the set of strings in E is a subset of those in F. All enumeration types are subtypes of xs:string.&lt;/p&gt;
&lt;p&gt;Strings are not "labelled" as belonging to an enumeration type, matching is purely based on the value ("datum"). This doesn't provide very strong typing. If "violet" and "pink" are allowed by both the enumeration types &lt;code&gt;colour&lt;/code&gt; and &lt;code&gt;flower&lt;/code&gt;, then it's not intrinsically an error to use a variable of type &lt;code&gt;flower&lt;/code&gt; where a &lt;code&gt;colour&lt;/code&gt; is expected. Equally, a variable of type &lt;code&gt;xs:string&lt;/code&gt; can be used where a &lt;code&gt;colour&lt;/code&gt; is expected.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Q2: should enumerations be more strongly typed?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I would expect that an enumeration type can be used as the target of "cast" or "castable", but this is not currently in the spec.&lt;/p&gt;
&lt;p&gt;The coercion rules as currently written say that if the expected type is an enumeration type, then the rules are largely the same as for any other subtype of &lt;code&gt;xs:string&lt;/code&gt;:  casting from &lt;code&gt;xs:untypedAtomic&lt;/code&gt; applies, promotion from &lt;code&gt;xs:anyURI&lt;/code&gt; does not apply, 1.0 compatibility mode rules do not apply.&lt;/p&gt;
&lt;p&gt;Operators and functions on enumeration types are the same as for &lt;code&gt;xs:string&lt;/code&gt;. This means, for example, that there are no special rules for comparison: values are ordered as strings and are compared using the default collation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #271 closed</title>
   <pubDate>Mon, 5 Dec 2022 10:26:51 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/271</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-271</guid>
   <description>&lt;div&gt;&lt;p&gt;Amendments to data model spec as per minutes of 2022-11-22&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 014 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 5 Dec 2022 10:20:13 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/12-06</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-12-06</guid>
</item><item>
   <title>Issue #282 closed</title>
   <pubDate>Mon, 5 Dec 2022 09:51:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/282</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-282</guid>
   <description>&lt;div&gt;&lt;p&gt;Copy of MK actions-2022-11-15 branch by NW&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #282 created</title>
   <pubDate>Mon, 5 Dec 2022 09:46:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/282</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-282</guid>
   <description>&lt;div&gt;&lt;p&gt;Copy of MK actions-2022-11-15 branch by NW&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Resolves merge conflicts in #247&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #281 created</title>
   <pubDate>Sat, 3 Dec 2022 22:12:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/281</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-281</guid>
   <description>&lt;div&gt;&lt;p&gt;XPath: Short-circuiting Functions and Lazy Evaluation Hints&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;Short-circuiting Functions and Lazy Evaluation Hints&lt;/h1&gt;
&lt;h1&gt;&lt;br/&gt;1. Introduction&lt;/h1&gt;
&lt;p&gt;As shown in &lt;a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation#Support_in_common_programming_and_scripting_languages"&gt;Wikipedia&lt;/a&gt;, most contemporary programming languages offer reasonable support for &lt;a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation#Definition"&gt;short-circuit evaluation&lt;/a&gt;
(also known as &lt;em&gt;minimal&lt;/em&gt; or &lt;em&gt;McCarthy evaluation&lt;/em&gt;), including several standard language short-circuit operators.&lt;/p&gt;
&lt;p&gt;Short-circuiting, as we will call the above in this document, is commonly used to achieve:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Avoiding undesired side effects of evaluating the second argument&lt;/em&gt;, such as
excessive evaluation time or throwing an error&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Usual example, using a &lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)"&gt;C-based&lt;/a&gt; language:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;   int denom = 0;
   if (denom != 0 &amp;amp;&amp;amp; num / denom)
   {
   ...//ensures that calculating num/denom never results in divide-by-zero error
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;   int a = 0;
   if (a != 0 &amp;amp;&amp;amp; myfunc(b))
   {
     do_something();
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, short-circuit evaluation guarantees that &lt;code&gt;myfunc(b)&lt;/code&gt; is never called. This is because &lt;code&gt;a != 0&lt;/code&gt; evaluates to &lt;em&gt;&lt;code&gt;false&lt;/code&gt;&lt;/em&gt;. This feature permits two useful programming constructs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If the first sub-expression checks whether an expensive computation is needed and the check evaluates to &lt;em&gt;false&lt;/em&gt;, one can eliminate expensive computation in the second argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It permits a construct where the first expression guarantees a condition without which the second expression may cause a &lt;a href="https://en.wikipedia.org/wiki/Run-time_error"&gt;run-time error&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Idiomatic conditional construct&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Perl"&gt;Perl&lt;/a&gt; idioms:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   some_condition or die; # Abort execution if some_condition is false

   some_condition and die; # Abort execution if some_condition is true
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;br/&gt;2. Short-circuiting in XPath&lt;/h1&gt;
&lt;p&gt;In short (pun intended) there is no such thing mentioned in any officially-published W3C version (&amp;lt;= 3.1) of XPath.&lt;/p&gt;
&lt;p&gt;This topic was briefly mentioned in the discussion of &lt;a href="https://github.com/qt4cg/qtspecs/issues/78"&gt;another proposal&lt;/a&gt;: that of providing the capability to specify strictly the order of evaluation.&lt;/p&gt;
&lt;p&gt;Aspects of incorporating hints for &lt;a href="https://en.wikipedia.org/wiki/Lazy_evaluation"&gt;lazy evaluation&lt;/a&gt; (a topic related to short-cutting) were discussed also in the thread to &lt;a href="https://app.slack.com/client/T011VK9115Z/C01GVC3JLHE/thread/C01GVC3JLHE-1665542903.180989"&gt;this question&lt;/a&gt; on the Xml.com Slack.&lt;/p&gt;
&lt;p&gt;The situation at present is that the XPath processor that is being used decides whether or not to perform shortcutting, even in obvious cases. Thus, varying from one XPath processor to another, the differences in performance evaluation could be dramatic. For example, the following XPath expression is evaluated on BaseX (ver. &amp;gt;= 10.3) for 0 seconds, and the same expression is evaluated by Saxon ver. 11 for about 100 seconds.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;
let $fnAnd := function($x)
   {
     function($y)
     {
      if(not($x)) then false()
                  else $y
     }
   }
   return
      $fnAnd(false())(some $b in ( ((1 to 1000000000000000000) !true()) )  satisfies not($b)   )
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;br/&gt;3. Analysis&lt;/h2&gt;
&lt;p&gt;We can define the term “&lt;em&gt;function with shortcutting&lt;/em&gt;” (just for a 2-argument function, but this can be extended for &lt;code&gt;N&lt;/code&gt;-argument function where &lt;code&gt;N &amp;gt;= 2&lt;/code&gt;) in the  following way:&lt;/p&gt;
&lt;p&gt;Given a function &lt;code&gt;$f($x, $y)&lt;/code&gt;, we denote in XPath its partial application for a given value of $x (say &lt;code&gt;let $x := $t&lt;/code&gt;) as:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$f($t, ?)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The above is a function of one argument. By definition:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$f($x, $y)&lt;/code&gt; is equivalent to &lt;code&gt;$f($x, ?) ($y)&lt;/code&gt;, for every pair &lt;code&gt;$x&lt;/code&gt; and &lt;code&gt;$y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That is, the partial application of the 2-argument function &lt;code&gt;$f&lt;/code&gt; with fixed 1st argument is another function &lt;code&gt;$g&lt;/code&gt; which when applied on the 2nd argument (&lt;code&gt;$y&lt;/code&gt;) of &lt;code&gt;$f($x, $y)&lt;/code&gt; produces the same value as &lt;code&gt;$f($x, $y)&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;$g&lt;/code&gt; is defined as &lt;code&gt;$f($x, ?)&lt;/code&gt;, then &lt;code&gt;$g($y)&lt;/code&gt; produces the same value as &lt;code&gt;$f($x, $y)&lt;/code&gt; for every pair &lt;code&gt;$x&lt;/code&gt; and &lt;code&gt;$y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let us take a specific function:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, $y as xs:boolean) as xs:boolean
                     { $x and $y}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then one equivalent way of defining &lt;code&gt;$fAnd&lt;/code&gt; is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, $y as xs:boolean) as xs:boolean
                     {
                       let $partial := function($x as xs:boolean) as function(xs:boolean) as xs:boolean
                                               {
                                                  if(not($x)) then -&amp;gt;(){false()}
                                                              else -&amp;gt;($t) {$t}
                                               }
                         return $partial($x)($y)
                    }
   return
       $fAnd(false(), true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;&lt;code&gt;$partial&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; function is the result of the partial application &lt;code&gt;$fAnd($x, ?)&lt;/code&gt; and by definition this is a function of arity 1, which when applied on the 2nd argument of &lt;code&gt;$fAnd&lt;/code&gt;, produces the same result as &lt;code&gt;$fAnd($x, $y)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;From the code above we see that actually there exists a value of &lt;code&gt;$x&lt;/code&gt; (the value &lt;code&gt;false()&lt;/code&gt; ) for which &lt;code&gt;$fAnd($x, ?)&lt;/code&gt; is not a function of one argument, but a constant function (of &lt;strong&gt;0&lt;/strong&gt; arguments) – that produces the value &lt;code&gt;false()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Definition&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;We say that a function &lt;code&gt;f(x, y)&lt;/code&gt; &lt;em&gt;&lt;strong&gt;allows shortcutting&lt;/strong&gt;&lt;/em&gt; if there exists at least one value &lt;code&gt;t&lt;/code&gt; such that&lt;/p&gt;
&lt;p&gt;&lt;code&gt;f(t, ?)&lt;/code&gt; is a constant.&lt;/p&gt;
&lt;h1&gt;&lt;br/&gt;4. Solution&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;How can an XPath processor treat a function with shortcutting?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Obviously, if the XPath processor knows that &lt;code&gt;f(x, y)&lt;/code&gt; allows shortcutting, then it becomes possible to delay the evaluation of the 2nd argument &lt;code&gt;y&lt;/code&gt; and only perform this evaluation if the arity of the function returned by &lt;code&gt;f(t, ?)&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, and not &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can an XPath processor know that a given function allows shortcutting?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One way to obtain this knowledge is to evaluate &lt;code&gt;f(t, ?)&lt;/code&gt; and get the arity of the resulting function. XPath 3.1 allows getting the arity of any function item with the function &lt;a href="https://www.w3.org/TR/xpath-functions-31/#func-function-arity"&gt;fn:function-arity()&lt;/a&gt;.      However, doing this on every function call could be expensive and deteriorate performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another way of informing the XPath processor that a given function &lt;code&gt;f(x, y)&lt;/code&gt; allows shortcutting is if the language provides &lt;em&gt;&lt;strong&gt;hints for lazy evaluation&lt;/strong&gt;&lt;/em&gt;:
&lt;br/&gt;let $fAnd := function($x as xs:boolean, &lt;em&gt;&lt;strong&gt;lazy&lt;/strong&gt;&lt;/em&gt; $y as xs:boolean) as xs:boolean&lt;br/&gt;
&lt;br/&gt;Only in the case when there is a &lt;em&gt;&lt;strong&gt;lazy&lt;/strong&gt;&lt;/em&gt; hint specified the XPath processor will check the arity of &lt;code&gt;f(x, ?)&lt;/code&gt; and will not need to evaluate the &lt;code&gt;y&lt;/code&gt; argument if this arity is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let us return to the original example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, $y as xs:boolean) as xs:boolean
                     {
                       let $partial := function($x as xs:boolean) as function(xs:boolean) as xs:boolean
                                               {
                                                  if(not($x)) then -&amp;gt;(){false()}
                                                              else -&amp;gt;($t) {$t}
                                               }
                         return $partial($x)($y)
                    }
   return
       $fAnd(false(), true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing this with an Xpath 3.1 processor, an error is raised: “&lt;em&gt;1 argument supplied, 0 expected: function() as xs:boolean { false() }.&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/205463393-3b4558ac-66d9-453f-81fc-f83ec0499425.png" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;But according to the updated “&lt;a href="https://qt4cg.org/pr/279/xquery-40/xpath-40.html#id-coercion-rules"&gt;Coercion Rules / Function Coercion&lt;/a&gt;” in Xpath 4.0, no error will occur:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;em&gt;If &lt;em&gt;F&lt;/em&gt; has lower arity than the expected type, then &lt;em&gt;F&lt;/em&gt; is wrapped in a new function that declares and ignores the additional argument; the following steps are then applied to this new function.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For example, if the expected type is &lt;code&gt;function(node(), xs:boolean) as  xs:string&lt;/code&gt;, and the supplied function is &lt;code&gt;fn:name#1&lt;/code&gt;, then the supplied function is effectively replaced by &lt;code&gt;function($n as node(), $b as xs:boolean) as xs:string {fn:name($n)}&lt;/code&gt;&lt;/em&gt;”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is exactly the place where the XPath processor will call the lower-arity function without providing to it the ignored, and not needed to be evaluated, additional argument.&lt;/p&gt;
&lt;p&gt;Thus, according to this rule, an XPath 4.0 processor will successfully evaluate the above expression and will not issue the error shown above.&lt;/p&gt;
&lt;p&gt;Finally, we can put the &lt;em&gt;lazy&lt;/em&gt; hint on a function declaration or on a function call, or on both places:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $fAnd := function($x as xs:boolean, lazy $y as xs:boolean) as  xs:boolean
   {
     let $partial := function($x as xs:boolean) as function(lazy xs:boolean) as xs:boolean
                           {
                              if(not($x)) then -&amp;gt;(){false()}
                                          else -&amp;gt;($t) {$t}
                           }
      return $partial($x)( lazy $y)
   }
   return
       $fAnd(false(), lazy true())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;How to write short-circuiting functions?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The code above is a good example how one can write a short-circuiting function evaluating which the XPath processor would be aware that a short-circuit is happening but instead of signaling arity error as an XPath 3.1 processor does, will logically ignore the unneeded 2nd argument.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #280 created</title>
   <pubDate>Thu, 1 Dec 2022 15:14:06 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/280</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-280</guid>
   <description>&lt;div&gt;&lt;p&gt;Why is resolve-uri forbidden from resolving against a URI that contains a fragment identifier?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The 3.1 F&amp;amp;O spec says, of &lt;code&gt;fn:resolve-uri()&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A dynamic error is raised [&lt;a href="https://www.w3.org/XML/Group/qtspecs/specifications/xpath-functions-31/html/Overview.html#ERRFORG0002"&gt;err:FORG0002&lt;/a&gt;] if $base is not a valid IRI according to the rules of RFC3987, extended with an implementation-defined subset of the extensions permitted in LEIRI, or if it is not a suitable IRI to use as input to the chosen resolution algorithm (for example, if it is a relative IRI reference, if it is a non-hierarchic URI, or &lt;strong&gt;if it contains a fragment identifier&lt;/strong&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(emphasis added by me)&lt;/p&gt;
&lt;p&gt;What in the name of all things is that about? I've never noticed that before, and I haven't seen any other API (the URL API in Node and the browser for example) that cares.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;resolve-uri('test.xml', 'http://example.com/path/file.xml#foo')&lt;/code&gt; === &lt;code&gt;http://example.com/path/test.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I don't see why the presence of a fragment identifier should matter in the least.&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; let url = new URL("http://example.com/path/file.xml#foo")
&amp;gt;&amp;gt; console.log(url.href)
http://example.com/path/file.xml#foo
&amp;gt;&amp;gt; let resolved = new URL("test.xml", url);
&amp;gt;&amp;gt; console.log(resolved.href)
http://example.com/path/test.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #270 closed</title>
   <pubDate>Wed, 30 Nov 2022 10:57:04 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/270</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-270</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect statement about named modes&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #273 closed</title>
   <pubDate>Wed, 30 Nov 2022 10:56:10 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/273</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-273</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue270 xslt mode visibility&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #279 created</title>
   <pubDate>Tue, 29 Nov 2022 21:59:02 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/279</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-279</guid>
   <description>&lt;div&gt;&lt;p&gt;Rewrite XSLT §10.3.4 (function overriding) for clarity&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Essentially editorial - clarifies the existing rules, as described in issue #277&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #278 created</title>
   <pubDate>Tue, 29 Nov 2022 17:16:53 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/278</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-278</guid>
   <description>&lt;div&gt;&lt;p&gt;array bound checking&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Similar functions on arrays and sequences have different behaviour as regards bound checking. For example, fn:head() returns an empty sequence if the input is empty, while array:head() throws an error.&lt;/p&gt;
&lt;p&gt;Sometimes we want the error, sometimes we don't, but this should be orthogonal to whether we are using sequences or arrays.&lt;/p&gt;
&lt;p&gt;Is there a way we can adapt the sequence functions to throw an error, or adapt the array functions so they don't?&lt;/p&gt;
&lt;p&gt;Various ideas have been put forward, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add extra optional parameters to functions to select the behaviour&lt;/li&gt;
&lt;li&gt;mirror the relevant functions (e.g. into a different namespace) to create an alternative version with different behaviour&lt;/li&gt;
&lt;li&gt;add options to the static context (array-bound-checking=yes|no, sequence-bound-checking=yes|no) to switch the behaviour (with appropriate mechanisms in XQuery and XSLT -- and perhaps XPath -- to set these options)&lt;/li&gt;
&lt;li&gt;do nothing, let users solve the problem for themselves by writing user-defined functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note 1: the difference in behaviour affects operators as well as functions: contrast &lt;code&gt;$seq[0]&lt;/code&gt; (which returns ()) with &lt;code&gt;$array(0)&lt;/code&gt; (throws error). Making &lt;code&gt;$seq[0]&lt;/code&gt; throw an error would mean we have to define it in a different way, since the formulation &lt;code&gt;$seq[position()=$N]&lt;/code&gt; is intrinsically error-free.&lt;/p&gt;
&lt;p&gt;Note 2: if &lt;code&gt;$array(0)&lt;/code&gt; doesn't throw an error, it's not immediately obvious what it should do. Returning an empty sequence isn't ideal because the empty sequence is a valid entry in an array. For maps we have the same problem, which is why we have two functions &lt;code&gt;map:get()&lt;/code&gt; and &lt;code&gt;map:contains()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #277 created</title>
   <pubDate>Tue, 29 Nov 2022 12:50:27 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/277</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-277</guid>
   <description>&lt;div&gt;&lt;p&gt;Overriding functions using xsl:import&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In XSLT 3.0, you can have a module M that contains an xsl:function F#2, and in another module you can import M, and declare another xsl:function F#3.&lt;/p&gt;
&lt;p&gt;In the 4.0 spec we appear to disallow this with the paragraph (in §10.3.4):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A stylesheet function may be overridden by another stylesheet function with the same name that has higher [import precedence]. This is only allowed, however, if the [arity range] of the overriding function includes the totality of the arity range of the overridden function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In fact, the error conditions we go on to define (XTSE0769 and XTSE0770) are more carefully worded and do not make the above situation an error. XTSE0769 says that if F has higher import precedence than G, then either the arity ranges of F and G must be disjoint, or the arity range of F must include the totality of G. XTSE0770 says that if F and G have the same import precedence, then their arity ranges must be disjoint.&lt;/p&gt;
&lt;p&gt;The paragraph cited should be replaced with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A stylesheet function may be overridden by another stylesheet function with the same name that has higher [import precedence]. This is only allowed, however, if either (a) the [arity range] of the overriding function includes the totality of the arity range of the overridden function, or (b) the two arity ranges are non-overlapping.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is also scope for editorial improvement to §10.3.4. It describes three separate scenarios:&lt;/p&gt;
&lt;p&gt;(a) overriding functions using xsl:import and import precedence&lt;/p&gt;
&lt;p&gt;(b) overriding functions using xsl:use-package and xsl:override&lt;/p&gt;
&lt;p&gt;(c) overriding extension/external functions using xsl:function (or vice versa)&lt;/p&gt;
&lt;p&gt;and it would be much easier to read the section if these were clearly distinguished.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #276 closed</title>
   <pubDate>Sun, 27 Nov 2022 17:42:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/276</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-276</guid>
   <description>&lt;div&gt;&lt;p&gt;Make './gradlew publish' work on Windows #255&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #255 closed</title>
   <pubDate>Sun, 27 Nov 2022 17:42:58 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/255</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-255</guid>
   <description>&lt;div&gt;&lt;p&gt;Build error running gradlew publish on Windows&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #276 created</title>
   <pubDate>Sun, 27 Nov 2022 17:37:17 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/276</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-276</guid>
   <description>&lt;div&gt;&lt;p&gt;Make './gradlew publish' work on Windows #255&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Fix #255&lt;/p&gt;
&lt;p&gt;Repeat after me, "filenames are not URIs." Not on some platforms, anyway.&lt;/p&gt;
&lt;p&gt;I still get a warning about "correctness" because of the interaction between a couple of tasks. That doesn't happen on a *nix platform so I don't know if it's related to the difference between forward and backward slashes or if it's a consequence of the build changes I made to support the new SVG (that might be) in data model. They seem harmless for the moment.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #275 created</title>
   <pubDate>Sat, 26 Nov 2022 22:57:37 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/275</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-275</guid>
   <description>&lt;div&gt;&lt;p&gt;Problems with nt/xnt links to grammar terms&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm trying to work out why we're getting linking errors during the build when linking to grammatical terms.&lt;/p&gt;
&lt;p&gt;In etc/XT40.xml (after changing extract.xsl to produce tidier namespace declarations, I'm seeing entries like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   &amp;lt;nt def="doc-xpath40-SequenceType" xlink:type="simple"&amp;gt;SequenceType&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="doc-xpath40-ItemType" xlink:type="simple"&amp;gt;ItemType&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="doc-xpath40-OccurrenceIndicator" xlink:type="simple"&amp;gt;OccurrenceIndicator&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="prod-xpath40-AnyItemTest" xlink:type="simple"&amp;gt;AnyItemTest&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="doc-xpath40-TypeName" xlink:type="simple"&amp;gt;TypeName&amp;lt;/nt&amp;gt;
   &amp;lt;nt def="doc-xpath40-KindTest" xlink:type="simple"&amp;gt;KindTest&amp;lt;/nt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the problem entries seem to be the ones prefixed "prod-" rather than "doc-".&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;extract.xsl&lt;/code&gt; stylesheet simply copies what it finds in &lt;code&gt;xpath-assembled.xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The decision seems to be made in &lt;code&gt;grammar2spec.xsl&lt;/code&gt;, for example line 523 reads&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:param name="result_id_docprod_part"/&amp;gt; &amp;lt;!-- 'doc-' or 'prod-' --&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The parameter is set to "prod-" in &lt;code&gt;add-non-terminals&lt;/code&gt; (line 473) and in &lt;code&gt;add-terminals&lt;/code&gt; (line 488), and is set to "doc-" in &lt;code&gt;show-prod&lt;/code&gt; (line 513).&lt;/p&gt;
&lt;p&gt;Looking more carefully, all productions listed in XT40.xml have a "prod-" entry (at least one...) and most of them also have a "doc-" entry. The problem cases are those that do not have a "doc-" entry. Which suggests that &lt;code&gt;show-prod&lt;/code&gt; is not selecting them.&lt;/p&gt;
&lt;p&gt;In a small number of cases, when processing the XSLT specification, the show-prod template is outputting the message&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WARNING!! production with name="MapTest" not found&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is produced for MapTest, ArrayTest, EnumerationType, and NamedItemType. The problem here appears to be that the production is referenced in the XSLT spec but in the grammar file it is not shown with &lt;code&gt;if="xslt40-patterns"&lt;/code&gt;, so it is not present in the pattern grammar.&lt;/p&gt;
&lt;p&gt;For productions like AnyItemTest, the problem is different. It looks to me as if &lt;code&gt;show-prod&lt;/code&gt; is not being called for these terms.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show-prod&lt;/code&gt; is called from one place only: &lt;code&gt;assemble-spec.xsl&lt;/code&gt; line 208. This is in a template rule with &lt;code&gt;match="prodrecap"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Sure enough, &lt;code&gt;AnyItemTest&lt;/code&gt; does not appear to have a &lt;code&gt;prodrecap&lt;/code&gt; in the XPath spec.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #274 created</title>
   <pubDate>Sat, 26 Nov 2022 10:47:08 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/274</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-274</guid>
   <description>&lt;div&gt;&lt;p&gt;What would it take/would it be possible to build a module repository for QT?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have an ever growing list of proposed convienence functions. I am not opposed, in principle, to adding convenience functions, but we don’t have any principled criteria (AFAICT) for which ones to add and which ones to reject. That’s not surprising, and I’m also not opposed to that. But I’m sure there are hundreds, perhaps thousands, of such functions. At some point, we’re going to start to resist adding more simply because we’ve added so many. Some of us may already be nearing that point.&lt;/p&gt;
&lt;p&gt;It seems to me that the alternative is to do what TeX, Perl, Python, Node, etc. do: make it easy for users to download, install, and use libraries. (I’m carefully using the term “library” here where I might prefer to use “package” or “module” because we already have “package” and “module” which mean other things.)&lt;/p&gt;
&lt;p&gt;What would it take to make that possible?&lt;/p&gt;
&lt;p&gt;One problem we have is that there are two (perhaps three, or more, depending on how you count) different QT languages and they aren’t all mutually interoperable. My XSLT implementation of &lt;code&gt;fn:parse-uri&lt;/code&gt; for example, isn’t directly usable by an XQuery product that doesn’t implement XSLT or some other product that only uses XPath.&lt;/p&gt;
&lt;p&gt;Suppose we added an &lt;code&gt;import library&lt;/code&gt; declaration to XPath, similar to the &lt;code&gt;import module&lt;/code&gt; declaration in XQuery&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LibraryImport := "import" "library"
                   ("namespace" NCName "=")?
                   "at" URILiteral
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a corresponding &lt;code&gt;&amp;lt;xsl:library&amp;gt;&lt;/code&gt; instruction to XSLT.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:library
  namespace = uri
  href = uri /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The semantics of each is that it searches an implementation-defined set of locations for a module that matches the URI. If it finds one, it loads the functions declared in that library. If a namespace is given, it loads only the functions in the namespace provided.&lt;/p&gt;
&lt;p&gt;We’d expect all implementations to be able to load libraries that only used XPath constructions. An XSLT processor might also be able to load XSLT constructions. An XQuery processor might also be able to load XQuery constructions.&lt;/p&gt;
&lt;p&gt;We could define a library file format that allowed an implementor to provide several different implementations of a function, where the processor could choose the best one (in some implementation-dependent way). This would also give us a place to hang version numbers and other relevant metadata.&lt;/p&gt;
&lt;p&gt;With that much in place, would it be more practical to use XPath extension modules?&lt;/p&gt;
&lt;p&gt;Consider the following scenario. I want to use a URI relativization function (as requested in #269). Dimitre provided a pure XPath implementation, so we don’t actually &lt;em&gt;have&lt;/em&gt; to implement it as a native function, we just have to make it easy to use. Imagine that EXPath.org (for example) provided a machine readable list of of libraries.&lt;/p&gt;
&lt;p&gt;I run a hypothetical “expath” command to search the machine readlabe directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ expath search relative
xpath uri-relativize -- returns the relative location between two URIs
xslt  doc-relative -- convenience functions for accessing “uncles”, “aunts”, etc.
xpath relative-rank -- funtions to score XML documents
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It found three libraries that matched “relative”. That first one sounds promising.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ expath show uri-relativize
The uri-relativize library provides uri-relativize(), an XPath
function that resolves one absolute URI relative to another.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That sounds like what I want, so I install it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ expath install uri-relativize
Downloading uri-relativize … installing … done.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in my stylesheet I simply add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:library href="uri-relativize"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or in a language that only uses XPath, I add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import library at "uri-relativize"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and I can use the &lt;code&gt;uri-relativize()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;I think the important parts are that the implementation searches for libraries so that I don’t have to identify precisly where they were installed and that we somehow make it practical to use them without, though it pains me to say this, explicit namespace bindings.&lt;/p&gt;
&lt;p&gt;Perhaps we could allow libraries to “inject” functions into the default function namespace, or we could have a function namespace search list and maybe libraries could extend that.&lt;/p&gt;
&lt;p&gt;The format of the library might be something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;library xmlns="xpath-library" name="uri-relativize" version="1.0.3"
         namespace="http://example.com/my/namespace"&amp;gt;
&amp;lt;provides&amp;gt;
function uri-relativize($path1 as xs:anyURI, $path2 as xs:anyURI) as xs:anyURI
&amp;lt;/provides&amp;gt;
&amp;lt;xpath version="3.0"&amp;gt;
…xpath implementation…
&amp;lt;/xpath&amp;gt;
&amp;lt;xslt version="4.0"&amp;gt;
…xslt 4.0 implementation…
&amp;lt;/xslt&amp;gt;
&amp;lt;xslt version="3.0"&amp;gt;
…xslt 3.0 implementation…
&amp;lt;/xslt&amp;gt;
&amp;lt;library&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I’m sure if we looked closely at the metadata provided in other system’s packages, we’d see I’ve left a bunch of stuff out. You’d probably, for example, want some way of saying one package depends on another and having the processor load those automatically.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #273 created</title>
   <pubDate>Fri, 25 Nov 2022 18:09:34 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/273</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-273</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue270 xslt mode visibility&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR fixes issue #270 concerning the visibility of XSLT modes.&lt;/p&gt;
&lt;p&gt;It also deals with a lot of editorial issues, some highlighted in issue #275.&lt;/p&gt;
&lt;p&gt;It changes the manual change markup in the XSLT spec to use &lt;code&gt;at-"date"&lt;/code&gt; format rather than &lt;code&gt;at="draft-number"&lt;/code&gt; (dates are more useful for the incremental development process we are following). And it fixes some cross-spec-reference issues, and some violations of hyphenation diktats.&lt;/p&gt;
&lt;p&gt;Also bundled with this bug fix are other editorial changes to fix cross-spec linking errors; for details see the individual commit messages.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 013 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 25 Nov 2022 14:32:27 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-29</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-29</guid>
</item><item>
   <title>Issue #272 created</title>
   <pubDate>Fri, 25 Nov 2022 10:14:59 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/272</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-272</guid>
   <description>&lt;div&gt;&lt;p&gt;Setting parameter values in xsl:use-package&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It's possible for two different components of an application to use the same library package (via &lt;code&gt;xsl:use-package&lt;/code&gt;) and in principle each of them should be able to configure that package (by setting its global parameters) in different ways. Currently though it's not at all clear how the global parameters of a used package should be set (and there are some inconsistencies in the spec concerning how the &lt;code&gt;visibility&lt;/code&gt; attribute on such parameters is supposed to work).&lt;/p&gt;
&lt;p&gt;I think that it's fairly straightforward to plug this gap by allowing xsl:use-package to have xsl:with-param children, naming the stylesheet parameters in the used package and assigning them values. For static parameters the values must be assigned using static expressions; for non-static parameters any expression can be used: because of the scoping rules and the syntactic constraints on &lt;code&gt;xsl:use-package&lt;/code&gt;, the value of the expression can only depend on global variable and parameters in the using stylesheet package.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #271 created</title>
   <pubDate>Thu, 24 Nov 2022 16:10:40 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/271</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-271</guid>
   <description>&lt;div&gt;&lt;p&gt;Amendments to data model spec as per minutes of 2022-11-22&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Changes to data model spec, see actions QT4CG-012-01, -02, -03, -04, -06.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #270 created</title>
   <pubDate>Thu, 24 Nov 2022 13:56:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/270</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-270</guid>
   <description>&lt;div&gt;&lt;p&gt;Incorrect statement about named modes&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;On the description of the 'visibility' attribute &lt;a href="https://qt4cg.org/specifications/xslt-40/Overview-diff.html#declaring-modes"&gt;here&lt;/a&gt; it says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A named mode is not eligible to be used as the &lt;a href="https://qt4cg.org/specifications/xslt-40/Overview-diff.html#dt-initial-mode"&gt;initial mode&lt;/a&gt; if its visibility is private.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But, if the mode is designated as default mode of the implicit or explicit &lt;code&gt;xsl:package&lt;/code&gt; then it's eligible as an initial mode. Having a private visibility does not affect it's initial status. Furthermore, the unnamed mode is always private, and always initial.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #269 created</title>
   <pubDate>Thu, 24 Nov 2022 13:20:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/269</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-269</guid>
   <description>&lt;div&gt;&lt;p&gt;Function for URI relativization&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Signature:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;relativize($uri as xs:anyURI, $base as xs:anyURI) as xs:anyURI
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example: &lt;a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/net/URI.html#relativize(java.net.URI)"&gt;URI::relativize&lt;/a&gt; in Java&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #268 created</title>
   <pubDate>Thu, 24 Nov 2022 10:28:19 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/268</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-268</guid>
   <description>&lt;div&gt;&lt;p&gt;New type-hierarchy images / descriptions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Close #265&lt;/p&gt;
&lt;p&gt;This is my attempt to improve the type-hierarchy images.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There &lt;em&gt;were&lt;/em&gt; graphics already, but they were accidentally not being copied into the right place.&lt;/li&gt;
&lt;li&gt;But, they're for 3.1 and they're in some format I don't recognize, so&lt;/li&gt;
&lt;li&gt;I created new SVG ones anyway, that folks may or may not like&lt;/li&gt;
&lt;li&gt;I replaced the big, ugly yellow tables with prose. I concluded that accessibility was the only reason they were present.&lt;/li&gt;
&lt;li&gt;The colors are a little different, and a little "off", but they're explicitly chosen from a pallet that offers unambiguously differenty colors for the three most common forms of color-blindness.&lt;/li&gt;
&lt;li&gt;One of the SVG images is too wide, I'm not sure what to do about that&lt;/li&gt;
&lt;li&gt;The labels are text, so you can search for them, and xs:anyAtomicType is a link. We could make more links.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #267 closed</title>
   <pubDate>Thu, 24 Nov 2022 10:16:29 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/267</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-267</guid>
   <description>&lt;div&gt;&lt;p&gt;Stylesheet updates for inline-SVG in the data model&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #267 created</title>
   <pubDate>Thu, 24 Nov 2022 10:08:49 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/267</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-267</guid>
   <description>&lt;div&gt;&lt;p&gt;Stylesheet updates for inline-SVG in the data model&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I need to commit this first, and separately, so that the build will be correct.&lt;/p&gt;
&lt;p&gt;Also fixed an obvious CSS typo.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #266 created</title>
   <pubDate>Wed, 23 Nov 2022 18:49:48 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/266</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-266</guid>
   <description>&lt;div&gt;&lt;p&gt;Add an option on xsl:copy-of to copy a subtree with a change of namespace&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It's a common requirement to copy a subtree with a change of namespace.&lt;/p&gt;
&lt;p&gt;It can be done easily enough in XSLT with apply-templates in a custom mode, but an option on xsl:copy-of could make it a lot easier. It could also potentially be a lot more efficient.&lt;/p&gt;
&lt;p&gt;Alternatively, this could be provided as a function, or an option on the copy-of function.&lt;/p&gt;
&lt;p&gt;Or it could be a new higher order function &lt;code&gt;copy-renaming($node, function($name){ xs:QName('new uri', local-name-from-QName($name) })&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There's a danger of course of packing in too much functionality and making it just as complex/inefficient as using a custom mode.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #265 created</title>
   <pubDate>Wed, 23 Nov 2022 12:46:18 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/265</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-265</guid>
   <description>&lt;div&gt;&lt;p&gt;Type hierarchy tables/diagrams&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;On 22 November, we mentioned in passing that the type hierarchy tables in the Data Model spec are hard to read. They're a garish yellow for no obvious reason and the font size is very small. Would replacing them with diagrams like this be an improvement?&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/36793/203549753-a970038e-4b8b-44cb-97cb-8d52d2fc736f.png" alt="out"/&gt;&lt;/p&gt;
&lt;p&gt;(This is the largest and most difficult to represent, I think. I've grouped some of the atomic types together to make the drawing more aesthetically pleasing. I don't think that interferes with comprehension, though might need to be explained.)&lt;/p&gt;
&lt;p&gt;There's no particular rhyme or reason to the order of the items in the "second column" except to leave room for the longer hierarchies further to the right.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #264 closed</title>
   <pubDate>Wed, 23 Nov 2022 09:36:05 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/264</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-264</guid>
   <description>&lt;div&gt;&lt;p&gt;THIS IS JUST A TEST IGNORE THIS&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #264 created</title>
   <pubDate>Wed, 23 Nov 2022 09:29:41 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/264</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-264</guid>
   <description>&lt;div&gt;&lt;p&gt;THIS IS JUST A TEST IGNORE THIS&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 012 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 22 Nov 2022 17:33:38 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/11-22</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-11-22</guid>
</item><item>
   <title>Issue #263 closed</title>
   <pubDate>Tue, 22 Nov 2022 12:29:47 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/263</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#closed-263</guid>
   <description>&lt;div&gt;&lt;p&gt;Exclude spec XSL from PRs&lt;/p&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #263 created</title>
   <pubDate>Tue, 22 Nov 2022 12:22:15 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/263</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-263</guid>
   <description>&lt;div&gt;&lt;p&gt;Exclude spec XSL from PRs&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Letting the specification-specific XSL through means you can get a mismatch with the common XSL. So don't do that.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 012 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 21 Nov 2022 11:34:37 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-22</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-22</guid>
</item><item>
   <title>Issue #262 created</title>
   <pubDate>Sun, 20 Nov 2022 23:10:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/262</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-262</guid>
   <description>&lt;div&gt;&lt;p&gt;[XPath 4.0] Navigation in deep-structured arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;At present there is no convenient way to navigate down a deep-structured array (whose members are themselves arrays and maybe even (recursively) deep-structured arrays themselves).&lt;/p&gt;
&lt;p&gt;For example, given the array:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt; [1, [2, 3], [4, [5, 6]], (7, 8, 9) ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we cannot navigate to &lt;code&gt;6&lt;/code&gt; with a single function call, nor do we have a convenient search mechanism that will give us all index(es)-paths that navigate to &lt;code&gt;6&lt;/code&gt;, in this case just the single index-path (3, 2, 2).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This proposal is to extend the &lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/pr/258/xpath-functions-40/autodiff.html#func-array-get"&gt;&lt;code&gt;array:get()&lt;/code&gt;&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; function and the &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40-diff.html#id-array-lookup"&gt;&lt;strong&gt;&lt;em&gt;array lookup using function call syntax&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; to accept as their last argument not just a single integer position, but a sequence of integers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The sequence of integer position is called &lt;strong&gt;"item-navigation-path"&lt;/strong&gt;, or simply: &lt;strong&gt;"navigation-path"&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For the array defined above, the navigation path to the contained item &lt;code&gt;6&lt;/code&gt; is:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;(3, 2, 2)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;XPath implementation&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $ar := [1, [2, 3], [4, [5, 6]], (7, 8, 9) ],
    $get := -&amp;gt; ($input as array(*), $indices as xs:integer*)
            {
              let $getHelper := -&amp;gt; ($input as array(*), $indices as xs:integer*, $self as function(*))
              {
                let $headIndex := head($indices), $restindices := tail($indices)
                  return
                    if(exists($restindices))
                      then $self($input($headIndex),$restindices, $self)
                      else if(exists($headIndex))
                             then $input($headIndex)
                             else $input
               }
              return $getHelper($input, $indices, $getHelper)
            }
  return
    $ar =&amp;gt; $get((3, 2, 2))
     (: (: Or alternatively : :) $get($ar, (3, 2, 2)) :)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the above expression is evaluated, the expected, correct result is produced:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goals&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To allow a simple and intuitive deep-indexing navigation with a single function call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To allow for sophisticated deep-searching functionality (like the current &lt;code&gt;array:index-where()&lt;/code&gt; and &lt;code&gt;array:index-of()&lt;/code&gt;, but not just scratching the surface) to return the navigation paths to wanted items of interest, which then could be stored, passed to other functions and easily retrieved.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Other examples&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $ar := [1, [2, 3], [4, [5, 6]], (7, 8, 9) ],
    $get := -&amp;gt; ($input as array(*), $indices as xs:integer*)
            {
              let $getHelper := -&amp;gt; ($input as array(*), $indices as xs:integer*, $self as function(*))
              {
                let $headIndex := head($indices), $restindices := tail($indices)
                  return
                    if(exists($restindices))
                      then $self($input($headIndex),$restindices, $self)
                      else if(exists($headIndex))
                             then $input($headIndex)
                             else $input
               }
              return $getHelper($input, $indices, $getHelper)
            }
  return
     ( $get($ar, (3, 2, 2)), $get($ar, 2), $get($ar, (3,1)),   $get($ar, (3,2)), $get($ar, ())  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the above expression is evaluated, all the expected, correct results are produced:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;6
[2,3]
4
[5,6]
[1,[2,3],[4,[5,6]],(7,8,9)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/202931815-9fd429f4-55e1-4a79-bd0a-fc6c98990393.png" alt="image"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #261 created</title>
   <pubDate>Sun, 20 Nov 2022 09:48:56 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/261</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-261</guid>
   <description>&lt;div&gt;&lt;p&gt;Proposed fn:char function - see issue 121&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Although discussion on issue #121 did not converge on a consensus, this PR proposes a new function which I believe meets the requirements expressed.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #260 created</title>
   <pubDate>Sat, 19 Nov 2022 23:54:43 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/260</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-260</guid>
   <description>&lt;div&gt;&lt;p&gt;[FO] array:index-of&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Seems we are missing the corresponding array function to the standard (on sequences) &lt;strong&gt;&lt;em&gt;fn:index-of(&lt;/em&gt;&lt;/strong&gt;).&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Returns a sequence of positive integers giving the positions within the array &lt;code&gt;$input&lt;/code&gt; of items that are equal to the &lt;code&gt;$search-member&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;array:index-of(
               $input  as array(*),	
               $searched-member as item()*,
               $compare($x as item()*, $y as item()*) as xs:boolean := fn:deep-equal#2
                 ) as xs:integer*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Properties&lt;/h3&gt;
&lt;p&gt;This function is deterministic, context-independent, and focus-independent&lt;/p&gt;
&lt;h3&gt;Rules&lt;/h3&gt;
&lt;p&gt;The result of the function is a sequence of integers, in monotonic ascending order, representing the &lt;code&gt;1&lt;/code&gt;-based positions in the input array of those members &lt;code&gt;$mem&lt;/code&gt; for whom &lt;code&gt;$compare($mem, $searched-member)&lt;/code&gt; is &lt;code&gt;true()&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;More formally, the function returns the result of the XPath expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;  (1 to array:size($input)) ! (-&amp;gt; {  .[$compare($input(.), $searched-member)] }) (.)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Examples&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/202876246-0256f0e7-c736-48b5-b862-7ebbe142d9ce.png" alt="image"/&gt;&lt;/p&gt;
&lt;p&gt;And also this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/10605892/202876368-9dd18c8c-888f-41e2-991d-b0779bc6dcd9.png" alt="image"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #259 created</title>
   <pubDate>Fri, 18 Nov 2022 23:24:25 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/259</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-259</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue #74 - add the fn:parse-html function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR makes the following changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add an &lt;code&gt;.editorconfig&lt;/code&gt; file to allow editors and IDEs to indent the XML source documents consistently.&lt;/li&gt;
&lt;li&gt;Group the XML and JSON parsing and serialization functions into a common top-level section.&lt;/li&gt;
&lt;li&gt;Update the html5 bibref to the WHATWG specification -- the old HTML5 link redirects there.&lt;/li&gt;
&lt;li&gt;Add a new fn:parse-html function specification.&lt;/li&gt;
&lt;li&gt;Define a mapping between the HTML DOM and the XDM nodes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The function specification itself is complete. The HTML DOM to XDM node mapping currently only contains the overview. I'm going to write that for this PR, this is just to start the ball rolling in specifying this function.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Pull request #258 created</title>
   <pubDate>Fri, 18 Nov 2022 19:25:33 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/258</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-258</guid>
   <description>&lt;div&gt;&lt;p&gt;Issue #114 - add array:index-where() function&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The function is symmetric with fn:index-where.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #257 created</title>
   <pubDate>Fri, 18 Nov 2022 18:02:00 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/257</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-257</guid>
   <description>&lt;div&gt;&lt;p&gt;Improving the styling/presentation/prepresentation of the record types in the F&amp;amp;O spec&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I'm not keen on the † symbol being used to indicate and link record types. This is not used elsewhere, and when a record type is used as a type, there is a link to the record type definition. I think that that link is sufficient.&lt;/p&gt;
&lt;p&gt;The presentation of the record type definition has the following format:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;†type-name:
record(
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The record part is fine, but I find the &lt;code&gt;†type-name:&lt;/code&gt; part clunky. For functions, omiting the &lt;code&gt;declare function&lt;/code&gt; part from the XQuery syntax makes sense as the function signature is readable without that.&lt;/p&gt;
&lt;p&gt;The XQuery 4.0 draft spec has the following (as of yet unapproved) syntax for defining type aliases: https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-item-type-declaration. I would suggest using something similar, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type-name as record(
    ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is in line with the way function declarations are specified and looks more readable to me.&lt;/p&gt;
&lt;p&gt;Finally, ommitting the id from the &lt;code&gt;record&lt;/code&gt; element results in &lt;code&gt;†:&lt;/code&gt; before the record. -- It would be nice if instead of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div3 id="html-parser-options"&amp;gt;
           &amp;lt;head&amp;gt;HTML parser options&amp;lt;/head&amp;gt;
           &amp;lt;example role="record"&amp;gt;
              &amp;lt;record id="parse-html-options"&amp;gt;
                 &amp;lt;arg name="method" type="union(enum(&amp;amp;quot;html5&amp;amp;quot;), xs:string)"/&amp;gt;
                 &amp;lt;arg name="*"/&amp;gt;
              &amp;lt;/record&amp;gt;
           &amp;lt;/example&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you could write something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div3 id="parse-html-options"&amp;gt;
           &amp;lt;head&amp;gt;HTML parser options&amp;lt;/head&amp;gt;
           &amp;lt;example role="record"&amp;gt;
              &amp;lt;record type-name="parse-html-options"&amp;gt;
                 &amp;lt;arg name="method" type="union(enum(&amp;amp;quot;html5&amp;amp;quot;), xs:string)"/&amp;gt;
                 &amp;lt;arg name="*"/&amp;gt;
              &amp;lt;/record&amp;gt;
           &amp;lt;/example&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #256 created</title>
   <pubDate>Fri, 18 Nov 2022 16:52:36 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/256</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-256</guid>
   <description>&lt;div&gt;&lt;p&gt;XQuery and XSLT function declarations: static and dynamic context for default parameter values&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In the new text for default values on parameters in XQuery function declarations, we don't say clearly what the static context for the default value expression is. In particular we don't say that it excludes the other parameters of the function. The XSLT spec has similar (though slightly different) shortcomings.&lt;/p&gt;
&lt;p&gt;There's a slight complication in that we say the dynamic context for the default value expression is the dynamic context of the function call. But what if the default value is a variable reference &lt;code&gt;$x&lt;/code&gt;? Statically, this will be (presumably, though we don't currently say) be bound to a global variable &lt;code&gt;$x&lt;/code&gt;. Now, we say (under "dynamic context") that the dynamic "variable values" contains the same [expanded QNames] as the [in-scope variables] in the [static context] for the expression. But, the static context for the default value expression and the static context for the function call have different in-scope variables and they must therefore have different variable values in the dynamic context, so it's wrong to say that the dynamic context for the default value expression is the same as that of the function call.&lt;/p&gt;
&lt;p&gt;My first instinct would be to restrict the default value to being what XSLT calls a "static expression" (this isn't defined in XQuery, but it could be defined easily enough). However, that would disallow using "." as the default value expression, which is something we wanted to permit.&lt;/p&gt;
&lt;p&gt;The next option would be to say that the dynamic context for a default value expression is the same as the dynamic context of the function call except that "variable values" contains bindings for global variables only. This feels rather kludgey, but it's workable in principle. (It's worth noting, and might be worth noting in the spec, that in XQuery all components of the dynamic context except the focus and the variable values are typically immutable within an execution scope. The same isn't true in XSLT, where we have additional dynamic context components like regex-group() and current-output-uri() to worry about.).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>Issue #255 created</title>
   <pubDate>Fri, 18 Nov 2022 12:01:42 GMT</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/255</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-255</guid>
   <description>&lt;div&gt;&lt;p&gt;Build error running gradlew publish on Windows&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When running &lt;code&gt;./gradlew publish&lt;/code&gt; in Windows (via Git Bash) or running the publish gradle task in an IntelliJ Run/Debug configuration, I get the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; Task :xquery_assemble_xpath
Transforming specifications/xquery-40/src/xpath.xml...
Error at char 9 in expression in xsl:variable/@select on line 168 column 60 of assemble-spec.xsl:
  FODC0005  Invalid URI
  file:/D:/Projects/xquery-xslt/qtspecs/build/xquery-40/src/xpath-preprocessed.xml/../D:\Projects\xquery-xslt\qtspecs\build/xquery-40/temp-xpath-grammar.xml. Caused by java.net.URISyntaxException: Illegal character in opaque part at index 2: D:\Projects\xquery-xslt\qtspecs\build/xquery-40/temp-xpath-grammar.xml
  In template rule with match="prodrecap" on line 152 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/style/assemble-spec.xsl#51
  In template rule with match="node()[fn:empty(...)]" on line 48 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/style/assemble-spec.xsl#51
  In template rule with match="node()[fn:empty(...)]" on line 48 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/style/assemble-spec.xsl#51
  In template rule with match="node()[fn:empty(...)]" on line 48 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/style/assemble-spec.xsl#51
  In template rule with match="node()[fn:empty(...)]" on line 48 of assemble-spec.xsl
     invoked by xsl:apply-templates at file:/D:/Projects/xquery-xslt/qtspecs/specifications/xquery-40/style/assemble-xquery.xsl#26
  In template rule with match="/" on line 13 of assemble-xquery.xsl
Invalid URI file:/D:/Projects/xquery-xslt/qtspecs/build/xquery-40/src/xpath-preprocessed.xml/../D:\Projects\xquery-xslt\qtspecs\build/xquery-40/temp-xpath-grammar.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I've tracked this down to the &lt;code&gt;grammar-file&lt;/code&gt; option passed to the XSLT in the &lt;code&gt;build.gradle&lt;/code&gt; file, but I'm not currently sure what the fix should be.&lt;/p&gt;
&lt;p&gt;Note: running this within Linux via WSL works, so the issue looks like it is due to handling Windows paths as file URIs.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item><item>
   <title>QT4 CG meeting 011 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 15 Nov 2022 18:00:42 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/11-15</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-11-15</guid>
</item><item>
   <title>QT4 CG meeting 011 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 11 Nov 2022 12:30:12 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-15</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-15</guid>
</item><item>
   <title>QT4 CG meeting 010 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Thu, 10 Nov 2022 17:37:37 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/11-08</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-11-08</guid>
</item><item>
   <title>QT4 CG meeting 010 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 7 Nov 2022 17:20:10 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-08</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-08</guid>
</item><item>
   <title>QT4 CG meeting 009 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 1 Nov 2022 17:30:00 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/11-01</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-11-01</guid>
</item><item>
   <title>QT4 CG meeting 009 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 28 Oct 2022 08:21:36 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/11-01</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-11-01</guid>
</item><item>
   <title>QT4 CG meeting 008 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 25 Oct 2022 16:47:40 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/10-25</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-10-25</guid>
</item><item>
   <title>QT4 CG meeting 008 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sat, 22 Oct 2022 09:49:46 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/10-25</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-10-25</guid>
</item><item>
   <title>QT4 CG meeting 007 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 18 Oct 2022 17:01:35 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/10-18</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-10-18</guid>
</item><item>
   <title>QT4 CG meeting 007 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 14 Oct 2022 16:44:32 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/10-18</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-10-18</guid>
</item><item>
   <title>QT4 CG meeting 006 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 11 Oct 2022 16:47:33 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/10-11</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-10-11</guid>
</item><item>
   <title>QT4 CG meeting 006 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Tue, 4 Oct 2022 16:56:16 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/10-11</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-10-11</guid>
</item><item>
   <title>QT4 CG meeting 005 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 4 Oct 2022 16:56:16 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/10-04</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-10-04</guid>
</item><item>
   <title>QT4 CG meeting 005 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 30 Sep 2022 16:50:29 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/10-04</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-10-04</guid>
</item><item>
   <title>QT4 CG meeting 004 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 27 Sep 2022 16:40:49 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/09-27</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-09-27</guid>
</item><item>
   <title>QT4 CG meeting 004 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Sun, 25 Sep 2022 17:48:07 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/09-27</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-09-27</guid>
</item><item>
   <title>QT4 CG meeting 003 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 20 Sep 2022 18:25:39 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/09-20</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-09-20</guid>
</item><item>
   <title>QT4 CG meeting 003 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Fri, 16 Sep 2022 15:59:58 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/09-20</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-09-20</guid>
</item><item>
   <title>QT4 CG meeting 002 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 13 Sep 2022 16:30:29 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/09-13</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-09-13</guid>
</item><item>
   <title>QT4 CG meeting 002 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 12 Sep 2022 11:48:44 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/09-13</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-09-13</guid>
</item><item>
   <title>QT4 CG meeting 001 draft minutes</title>
   <description>Draft minutes published.</description>
   <pubDate>Tue, 6 Sep 2022 16:38:31 GMT</pubDate>
   <link>https://qt4cg.org/meeting/minutes/2022/09-06</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#minutes-09-06</guid>
</item><item>
   <title>QT4 CG meeting 001 draft agenda</title>
   <description>Draft agenda published.</description>
   <pubDate>Mon, 5 Sep 2022 14:45:39 GMT</pubDate>
   <link>https://qt4cg.org/meeting/agenda/2022/09-06</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#agenda-09-06</guid>
</item></channel></rss>